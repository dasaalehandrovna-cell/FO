# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.6.1.7
# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∞–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–ø–∏—Å–µ–π
# ============================================

# -----------------------------
# –û–¢–°–ï–ö 1 ‚Äî –ò–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------------
import os
import json
import csv
import logging
import re
import threading
import time
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
APP_URL = os.getenv("APP_URL", "https://yourapp.onrender.com")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.6.1.7"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -----------------------------
# –û–¢–°–ï–ö 2 ‚Äî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[logging.FileHandler(LOG_FILE, encoding="utf-8"), logging.StreamHandler()]
)

def log_info(msg):
    logging.info(msg)
def log_error(msg):
    logging.error(msg)

log_info(f"–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–µ—Ä—Å–∏—è {VERSION}")

# -----------------------------
# –û–¢–°–ï–ö 3 ‚Äî –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ IO
# -----------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "chats": {},
        "active_messages": {},
        "processed_messages": [],
        "forward_targets": [],
        "tracked_messages": {},
        "next_id": 1
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except:
            d = default_data()
    else:
        d = default_data()
    base = default_data()
    for k, v in base.items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

data = load_data()

if OWNER_ID:
    try:
        oi = int(OWNER_ID)
        if oi not in data.get("forward_targets", []):
            data["forward_targets"].append(oi)
            save_data(data)
    except Exception:
        pass

# -----------------------------
# –û–¢–°–ï–ö 4 ‚Äî –ß–∞—Ç/–¥–∞—Ç–∞
# -----------------------------
def get_today_key():
    return datetime.now(TZ).strftime("%Y-%m-%d")

def get_chat_store(chat_id):
    cid = str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid] = {"balance": 0, "records": [], "next_id": 1, "daily_records": {}, "active_windows": {}}
        save_data(data)
    return data["chats"][cid]

def get_today_active_window(chat_id):
    today = get_today_key()
    day_map = data["active_messages"].get(today, {})
    return day_map.get(str(chat_id))

def set_today_active_window(chat_id, message_id):
    today = get_today_key()
    if "active_messages" not in data:
        data["active_messages"] = {}
    if today not in data["active_messages"]:
        data["active_messages"][today] = {}
    data["active_messages"][today][str(chat_id)] = message_id
    save_data(data)

# -----------------------------
# –û–¢–°–ï–ö 5 ‚Äî –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø–∏—Å—è–º–∏
# -----------------------------
def add_record_to_chat(chat_id, amount, note, owner):
    store = get_chat_store(chat_id)
    rid = data.get("next_id", 1)
    rec = {"id": rid, "short_id": f"R{rid}", "timestamp": datetime.now(TZ).isoformat(timespec="seconds"), "amount": amount, "note": note, "owner": owner}
    data.setdefault("records", []).append(rec)
    store.setdefault("records", []).append(rec)
    day = get_today_key()
    store.setdefault("daily_records", {}).setdefault(day, []).append(rec)
    store["balance"] = store.get("balance", 0) + amount
    data["overall_balance"] = data.get("overall_balance", 0) + amount
    data["next_id"] = rid + 1
    save_data(data)
    try: export_to_csv(data)
    except: pass
    return rec

def update_record_in_chat(chat_id, rid, new_amount, new_note):
    store = get_chat_store(chat_id)
    found = None
    for r in store.get("records", []):
        if r["id"] == rid:
            diff = new_amount - r["amount"]
            r["amount"] = new_amount
            r["note"] = new_note
            found = r
            break
    if found:
        for day_recs in store.get("daily_records", {}).values():
            for r in day_recs:
                if r["id"] == rid:
                    r.update(found)
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data(data)
        export_to_csv(data)
        return True, found
    return False, None

def delete_record_in_chat(chat_id, rid):
    store = get_chat_store(chat_id)
    removed = None
    for r in list(store.get("records", [])):
        if r["id"] == rid or str(r["id"]) == str(rid) or r.get("short_id") == f"R{rid}":
            removed = r
            store["records"].remove(r)
            break
    if removed:
        for day_key, recs in store.get("daily_records", {}).items():
            store["daily_records"][day_key] = [x for x in recs if x["id"] != rid]
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        data["records"] = [x for x in data.get("records", []) if x["id"] != rid]
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data(data)
        export_to_csv(data)
        return True, removed
    return False, None

def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["chat_id","ID","short_id","timestamp","amount","note","owner","day_key"])
            for cid, cdata in d.get("chats", {}).items():
                for day_key, records in cdata.get("daily_records", {}).items():
                    for r in records:
                        writer.writerow([cid, r.get("id"), r.get("short_id"), r.get("timestamp"), r.get("amount"), r.get("note"), r.get("owner"), day_key])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")

# -----------------------------
# –û–¢–°–ï–ö 6 ‚Äî –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
# -----------------------------
def build_main_keyboard(chat_id=None, confirm_reset=False):
    kb = types.InlineKeyboardMarkup(row_width=3)
    kb.row(
        types.InlineKeyboardButton("üí∞–±–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
        types.InlineKeyboardButton("üìä–æ—Ç—á—ë—Ç", callback_data="btn_report"),
        types.InlineKeyboardButton("‚úèÔ∏è–∏–∑–º–µ–Ω–∏—Ç—å", callback_data="btn_edit")
    )
    if confirm_reset:
        kb.row(types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_reset"), types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_reset"))
    else:
        kb.row(types.InlineKeyboardButton("‚öôÔ∏è–æ–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="btn_reset"))
    kb.row(types.InlineKeyboardButton("üöÄ", callback_data="btn_start"), types.InlineKeyboardButton("‚ÑπÔ∏è", callback_data="btn_cod"))
    balance_text = ""
    if chat_id is not None:
        store = get_chat_store(chat_id)
        balance_text = f"üí∞ {store.get('balance', 0)} ARS"
    kb.add(types.InlineKeyboardButton(balance_text or "üí∞0 ARS", callback_data="noop"))
    return kb

def build_edit_keyboard():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.row(types.InlineKeyboardButton("‚úèÔ∏è –∏–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_change"), types.InlineKeyboardButton("üóëÔ∏è —É–¥–∞–ª–∏—Ç—å", callback_data="edit_delete"))
    kb.row(types.InlineKeyboardButton("üîô –Ω–∞–∑–∞–¥", callback_data="edit_back"))
    return kb

# -----------------------------
# –û–¢–°–ï–ö 7 ‚Äî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
# -----------------------------
def update_or_send_today_window(chat_id):
    today_key = get_today_key()
    store = get_chat_store(chat_id)
    day_records = store.get("daily_records", {}).get(today_key, [])

    if not day_records:
        text = f"üìÖ {today_key}\n–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.\nüí∞ –ë–∞–ª–∞–Ω—Å: {store.get('balance', 0)} ARS"
    else:
        lines = [f"üìÖ {today_key}", "üìã –û–ø–µ—Ä–∞—Ü–∏–∏:"]
        for r in day_records[-50:]:
            sign = "+" if r["amount"] > 0 else ""
            lines.append(f"{r['short_id']}: {sign}{r['amount']} ‚Äî {r.get('note','')}")
        lines.append(f"\nüí∞ –ë–∞–ª–∞–Ω—Å: {store.get('balance', 0)} ARS")
        text = "\n".join(lines)

    kb = build_main_keyboard(chat_id)
    today_msgs = data.setdefault("active_messages", {}).setdefault(today_key, {})
    active_id = today_msgs.get(str(chat_id))

    if active_id:
        try:
            bot.edit_message_text(text, chat_id, active_id, reply_markup=kb)
        except Exception:
            # –ï—Å–ª–∏ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–æ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
            sent = bot.send_message(chat_id, text, reply_markup=kb)
            set_today_active_window(chat_id, sent.message_id)
        return

    sent = bot.send_message(chat_id, text, reply_markup=kb)
    set_today_active_window(chat_id, sent.message_id)

# -----------------------------
# –û–¢–°–ï–ö 8 ‚Äî Callback –∫–Ω–æ–ø–æ–∫
# -----------------------------
@bot.callback_query_handler(func=lambda c: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    store = get_chat_store(chat_id)

    if call.data in ["btn_balance", "btn_report"]:
        update_or_send_today_window(chat_id)
    elif call.data == "btn_edit":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", chat_id, call.message.message_id, reply_markup=build_edit_keyboard())
    elif call.data == "edit_change":
        store["edit_wait"] = "change_id"
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
    elif call.data == "edit_delete":
        store["edit_wait"] = "delete_id"
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    elif call.data == "edit_back":
        store["edit_wait"] = None
        update_or_send_today_window(chat_id)
    elif call.data == "btn_reset":
        store["edit_wait"] = None
        bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª—è—é—Ç—Å—è‚Ä¶")
        store["records"] = []
        store["daily_records"] = {}
        store["balance"] = 0
        data["records"] = []
        data["overall_balance"] = 0
        save_data(data)
        update_or_send_today_window(chat_id)

# -----------------------------
# –û–¢–°–ï–ö 9 ‚Äî –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∞–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ)
# -----------------------------
num_re = re.compile(r'([+-]?\s*\d+)')
@bot.message_handler(func=lambda m: True)
def handle_message(msg):
    chat_id = msg.chat.id
    store = get_chat_store(chat_id)
    wait_action = store.get("edit_wait")

    if wait_action is None:
        m = num_re.search(msg.text)
        if m:
            try:
                amount = int(m.group(1).replace(" ", ""))
                note = msg.text.replace(m.group(1), "").strip()
                add_record_to_chat(chat_id, amount, note, msg.from_user.id)
                update_or_send_today_window(chat_id)
                bot.send_message(chat_id, "‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞", reply_markup=None, disable_notification=True)
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        return

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if wait_action == "change_id":
        try:
            rid = int(msg.text.strip())
            store["edit_target"] = rid
            store["edit_wait"] = "change_value"
            bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∏ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ {rid}:")
        except:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID")
    elif wait_action == "change_value":
        rid = store.get("edit_target")
        if not rid: store["edit_wait"] = None; return
        parts = msg.text.strip().split(" ", 1)
        try:
            amount = int(parts[0])
            note = parts[1] if len(parts) > 1 else ""
            success, _ = update_record_in_chat(chat_id, rid, amount, note)
            bot.send_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å {rid} –∏–∑–º–µ–Ω–µ–Ω–∞" if success else f"‚ùå –ó–∞–ø–∏—Å—å {rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", disable_notification=True)
        except:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—É–º–º—ã")
        store["edit_wait"] = None
        store["edit_target"] = None
        update_or_send_today_window(chat_id)
    elif wait_action == "delete_id":
        try:
            rid = int(msg.text.strip())
            success, _ = delete_record_in_chat(chat_id, rid)
            bot.send_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å {rid} —É–¥–∞–ª–µ–Ω–∞" if success else f"‚ùå –ó–∞–ø–∏—Å—å {rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", disable_notification=True)
        except:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")
        store["edit_wait"] = None
        update_or_send_today_window(chat_id)

# -----------------------------
# –û–¢–°–ï–ö 13 ‚Äî Flask webhook
# -----------------------------
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª ‚Äî –≤–µ—Ä—Å–∏—è {VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

# -----------------------------
# –û–¢–°–ï–ö 14 ‚Äî Webhook —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫
# -----------------------------
def set_webhook():
    url = f"{APP_URL}/{TOKEN}"
    try:
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url=url)
        log_info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

# -----------------------------
# –û–¢–°–ï–ö 15 ‚Äî –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–º–µ–Ω—ã –¥–Ω—è
# -----------------------------
def schedule_daily_window_creation():
    def task():
        last_day = get_today_key()
        while True:
            try:
                time.sleep(60)
                current_day = get_today_key()
                if current_day != last_day:
                    for chat_id_str in list(data.get("chats", {}).keys()):
                        try:
                            chat_id = int(chat_id_str)
                        except: continue
                        try: update_or_send_today_window(chat_id)
                        except Exception as e: log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞ –Ω–æ–≤–æ–≥–æ –¥–Ω—è –¥–ª—è {chat_id}: {e}")
                    last_day = current_day
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –≤ daily loop: {e}")
                time.sleep(5)
    thread = threading.Thread(target=task, daemon=True)
    thread.start()

# -----------------------------
# –û–¢–°–ï–ö 16 ‚Äî –ó–∞–ø—É—Å–∫
# -----------------------------
if __name__ == "__main__":
    set_webhook()
    schedule_daily_window_creation()
    log_info(f"–ë–æ—Ç –§–û –≤–µ—Ä—Å–∏–∏ {VERSION} –∑–∞–ø—É—â–µ–Ω")
    app.run(host="0.0.0.0", port=PORT)














# -------------------------------
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç "–§–û" ‚Äî –≤–µ—Ä—Å–∏—è 9.8.1 (–ø–æ–ª–Ω–∞—è)
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook + –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ data.json
# –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º —Å Render (Flask)
# -------------------------------

import os
import json
import time
import threading
import re
import csv
from datetime import datetime
from zoneinfo import ZoneInfo
from flask import Flask, request
import telebot
from telebot import types

# -------------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# -------------------------------
VERSION = "9.8.1"
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data981.json"
CSV_FILE = "data981.csv"

TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
PORT = int(os.environ.get("PORT", 5000))

if not TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render.")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -------------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π
# -------------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "active_messages": {},
        "next_id": 1,
        "sent_messages": [],
        "forward_targets": []
    }

def load_data():
    if not os.path.exists(DATA_FILE):
        save_data(default_data())
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(d):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

data = load_data()

# -------------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# -------------------------------
def now_iso_utc():
    return datetime.utcnow().replace(tzinfo=TZ).isoformat()

def delayed_delete(chat_id, msg_id, delay=10):
    def task():
        time.sleep(delay)
        try:
            bot.delete_message(chat_id, msg_id)
        except Exception:
            pass
    threading.Thread(target=task).start()

def record_sent_message(info):
    data["sent_messages"].append(info)
    save_data(data)

def add_forward_target(chat_id, label):
    found = any(t["chat_id"] == chat_id for t in data["forward_targets"])
    if not found:
        data["forward_targets"].append({"chat_id": chat_id, "label": label})
        save_data(data)

# -------------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞
# -------------------------------
@bot.message_handler(commands=["start"])
def cmd_start(msg):
    bot.send_message(msg.chat.id, f"ü§ñ –ë–æ—Ç '–§–û' v{VERSION} –∞–∫—Ç–∏–≤–µ–Ω!\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -500 –µ–¥–∞)")

@bot.message_handler(commands=["–±–∞–ª–∞–Ω—Å"])
def cmd_balance(msg):
    bot.send_message(msg.chat.id, f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {data['overall_balance']}")

@bot.message_handler(commands=["—Å–±—Ä–æ—Å"])
def cmd_reset(msg):
    if str(msg.from_user.id) != str(OWNER_ID):
        bot.send_message(msg.chat.id, "‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return
    save_data(default_data())
    bot.send_message(msg.chat.id, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã.")

@bot.message_handler(func=lambda m: True, content_types=["text", "photo", "video", "document", "voice", "sticker"])
def handle_message(msg):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—É –≤ –Ω–∞—á–∞–ª–µ ‚Äî —ç—Ç–æ –∑–∞–ø–∏—Å—å —Ä–∞—Å—Ö–æ–¥–∞/–ø—Ä–∏—Ö–æ–¥–∞
    if msg.text and re.match(r"^[+-]?\d+", msg.text.strip()):
        try:
            amount, note = parse_record(msg.text)
            add_record(amount, note, msg)
        except Exception as e:
            bot.send_message(msg.chat.id, f"–û—à–∏–±–∫–∞: {e}")
    else:
        forward_message(msg)

def parse_record(text):
    match = re.match(r"^([+-]?\d+)\s*(.*)$", text.strip())
    if not match:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: -500 –µ–¥–∞")
    return int(match.group(1)), match.group(2) or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"

def add_record(amount, note, msg):
    rid = data["next_id"]
    data["next_id"] += 1
    record = {
        "id": rid,
        "short_id": f"R{rid}",
        "timestamp": now_iso_utc(),
        "amount": amount,
        "note": note,
        "owner": msg.from_user.id
    }
    data["records"].append(record)
    data["overall_balance"] += amount
    save_data(data)
    bot.reply_to(msg, f"üíæ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} ({note})\nüí∞ –ë–∞–ª–∞–Ω—Å: {data['overall_balance']}")

# -------------------------------
# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# -------------------------------
def forward_message(msg):
    for target in data.get("forward_targets", []):
        try:
            bot.copy_message(target["chat_id"], msg.chat.id, msg.message_id)
        except Exception:
            pass

# -------------------------------
# Webhook –∏ Flask
# -------------------------------
WEBHOOK_PATH = "/webhook"

@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    try:
        update = telebot.types.Update.de_json(request.data.decode("utf-8"))
        bot.process_new_updates([update])
    except Exception as e:
        print(f"[webhook] –û—à–∏–±–∫–∞: {e}")
    return "ok", 200

@app.route("/", methods=["GET"])
def index():
    return f"ü§ñ –ë–æ—Ç '–§–û' v{VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç."

# -------------------------------
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
# -------------------------------
def set_webhook_auto():
    try:
        host = os.getenv("RENDER_EXTERNAL_URL") or os.getenv("RENDER_EXTERNAL_HOSTNAME") or "https://fo-1.onrender.com"
        url = f"{host}{WEBHOOK_PATH}"
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url)
        print(f"[Webhook] —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")
        if OWNER_ID:
            msg = bot.send_message(int(OWNER_ID), f"‚úÖ Webhook –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {url}")
            delayed_delete(int(OWNER_ID), msg.message_id, 5)
    except Exception as e:
        print(f"[set_webhook_auto] {e}")

# -------------------------------
# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
# -------------------------------
if __name__ == "__main__":
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –§–û v{VERSION} ...")
    if not os.path.exists(DATA_FILE):
        save_data(default_data())
    if OWNER_ID:
        add_forward_target(int(OWNER_ID), "–í–ª–∞–¥–µ–ª–µ—Ü")
    set_webhook_auto()
    app.run(host="0.0.0.0", port=PORT)
