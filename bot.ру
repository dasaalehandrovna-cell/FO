# –ö–æ–¥ –±–æ—Ç–∞ ‚Ññ9.1
# –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –≤–µ—Ä—Å–∏–∏ ‚Ññ8
# –ò–∑–º–µ–Ω–µ–Ω–∏—è:
# 1) –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
# 2) –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–æ–µ –æ–∫–Ω–æ, –ø–æ—Ç–æ–º —É–¥–∞–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ.

import os
import json
import time
import threading
import re
import csv
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
PORT = int(os.environ.get("PORT", 5000))

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -------------------------
# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
# -------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "active_messages": {},
        "next_id": 1,
        "sent_messages": []
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return default_data()
    return default_data()

def save_data(d):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

data = load_data()

# -------------------------
# –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -------------------------
def fmt_amount(n): return f"{abs(n):,}".replace(",", ".")
def make_short_id(n): return f"R{n}"
def date_local_str(dt): return dt.astimezone(TZ).strftime("%Y-%m-%d")
def time_local_str(dt): return dt.astimezone(TZ).strftime("%H:%M")

def delayed_delete(chat_id, msg_id, delay=5):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π."""
    def _del():
        time.sleep(delay)
        try:
            bot.delete_message(chat_id, msg_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {msg_id}: {e}")
    threading.Thread(target=_del, daemon=True).start()

# -------------------------
# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–∫–Ω–∞ –¥–Ω—è
# -------------------------
def get_day_records_for_chat(chat_id, day_date):
    recs = []
    for r in data["records"]:
        if str(r.get("owner")) != str(chat_id):
            continue
        ts = datetime.fromisoformat(r["timestamp"]).astimezone(TZ)
        if date_local_str(ts) == day_date:
            recs.append((ts, r))
    recs.sort(key=lambda x: x[0])
    return recs

def build_day_window(chat_id, day_date):
    recs = get_day_records_for_chat(chat_id, day_date)
    if not recs:
        return "üìò –ó–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."

    lines, day_income, day_expense = [f"üìÖ {day_date}\n"], 0, 0
    last_hour = None
    for ts, r in recs:
        hour = ts.strftime("%H")
        if last_hour != hour:
            if last_hour is not None: lines.append("")
            last_hour = hour
        amt = r["amount"]
        sign = "+" if amt > 0 else "-"
        sid = r["short_id"]
        lines.append(f"üïì {time_local_str(ts)} | {sid} | {sign}{fmt_amount(amt)} {r.get('note','')}".rstrip())
        if amt > 0: day_income += amt
        else: day_expense += abs(amt)
    overall = data["overall_balance"]
    lines += ["", f"üìà –ü—Ä–∏—Ö–æ–¥ –¥–Ω—è: {fmt_amount(day_income)}",
                   f"üìâ –†–∞—Å—Ö–æ–¥ –¥–Ω—è: {fmt_amount(day_expense)}",
                   f"üíµ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {fmt_amount(overall)}"]
    return "\n".join(lines)

# -------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -------------------------
def kb_day_main():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_menu"))
    return kb

# -------------------------
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞ –¥–Ω—è
# -------------------------
def update_day_window_after_change(chat_id, day_date, purpose="day_window"):
    prev = data.get("active_messages", {}).get(day_date)
    text = build_day_window(chat_id, day_date)
    kb = kb_day_main()

    # 1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    sent = bot.send_message(chat_id, text, reply_markup=kb)
    data.setdefault("active_messages", {})[day_date] = {"chat_id": chat_id, "message_id": sent.message_id}
    save_data(data)

    # 2Ô∏è‚É£ –ü–æ—Ç–æ–º —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ (—á–µ—Ä–µ–∑ 5 —Å–µ–∫)
    if prev and int(prev.get("chat_id")) == int(chat_id):
        delayed_delete(prev["chat_id"], prev["message_id"], delay=5)

    return sent

# -------------------------
# –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
# -------------------------
def delete_active_window_if_today_and_belong(chat_id):
    today = datetime.now(tz=TZ).strftime("%Y-%m-%d")
    am = data.get("active_messages", {}).get(today)
    if am and int(am.get("chat_id")) == int(chat_id):
        delayed_delete(am["chat_id"], am["message_id"], delay=5)
        data["active_messages"].pop(today, None)
        save_data(data)
        return True
    return False

# -------------------------
# Midnight watcher
# -------------------------
def midnight_watcher():
    last_date = datetime.now(tz=TZ).strftime("%Y-%m-%d")
    while True:
        try:
            now_date = datetime.now(tz=TZ).strftime("%Y-%m-%d")
            if now_date != last_date:
                owners = {str(r.get("owner")) for r in data.get("records", [])}
                for am in data.get("active_messages", {}).values():
                    owners.add(str(am.get("chat_id")))
                for owner in owners:
                    update_day_window_after_change(int(owner), now_date, purpose="new_day")
                last_date = now_date
            time.sleep(30)
        except Exception as e:
            print("midnight_watcher error:", e)
            time.sleep(30)

threading.Thread(target=midnight_watcher, daemon=True).start()

# -------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# -------------------------
@bot.message_handler(func=lambda m: True)
def handle_any_message(message):
    chat_id = message.chat.id
    text = (message.text or "").strip()
    if not text:
        return
    today = datetime.now(tz=TZ).strftime("%Y-%m-%d")

    lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
    any_added = False
    for line in lines:
        m = re.search(r'([+-]?\s*\d+)', line)
        if not m:
            continue
        raw = m.group(1)
        amt = int(raw.replace("+", "").replace("-", ""))
        if raw.strip().startswith("-"):
            amt = -amt
        note = line[line.find(raw) + len(raw):].strip()
        rec_id = data.get("next_id", 1)
        rec = {
            "id": rec_id,
            "short_id": make_short_id(rec_id),
            "timestamp": datetime.now(tz=ZoneInfo("UTC")).isoformat(),
            "amount": amt,
            "note": note,
            "owner": str(chat_id)
        }
        data["records"].append(rec)
        data["next_id"] = rec_id + 1
        data["overall_balance"] += amt
        any_added = True
    if any_added:
        save_data(data)
        update_day_window_after_change(chat_id, today, purpose="added_records")

# -------------------------
# Webhook routes
# -------------------------
@app.route("/" + TOKEN, methods=["POST"])
def webhook_update():
    update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
    bot.process_new_updates([update])
    return "ok", 200

@app.route("/", methods=["GET"])
def setup_webhook():
    bot.remove_webhook()
    url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    bot.set_webhook(url=url)
    print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", url)
    if OWNER_ID:
        msg = bot.send_message(int(OWNER_ID), "‚úÖ –ë–æ—Ç ‚Ññ9.1 –∑–∞–ø—É—â–µ–Ω")
        delayed_delete(int(OWNER_ID), msg.message_id, delay=5)
    return "ok", 200

if __name__ == "__main__":
    print("–ë–æ—Ç ‚Ññ9.1 –∑–∞–ø—É—â–µ–Ω (webhook)...")
    save_data(data)
    if OWNER_ID:
        msg = bot.send_message(int(OWNER_ID), "‚úÖ –ë–æ—Ç ‚Ññ9.1 –∞–∫—Ç–∏–≤–µ–Ω")
        delayed_delete(int(OWNER_ID), msg.message_id, delay=5)
    app.run(host="0.0.0.0", port=PORT)