# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.8.6
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: –ø–æ–¥–º–µ–Ω—é "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" —Å–æ–¥–µ—Ä–∂–∏—Ç CSV, –§–æ—Ä–≤–∞—Ä–¥, –ü–æ–ª—É—á–∞—Ç–µ–ª—å, –û–±–Ω—É–ª–∏—Ç—å, –ù–∞–∑–∞–¥
# –î–æ–±–∞–≤–ª–µ–Ω–æ: –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∫–∞–∂–¥–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
# –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å–æ —Å—Ç–∞—Ä–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π (CSV, webhook, –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–∫–Ω–∞ –∏ —Ç.–¥.)
# ============================================

import os
import json
import csv
import logging
from datetime import datetime
from zoneinfo import ZoneInfo
import telebot
from flask import Flask, request
from telebot import types

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
APP_URL = os.getenv("APP_URL", "https://yourapp.onrender.com")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.8.6"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -----------------------------
# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
# -----------------------------
def fmt_num(value):
    try:
        return f"{value:,.0f}".replace(",", ".")
    except Exception:
        return str(value)

# -----------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[logging.FileHandler(LOG_FILE, encoding="utf-8"), logging.StreamHandler()]
)

def log_info(msg): logging.info(msg)
def log_error(msg): logging.error(msg)

log_info(f"–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–µ—Ä—Å–∏—è {VERSION}")

# -----------------------------
# –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
# -----------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "chats": {},
        "active_messages": {},
        "processed_messages": [],
        "forward_targets": [],
        "tracked_messages": {},
        "next_id": 1
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except Exception:
            d = default_data()
    else:
        d = default_data()
    base = default_data()
    for k, v in base.items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

data = load_data()

if OWNER_ID:
    try:
        oi = int(OWNER_ID)
        if oi not in data["forward_targets"]:
            data["forward_targets"].append(oi)
            save_data(data)
    except Exception:
        pass

# -----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------
def get_today_key():
    return datetime.now(TZ).strftime("%Y-%m-%d")

def get_chat_store(chat_id):
    cid = str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid] = {
            "balance": 0,
            "records": [],
            "daily_records": {},
            "forward_enabled": False,
            "forward_target_id": None
        }
        save_data(data)
    return data["chats"][cid]

def set_today_active_window(chat_id, message_id):
    today = get_today_key()
    data.setdefault("active_messages", {}).setdefault(today, {})[str(chat_id)] = message_id
    save_data(data)

# -----------------------------
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
# -----------------------------
def add_record_to_chat(chat_id, amount, note, owner):
    store = get_chat_store(chat_id)
    rid = data["next_id"]
    rec = {
        "id": rid,
        "short_id": f"R{rid}",
        "timestamp": datetime.now(TZ).isoformat(timespec="seconds"),
        "amount": amount,
        "note": note,
        "owner": owner
    }
    store["records"].append(rec)
    store.setdefault("daily_records", {}).setdefault(get_today_key(), []).append(rec)
    store["balance"] += amount
    data["records"].append(rec)
    data["overall_balance"] += amount
    data["next_id"] += 1
    save_data(data)
    export_to_csv(data)

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
    try:
        if store.get("forward_enabled"):
            target = store.get("forward_target_id") or OWNER_ID
            if target:
                bot.send_message(int(target), f"üí∞ {fmt_num(amount)} ARS ‚Äî {note}")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")

    return rec

# -----------------------------
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
# -----------------------------
def update_record_in_chat(chat_id, rid, new_amount, new_note):
    store = get_chat_store(chat_id)
    for r in store["records"]:
        if r["id"] == rid:
            r["amount"] = new_amount
            r["note"] = new_note
    store["balance"] = sum(x["amount"] for x in store["records"])
    data["overall_balance"] = sum(x["amount"] for x in data["records"])
    save_data(data)
    export_to_csv(data)

def delete_record_in_chat(chat_id, rid):
    store = get_chat_store(chat_id)
    store["records"] = [r for r in store["records"] if r["id"] != rid]
    store["balance"] = sum(x["amount"] for x in store["records"])
    data["records"] = [x for x in data["records"] if x["id"] != rid]
    data["overall_balance"] = sum(x["amount"] for x in data["records"])
    save_data(data)
    export_to_csv(data)

# -----------------------------
# CSV
# -----------------------------
def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["chat_id","id","short_id","timestamp","amount","note","owner"])
            for cid, store in d.get("chats", {}).items():
                for rec in store.get("records", []):
                    writer.writerow([cid, rec["id"], rec["short_id"], rec["timestamp"], rec["amount"], rec["note"], rec["owner"]])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ CSV: {e}")

# -----------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -----------------------------
def build_edit_menu_keyboard(chat_id=None):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.row(
        types.InlineKeyboardButton("üìÇ CSV", callback_data="btn_csv"),
        types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏", callback_data="btn_edit_list")
    )
    kb.row(
        types.InlineKeyboardButton("üì® –§–æ—Ä–≤–∞—Ä–¥", callback_data="btn_toggle_forward"),
        types.InlineKeyboardButton("üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å", callback_data="btn_set_forward_target")
    )
    kb.row(
        types.InlineKeyboardButton("‚öôÔ∏è –û–±–Ω—É–ª–∏—Ç—å", callback_data="btn_reset"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    return kb

def build_main_keyboard(chat_id=None):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.row(
        types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
        types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report"),
        types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="btn_edit_menu")
    )
    kb.row(
        types.InlineKeyboardButton("üöÄ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="btn_start"),
        types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="btn_cod")
    )
    return kb

# -----------------------------
# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
# -----------------------------
@bot.callback_query_handler(func=lambda c: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    store = get_chat_store(chat_id)

    if call.data == "btn_toggle_forward":
        store["forward_enabled"] = not store["forward_enabled"]
        save_data(data)
        status = "–≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ" if store["forward_enabled"] else "–≤—ã–∫–ª—é—á–µ–Ω–∞ ‚ùå"
        bot.answer_callback_query(call.id, f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ {status}")
        return

    if call.data == "btn_set_forward_target":
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è (0 ‚Äî —Å–±—Ä–æ—Å):")
        bot.register_next_step_handler(msg, process_forward_target)
        return

def process_forward_target(message):
    chat_id = message.chat.id
    store = get_chat_store(chat_id)
    try:
        tid = int(message.text)
        if tid == 0:
            store["forward_target_id"] = None
            bot.send_message(chat_id, "–ü–æ–ª—É—á–∞—Ç–µ–ª—å —Å–±—Ä–æ—à–µ–Ω.")
        else:
            store["forward_target_id"] = tid
            bot.send_message(chat_id, f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å –∑–∞–¥–∞–Ω: {tid}")
        save_data(data)
    except Exception:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")

# -----------------------------
# Flask webhook
# -----------------------------
@app.route("/" + TOKEN, methods=["POST"])
def receive_update():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "ok", 200

@app.route("/")
def index():
    return "Bot is running.", 200

if __name__ == "__main__":
    log_info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Flask")
    app.run(host="0.0.0.0", port=PORT)