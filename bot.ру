# -------------------------------
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç "–§–û" ‚Äî –≤–µ—Ä—Å–∏—è 9.8.1
# –ü–æ–ª–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è (–Ω–∞ –±–∞–∑–µ 9.8.0)
# Flask webhook ‚Äî –≥–æ—Ç–æ–≤ –¥–ª—è Render
# -------------------------------

import os
import json
import csv
import re
import time
from datetime import datetime
from zoneinfo import ZoneInfo

from flask import Flask, request
import telebot
from telebot import types

# -------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# -------------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://fo-1.onrender.com/webhook")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
PORT = int(os.environ.get("PORT", 5000))
TZ = ZoneInfo("America/Argentina/Catamarca")

if not BOT_TOKEN:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = telebot.TeleBot(BOT_TOKEN, threaded=True)
app = Flask(__name__)

VERSION = "9.8.1"

# -------------------------------
# –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
# -------------------------------

def default_data():
    return {
        "overall_balance": 0,
        "records": [],           # —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
        "active_messages": {},   # –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∞—Ç–∞–º
        "next_id": 1,
        "sent_messages": [],
        "forward_targets": []
    }

def load_data():
    if not os.path.exists(DATA_FILE):
        d = default_data()
        save_data(d)
        return d
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        try:
            d = json.load(f)
        except Exception:
            d = default_data()
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
    for k, v in default_data().items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

data = load_data()

# -------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -------------------------------

def get_short_id(n):
    return f"#{n:04d}"

def format_record(r):
    ts = datetime.fromisoformat(r["timestamp"]).astimezone(TZ)
    sign = "‚ûï" if r["amount"] > 0 else "‚ûñ"
    return f"{get_short_id(r['short_id'])} | {sign} {r['amount']} | {r['note']} | {ts.strftime('%d.%m %H:%M')}"

def find_record_by_short_id(short_id):
    for rec in data["records"]:
        if rec["short_id"] == short_id:
            return rec
    return None

def update_balance():
    data["overall_balance"] = sum(r["amount"] for r in data["records"])
    save_data(data)

def export_csv():
    with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["ID", "–°—É–º–º–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–î–∞—Ç–∞"])
        for r in data["records"]:
            ts = datetime.fromisoformat(r["timestamp"]).astimezone(TZ)
            writer.writerow([get_short_id(r["short_id"]), r["amount"], r["note"], ts.strftime("%Y-%m-%d %H:%M")])

# -------------------------------
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
# -------------------------------

def set_webhook_auto():
    try:
        bot.remove_webhook()
        time.sleep(1)
        bot.set_webhook(url=WEBHOOK_URL)
        print(f"[WEBHOOK] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    except Exception as e:
        print(f"[WEBHOOK] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

set_webhook_auto()

# -------------------------------
# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
# -------------------------------

if OWNER_ID:
    try:
        bot.send_message(OWNER_ID, f"ü§ñ –ë–æ—Ç –≤–µ—Ä—Å–∏–∏ {VERSION} –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞: {e}")

# -------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
# -------------------------------

@bot.message_handler(commands=["—Å—Ç–∞—Ä—Ç", "start"])
def start_cmd(message):
    bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –≤–µ–¥—ë—Ç —É—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.\n"
                          "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—É–º–º—ã —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                          "`+1000 –ø—Ä–æ–¥–∞–∂–∞` –∏–ª–∏ `-500 –ø—Ä–æ–¥—É–∫—Ç—ã`.\n\n"
                          "–ö–æ–º–∞–Ω–¥—ã:\n"
                          "/–±–∞–ª–∞–Ω—Å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
                          "/–æ—Ç—á–µ—Ç ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç\n"
                          "/—ç–∫—Å–ø–æ—Ä—Ç ‚Äî —ç–∫—Å–ø–æ—Ä—Ç CSV\n"
                          "/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
                          "/—Å–±—Ä–æ—Å ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
                          "/—Ñ–æ—Ä–≤–∞—Ä–¥ ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π", parse_mode="Markdown")

@bot.message_handler(commands=["–±–∞–ª–∞–Ω—Å"])
def balance_cmd(message):
    update_balance()
    bot.reply_to(message, f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {data['overall_balance']}")

@bot.message_handler(commands=["–æ—Ç—á–µ—Ç"])
def report_cmd(message):
    if not data["records"]:
        bot.reply_to(message, "üìÑ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return
    lines = [format_record(r) for r in data["records"][-15:]]
    msg = "\n".join(lines)
    bot.reply_to(message, f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n{msg}")

@bot.message_handler(commands=["—ç–∫—Å–ø–æ—Ä—Ç"])
def export_cmd(message):
    export_csv()
    with open(CSV_FILE, "rb") as f:
        bot.send_document(message.chat.id, f, visible_file_name="–æ—Ç—á–µ—Ç.csv")
    bot.reply_to(message, "‚úÖ –û—Ç—á—ë—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ CSV.")

@bot.message_handler(commands=["—Å–±—Ä–æ—Å"])
def reset_cmd(message):
    if str(message.from_user.id) != str(OWNER_ID):
        bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return
    data.clear()
    data.update(default_data())
    save_data(data)
    bot.reply_to(message, "‚ö†Ô∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.")

# –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ main.py ‚Äî –≤–µ—Ä—Å–∏—è 9.8.1 (—á–∞—Å—Ç—å 2)

def parse_amount_from_line(line):
    if not line:
        return None
    m = re.search(r'([+-])\s*([\d\s\.,]+)', line)
    if not m:
        # –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ–∑ –∑–Ω–∞–∫–∞ ‚Äî —Å—á–∏—Ç–∞—Ç—å –∫–∞–∫ –ø—Ä–∏—Ö–æ–¥
        m2 = re.search(r'([\d\s\.,]+)', line)
        if not m2:
            return None
        sign = '+'
        rawnum = m2.group(1)
    else:
        sign = m.group(1)
        rawnum = m.group(2)
    digits = re.sub(r'[^\d]', '', rawnum)
    if not digits:
        return None
    try:
        val = int(digits)
    except:
        return None
    return val if sign == '+' else -val

@bot.message_handler(commands=["–¥–æ–±–∞–≤–∏—Ç—å–ø–µ—Ä–µ—Å—ã–ª–∫—É"])
def cmd_add_forward(message):
    if str(message.from_user.id) != str(OWNER_ID):
        bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–∞–º–∏.")
        return
    msg = bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ chat_id –∏–ª–∏ @username —Ü–µ–ª–∏ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ (–∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–æ–π –≥—Ä—É–ø–ø—ã).")
    bot.register_next_step_handler(msg, process_add_forward_step, message.chat.id)

def process_add_forward_step(message, owner_chat_id):
    txt = (message.text or "").strip()
    if not txt and getattr(message, "forward_from_chat", None):
        try:
            target = message.forward_from_chat.id
        except:
            target = None
    else:
        target = txt
    if not target:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    if str(target) in [str(x) for x in data.get("forward_targets", [])]:
        bot.reply_to(message, "‚ÑπÔ∏è –¢–∞–∫–∞—è —Ü–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        return
    data.setdefault("forward_targets", []).append(str(target))
    save_data(data)
    bot.reply_to(message, f"‚úÖ –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {target}")

@bot.message_handler(commands=["—É–¥–∞–ª–∏—Ç—å–ø–µ—Ä–µ—Å—ã–ª–∫—É"])
def cmd_remove_forward(message):
    if str(message.from_user.id) != str(OWNER_ID):
        bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–∞–º–∏.")
        return
    msg = bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ chat_id –∏–ª–∏ @username —Ü–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∏–ª–∏ '–≤—Å—ë' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ).")
    bot.register_next_step_handler(msg, process_remove_forward_step, message.chat.id)

def process_remove_forward_step(message, owner_chat_id):
    txt = (message.text or "").strip()
    if not txt:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.")
        return
    if txt.lower() in ("–≤—Å—ë", "–≤—Å–µ", "all"):
        data.get("forward_targets", []).clear()
        save_data(data)
        bot.reply_to(message, "‚úÖ –í—Å–µ —Ü–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
        return
    lst = data.get("forward_targets", [])
    if str(txt) in [str(x) for x in lst]:
        data["forward_targets"] = [x for x in lst if str(x) != str(txt)]
        save_data(data)
        bot.reply_to(message, f"‚úÖ –¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞: {txt}")
    else:
        bot.reply_to(message, "‚ÑπÔ∏è –¢–∞–∫–∞—è —Ü–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@bot.message_handler(commands=["—Å–ø–∏—Å–æ–∫–ø–µ—Ä–µ—Å—ã–ª–æ–∫", "listforwards"])
def cmd_list_forwards(message):
    lst = data.get("forward_targets", [])
    if not lst:
        bot.reply_to(message, "–°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø—É—Å—Ç.")
        return
    bot.reply_to(message, "–¶–µ–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n" + "\n".join(str(x) for x in lst))

@bot.message_handler(commands=["—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"])
def cmd_edit_start(message):
    if not data.get("records"):
        bot.reply_to(message, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    lines = []
    for r in data.get("records", [])[-20:]:
        sid = get_short_id(r["short_id"])
        lines.append(f"{sid} ‚Äî {r['amount']} ‚Äî {r.get('note','')}")
    text = "–í—ã–±–µ—Ä–∏—Ç–µ short_id (–Ω–∞–ø—Ä–∏–º–µ—Ä #0001) –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ:"
    msg = bot.reply_to(message, text + "\n\n" + "\n".join(lines))
    bot.register_next_step_handler(msg, process_edit_select_step)

def process_edit_select_step(message):
    txt = (message.text or "").strip()
    if not txt:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –û—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    # –æ–∂–∏–¥–∞—Ç—å –≤–∏–¥–∞ #0001 –∏–ª–∏ 1 –∏–ª–∏ R1
    short = txt.strip().lstrip("#Rr")
    try:
        sid = int(short)
    except:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç short_id. –û—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    rec = None
    for r in data.get("records", []):
        if r["short_id"] == sid:
            rec = r
            break
    if not rec:
        bot.reply_to(message, "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    msg = bot.reply_to(message, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∏/–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è {get_short_id(sid)} (–ø—Ä–∏–º–µ—Ä: +1000 –∑–∞—Ä–ø–ª–∞—Ç–∞):")
    bot.register_next_step_handler(msg, process_edit_apply_step, sid)

def process_edit_apply_step(message, sid):
    txt = (message.text or "").strip()
    if not txt:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –û—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    amt = parse_amount_from_line(txt)
    if amt is None:
        bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: +1000 –∏–ª–∏ -500")
        return
    note = txt
    for i, r in enumerate(data.get("records", [])):
        if r["short_id"] == sid:
            data["records"][i]["amount"] = amt
            data["records"][i]["note"] = note
            data["records"][i]["timestamp"] = datetime.now().isoformat()
            save_data(data)
            update_balance()
            bot.reply_to(message, f"‚úÖ {get_short_id(sid)} –æ–±–Ω–æ–≤–ª—ë–Ω.")
            return
    bot.reply_to(message, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")

@bot.message_handler(func=lambda m: True, content_types=['text', 'photo', 'document', 'audio', 'video', 'voice', 'sticker', 'animation'])
def handle_any(message):
    # –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–æ–≤
    if getattr(message.from_user, "is_bot", False):
        return

    # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ ‚Äî —Ñ–æ—Ä–≤–∞—Ä–¥–∏–º –µ–≥–æ –≤ —Ü–µ–ª–∏ (–Ω–µ –ø–∞—Ä—Å–∏–º –∫–∞–∫ –∑–∞–ø–∏—Å—å)
    if getattr(message, "forward_from", None) or getattr(message, "forward_from_chat", None) or getattr(message, "forward_date", None):
        targets = data.get("forward_targets", [])
        if not targets:
            bot.reply_to(message, "–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏.")
            return
        sent = 0
        for t in targets:
            try:
                tid = int(t)
                bot.forward_message(tid, message.chat.id, message.message_id)
                sent += 1
            except Exception:
                try:
                    bot.forward_message(t, message.chat.id, message.message_id)
                    sent += 1
                except Exception:
                    pass
        bot.reply_to(message, f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {sent} —Ü–µ–ª–µ–π.")
        return

    # –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü –∏ –µ—Å—Ç—å —Ü–µ–ª–∏ ‚Äî –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∞–≤—Ç–æ-–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞)
    if str(message.from_user.id) == str(OWNER_ID) and data.get("forward_targets"):
        results = []
        for t in data.get("forward_targets", []):
            try:
                tid = int(t)
                bot.forward_message(tid, message.chat.id, message.message_id)
                results.append((t, True))
            except Exception:
                try:
                    bot.forward_message(t, message.chat.id, message.message_id)
                    results.append((t, True))
                except Exception:
                    results.append((t, False))
        # –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏
        # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏—Ç—å —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –µ—Å—Ç—å

    # –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ
    if not getattr(message, "text", None):
        # –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º –æ–∫–Ω–æ (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
        bot.reply_to(message, "–ü–æ–ª—É—á–µ–Ω–æ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–æ—Ç—á–µ—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å —Å—É–º–º–æ–π.")
        return

    text = message.text.strip()
    # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã
    if text.startswith("/"):
        return

    # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫
    lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
    added_any = False
    for ln in lines:
        amt = parse_amount_from_line(ln)
        if amt is None:
            continue
        note = ln
        sid = data.get("next_id", 1)
        rec = {
            "short_id": sid,
            "amount": amt,
            "note": note,
            "timestamp": datetime.now().isoformat()
        }
        data.setdefault("records", []).append(rec)
        data["next_id"] = sid + 1
        added_any = True
    if added_any:
        update_balance()
        save_data(data)
        bot.reply_to(message, "‚úÖ –ó–∞–ø–∏—Å—å –ø—Ä–∏–Ω—è—Ç–∞.")
    else:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +1000 –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏–ª–∏ -500 —Ö–ª–µ–±.")

@app.route('/webhook', methods=['POST'])
def flask_webhook():
    if request.headers.get('content-type') == 'application/json':
        try:
            json_str = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_str)
            bot.process_new_updates([update])
        except Exception as e:
            print(f"[flask_webhook] {e}")
        return '', 200
    return 'Unsupported Media Type', 415

@app.route('/', methods=['GET'])
def root_index():
    return f'ü§ñ –ë–æ—Ç –§–û v{VERSION} –∞–∫—Ç–∏–≤–µ–Ω.'

if __name__ == "__main__":
    # –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook (–Ω–∞ —Å—Ç–∞—Ä—Ç–µ)
    try:
        bot.remove_webhook()
    except:
        pass
    time.sleep(0.5)
    try:
        bot.set_webhook(url=WEBHOOK_URL)
        print(f"[startup] webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    except Exception as e:
        print(f"[startup] –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
    try:
        if OWNER_ID:
            bot.send_message(OWNER_ID, f"‚úÖ –ë–æ—Ç v{VERSION} –∑–∞–ø—É—â–µ–Ω.")
    except Exception:
        pass

    # –∑–∞–ø—É—Å–∫ Flask
    app.run(host="0.0.0.0", port=PORT)

# -------------------------------
# –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: 460
# -------------------------------