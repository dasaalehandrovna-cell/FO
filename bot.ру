# === –§–û –ë–û–¢ ‚Ññ9 ===
# Flask/webhook –≤–µ—Ä—Å–∏—è
# –£—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤ —Å CSV, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –∞–≤—Ç–æ–æ–∫–Ω–∞–º–∏ –∏ –∑–∞–¥–µ—Ä–∂–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è

from flask import Flask, request
import telebot
import json
import os
from datetime import datetime, timedelta
import time
import csv
from threading import Thread

TOKEN = os.environ.get("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

DATA_FILE = "data.json"
CSV_FILE = "data.csv"

# ----------------------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
# ----------------------------------------
def load_data():
    if not os.path.exists(DATA_FILE):
        return {"records": [], "last_message_id": None, "last_date": None}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def export_csv(data):
    with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["ID", "–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–°—É–º–º–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–¢–∏–ø"])
        for r in data["records"]:
            writer.writerow([r["id"], r["date"], r["time"], r["amount"], r["desc"], r["type"]])

# ----------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ----------------------------------------
def get_balance(records):
    return sum(float(r["amount"]) for r in records)

def format_record(r):
    return f"{r['time']} | {r['amount']} {r['desc']}"

def create_message_text(data):
    today = datetime.now().strftime("%Y-%m-%d")
    text = f"üìÖ {today}\n"
    if not data["records"]:
        text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
    else:
        for r in data["records"]:
            text += f"{r['time']} | {r['amount']} {r['desc']}\n"
    text += f"\nüí∞ –ë–∞–ª–∞–Ω—Å: {get_balance(data['records'])}"
    return text

def delete_message_later(chat_id, message_id):
    def delayed_delete():
        time.sleep(5)
        try:
            bot.delete_message(chat_id, message_id)
        except Exception:
            pass
    Thread(target=delayed_delete).start()

# ----------------------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
# ----------------------------------------
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

def main_menu():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit"))
    kb.add(InlineKeyboardButton("üóë –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë", callback_data="reset"))
    kb.add(InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="export"))
    return kb

def edit_menu():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="delete"))
    kb.add(InlineKeyboardButton("üìÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data="export"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
    return kb

def confirm_delete_menu(id):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_delete_{id}"),
           InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="back"))
    return kb

# ----------------------------------------
# –õ–æ–≥–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# ----------------------------------------
@bot.message_handler(commands=["start", "–±–∞–ª–∞–Ω—Å", "–æ—Ç—á–µ—Ç"])
def start_message(message):
    data = load_data()
    text = create_message_text(data)
    sent = bot.send_message(message.chat.id, text, reply_markup=main_menu())
    if data.get("last_message_id"):
        delete_message_later(message.chat.id, data["last_message_id"])
    data["last_message_id"] = sent.message_id
    data["last_date"] = datetime.now().strftime("%Y-%m-%d")
    save_data(data)

@bot.callback_query_handler(func=lambda c: True)
def callback_handler(call):
    data = load_data()

    if call.data == "edit":
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=edit_menu())

    elif call.data == "back":
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=main_menu())

    elif call.data == "reset":
        bot.send_message(call.message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?",
                         reply_markup=confirm_delete_menu("all"))

    elif call.data.startswith("confirm_delete_"):
        _, _, rec_id = call.data.partition("_")
        if rec_id == "all":
            data["records"] = []
        else:
            data["records"] = [r for r in data["records"] if str(r["id"]) != rec_id]
        save_data(data)
        text = create_message_text(data)
        sent = bot.send_message(call.message.chat.id, text, reply_markup=main_menu())
        delete_message_later(call.message.chat.id, call.message.message_id)
        data["last_message_id"] = sent.message_id
        save_data(data)

    elif call.data == "delete":
        if not data["records"]:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        kb = InlineKeyboardMarkup()
        for r in data["records"]:
            kb.add(InlineKeyboardButton(format_record(r), callback_data=f"confirm_delete_{r['id']}"))
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=kb)

    elif call.data == "export":
        export_csv(data)
        with open(CSV_FILE, "rb") as f:
            bot.send_document(call.message.chat.id, f)

@bot.message_handler(func=lambda m: True)
def handle_transaction(message):
    lines = message.text.strip().split("\n")
    data = load_data()

    for line in lines:
        parts = line.split(maxsplit=1)
        if not parts:
            continue
        amount_str = parts[0]
        desc = parts[1] if len(parts) > 1 else ""
        if amount_str.startswith("+") or amount_str.startswith("-"):
            amount = float(amount_str)
        else:
            continue

        now = datetime.now()
        record = {
            "id": len(data["records"]) + 1,
            "date": now.strftime("%Y-%m-%d"),
            "time": now.strftime("%H:%M:%S"),
            "amount": amount,
            "desc": desc,
            "type": "–ø—Ä–∏—Ö–æ–¥" if amount > 0 else "—Ä–∞—Å—Ö–æ–¥"
        }
        data["records"].append(record)

    save_data(data)
    text = create_message_text(data)
    sent = bot.send_message(message.chat.id, text, reply_markup=main_menu())

    # —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ, –ø–æ—Ç–æ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
    if data.get("last_message_id"):
        delete_message_later(message.chat.id, data["last_message_id"])

    data["last_message_id"] = sent.message_id
    save_data(data)

# ----------------------------------------
# Flask webhook
# ----------------------------------------
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    bot.process_new_updates([telebot.types.Update.de_json(request.data.decode("utf-8"))])
    return "!", 200

@app.route("/", methods=["GET"])
def index():
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{request.host}/{TOKEN}")
    return "–§–û –ë–û–¢ ‚Ññ9 –∑–∞–ø—É—â–µ–Ω!", 200

# ----------------------------------------
# –ó–∞–ø—É—Å–∫
# ----------------------------------------
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))