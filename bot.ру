# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.6.1.7 (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
# –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–º –æ–∫–Ω–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π.
# ============================================

# -----------------------------
# –û–¢–°–ï–ö 1 ‚Äî –ò–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------------
import os
import json
import csv
import logging
import re
import threading
import time
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

# --------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# --------------------------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
APP_URL = os.getenv("APP_URL", "https://fo-1.onrender.com")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.6.1.7"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -----------------------------
# –û–¢–°–ï–ö 2 ‚Äî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)

def log_info(msg):
    logging.info(msg)

def log_error(msg):
    logging.error(msg)

log_info(f"–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–µ—Ä—Å–∏—è {VERSION}")

# -----------------------------
# –û–¢–°–ï–ö 3 ‚Äî –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ IO
# -----------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "chats": {},
        "active_messages": {},
        "processed_messages": [],
        "forward_targets": [],
        "tracked_messages": {},
        "next_id": 1
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ data.json: {e}")
            d = default_data()
    else:
        d = default_data()
    base = default_data()
    for k, v in base.items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

data = load_data()

if OWNER_ID:
    try:
        oi = int(OWNER_ID)
        if oi not in data.get("forward_targets", []):
            data["forward_targets"].append(oi)
            save_data(data)
    except Exception:
        pass

# -----------------------------
# –û–¢–°–ï–ö 4 ‚Äî –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ —á–∞—Ç—É/–¥–∞—Ç–µ
# -----------------------------
def get_today_key():
    return datetime.now(TZ).strftime("%Y-%m-%d")

def get_chat_store(chat_id):
    cid = str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid] = {
            "balance": 0,
            "records": [],
            "next_id": 1,
            "daily_records": {},
            "active_windows": {}
        }
        save_data(data)
    return data["chats"][cid]

def get_today_active_window(chat_id):
    today = get_today_key()
    day_map = data["active_messages"].get(today, {})
    return day_map.get(str(chat_id))

def set_today_active_window(chat_id, message_id):
    today = get_today_key()
    if "active_messages" not in data:
        data["active_messages"] = {}
    if today not in data["active_messages"]:
        data["active_messages"][today] = {}
    data["active_messages"][today][str(chat_id)] = message_id
    save_data(data)

# -----------------------------
# –û–¢–°–ï–ö 5 ‚Äî –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø–∏—Å—è–º–∏
# -----------------------------
def add_record_to_chat(chat_id, amount, note, owner):
    store = get_chat_store(chat_id)
    rid = data.get("next_id", 1)
    rec = {
        "id": rid,
        "short_id": f"R{rid}",
        "timestamp": datetime.now(TZ).isoformat(timespec="seconds"),
        "amount": amount,
        "note": note,
        "owner": owner
    }
    data.setdefault("records", []).append(rec)
    store.setdefault("records", []).append(rec)
    day = get_today_key()
    store.setdefault("daily_records", {}).setdefault(day, []).append(rec)
    store["balance"] = store.get("balance", 0) + amount
    data["overall_balance"] = data.get("overall_balance", 0) + amount
    data["next_id"] = rid + 1
    save_data(data)
    try:
        export_to_csv(data)
    except Exception:
        pass
    return rec

def update_record_in_chat(chat_id, rid, new_amount, new_note):
    store = get_chat_store(chat_id)
    found = None
    for r in store.get("records", []):
        if r["id"] == rid:
            diff = new_amount - r["amount"]
            r["amount"] = new_amount
            r["note"] = new_note
            found = r
            break
    if found:
        # update daily records
        for day_recs in store.get("daily_records", {}).values():
            for r in day_recs:
                if r["id"] == rid:
                    r.update(found)
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data(data)
        export_to_csv(data)
        return True, found
    return False, None

def delete_record_in_chat(chat_id, rid):
    store = get_chat_store(chat_id)
    removed = None
    for r in list(store.get("records", [])):
        if r["id"] == rid or str(r["id"]) == str(rid) or r.get("short_id") == f"R{rid}":
            removed = r
            store["records"].remove(r)
            break
    if removed:
        # remove from daily records
        for day_key, recs in store.get("daily_records", {}).items():
            store["daily_records"][day_key] = [x for x in recs if x["id"] != rid]
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        # also remove from global
        data["records"] = [x for x in data.get("records", []) if x["id"] != rid]
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data(data)
        export_to_csv(data)
        return True, removed
    return False, None

def get_daily_records(chat_id, day_key=None):
    store = get_chat_store(chat_id)
    if not day_key:
        day_key = get_today_key()
    return store.get("daily_records", {}).get(day_key, [])

def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["chat_id","ID","short_id","timestamp","amount","note","owner","day_key"])
            for cid, cdata in d.get("chats", {}).items():
                for day_key, records in cdata.get("daily_records", {}).items():
                    for r in records:
                        writer.writerow([cid, r.get("id"), r.get("short_id"), r.get("timestamp"),
                                         r.get("amount"), r.get("note"), r.get("owner"), day_key])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")

# -----------------------------
# –û–¢–°–ï–ö 6 ‚Äî –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—Å–ø–æ–º. (–ø–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–µ–ª)
# -----------------------------
num_re = re.compile(r'([+-]?\s*\d+)')

def extract_first_number(s):
    if not s:
        return None, None
    m = num_re.search(s)
    if not m:
        return None, None
    token = m.group(1)
    token_clean = token.replace(" ", "")
    try:
        amt = int(token_clean)
    except:
        return None, None
    return amt, token.strip()

# -----------------------------
# –û–¢–°–ï–ö 7 ‚Äî –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø—Ä–µ–∂–Ω—è—è)
# -----------------------------
def build_main_keyboard(chat_id=None, confirm_reset=False):
    kb = types.InlineKeyboardMarkup(row_width=3)
    kb.row(
        types.InlineKeyboardButton("üí∞–±–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
        types.InlineKeyboardButton("üìä–æ—Ç—á—ë—Ç", callback_data="btn_report"),
        types.InlineKeyboardButton("‚úèÔ∏è–∏–∑–º–µ–Ω–∏—Ç—å", callback_data="btn_edit")
    )
    if confirm_reset:
        kb.row(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_reset"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_reset")
        )
    else:
        kb.row(types.InlineKeyboardButton("‚öôÔ∏è–æ–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="btn_reset"))
    kb.row(
        types.InlineKeyboardButton("üöÄ", callback_data="btn_start"),
        types.InlineKeyboardButton("‚ÑπÔ∏è", callback_data="btn_cod"),
    )
    balance_text = ""
    if chat_id is not None:
        store = get_chat_store(chat_id)
        balance_text = f"üí∞ {store.get('balance', 0)} ARS"
    kb.add(types.InlineKeyboardButton(balance_text or "üí∞ 0 ARS", callback_data="noop"))
    return kb

# -----------------------------
# –û–¢–°–ï–ö 8 ‚Äî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ (—è–¥—Ä–æ –æ–¥–Ω–æ–æ–∫–Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞)
# -----------------------------
def update_or_send_today_window(chat_id):
    today_key = get_today_key()
    store = get_chat_store(chat_id)
    day_records = store.get("daily_records", {}).get(today_key, [])

    if not day_records:
        text = f"üìÖ {today_key}\n–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.\nüí∞ –ë–∞–ª–∞–Ω—Å: {store.get('balance', 0)} ARS"
    else:
        lines = [f"üìÖ {today_key}", "üìã –û–ø–µ—Ä–∞—Ü–∏–∏:"]
        for r in day_records[-50:]:
            sign = "+" if r["amount"] > 0 else ""
            lines.append(f"{r['short_id']}: {sign}{r['amount']} ‚Äî {r.get('note','')}")
        lines.append(f"\nüí∞ –ë–∞–ª–∞–Ω—Å: {store.get('balance', 0)} ARS")
        text = "\n".join(lines)

    kb = build_main_keyboard(chat_id)
    today_msgs = data.setdefault("active_messages", {}).setdefault(today_key, {})
    active_id = today_msgs.get(str(chat_id))

    if active_id:
        try:
            bot.edit_message_text(text, chat_id, active_id, reply_markup=kb)
        except Exception as e:
            log_error(f"[update_or_send_today_window] —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
        return

    try:
        sent = bot.send_message(chat_id, text, reply_markup=kb)
        set_today_active_window(chat_id, sent.message_id)
        log_info(f"[update_or_send_today_window] –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}, message_id={sent.message_id}")
    except Exception as e:
        log_error(f"[update_or_send_today_window] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ –¥–ª—è chat {chat_id}: {e}")

# -----------------------------
# –û–¢–°–ï–ö 9 ‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
# -----------------------------
@bot.callback_query_handler(func=lambda c: True)
def handle_callback(call):
    try:
        data_cd = call.data
        cid = call.message.chat.id
        mid = call.message.message_id
        uid = call.from_user.id

        # –ó–∞—â–∏—Ç–∞: —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–±—Ä–æ—Å
        if str(uid) != str(OWNER_ID):
            if data_cd in ("btn_reset", "confirm_reset", "cancel_reset"):
                bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.")
                return

        # –û—Ç–≤–µ—Ç–∏–º –Ω–∞ callback (—É–±–∏—Ä–∞–µ–º –∫—Ä—É—Ç–∏–ª–∫—É)
        def ack(text=None):
            try:
                if text:
                    bot.answer_callback_query(call.id, text)
                else:
                    bot.answer_callback_query(call.id)
            except:
                pass

        # –ë–∞–ª–∞–Ω—Å ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
        if data_cd == "btn_balance":
            store = get_chat_store(cid)
            text = f"üí∞ –ë–∞–ª–∞–Ω—Å: {store.get('balance', 0)} ARS"
            try:
                bot.edit_message_text(text, cid, mid, reply_markup=build_main_keyboard(cid))
            except Exception:
                bot.send_message(cid, text, reply_markup=build_main_keyboard(cid))
            ack()
            return

        # –û—Ç—á–µ—Ç ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
        if data_cd == "btn_report":
            recs = get_daily_records(cid)
            if not recs:
                text = "üìã –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."
            else:
                lines = ["üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:"]
                for r in recs[-20:]:
                    sign = "+" if r["amount"] > 0 else ""
                    lines.append(f"{r['short_id']}: {sign}{r['amount']} ARS ‚Äî {r.get('note','')}")
                text = "\n".join(lines)
            try:
                bot.edit_message_text(text, cid, mid, reply_markup=build_main_keyboard(cid))
            except Exception:
                bot.send_message(cid, text, reply_markup=build_main_keyboard(cid))
            ack()
            return

        # –°–±—Ä–æ—Å ‚Äî –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–≥–ª–æ–±–∞–ª—å–Ω—ã–π)
        if data_cd == "btn_reset":
            kb = build_main_keyboard(cid, confirm_reset=True)
            text = "‚ö†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?"
            try:
                bot.edit_message_text(text, cid, mid, reply_markup=kb)
            except:
                bot.send_message(cid, text, reply_markup=kb)
            ack()
            return

        if data_cd == "confirm_reset":
            # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º –≤–∏–¥–µ)
            chat_store = data["chats"].get(str(cid))
            if chat_store:
                chat_store["records"] = []
                chat_store["balance"] = 0
                chat_store["daily_records"] = {}
                chat_store["next_id"] = 1
            save_data(data)
            text = "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã."
            try:
                bot.edit_message_text(text, cid, mid, reply_markup=build_main_keyboard(cid))
            except:
                bot.send_message(cid, text, reply_markup=build_main_keyboard(cid))
            ack()
            return

        if data_cd == "cancel_reset":
            text = "‚ùå –û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞."
            try:
                bot.edit_message_text(text, cid, mid, reply_markup=build_main_keyboard(cid))
            except:
                bot.send_message(cid, text, reply_markup=build_main_keyboard(cid))
            ack()
            return

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if data_cd == "btn_start":
            try:
                bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", cid, mid, reply_markup=build_main_keyboard(cid))
            except:
                bot.send_message(cid, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=build_main_keyboard(cid))
            ack()
            return

        # –û –∫–æ–¥–µ / –∏–Ω—Ñ–æ
        if data_cd == "btn_cod":
            info_text = (
                f"ü§ñ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è {VERSION}\n\n"
                "‚Ä¢ –£—á—ë—Ç –ø–æ –¥–Ω—è–º (–æ–¥–Ω–æ –æ–∫–Ω–æ)\n"
                "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π\n"
                "‚Ä¢ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º\n"
            )
            try:
                bot.edit_message_text(info_text, cid, mid, reply_markup=build_main_keyboard(cid))
            except:
                bot.send_message(cid, info_text, reply_markup=build_main_keyboard(cid))
            ack()
            return

        # –ò–≥–Ω–æ—Ä (–±–∞–ª–∞–Ω—Å –∫–Ω–æ–ø–∫–∞)
        if data_cd in ("noop",):
            ack()
            return

        # --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π ---
        if data_cd == "btn_edit":
            recs = get_daily_records(cid)
            # –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π ‚Äî –≤–µ—Ä–Ω—É—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not recs:
                try:
                    bot.edit_message_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", cid, mid, reply_markup=build_main_keyboard(cid))
                except:
                    bot.send_message(cid, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=build_main_keyboard(cid))
                ack()
                return
            # —Å—Ç—Ä–æ–∏–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
            kb = types.InlineKeyboardMarkup(row_width=2)
            for r in recs[-10:]:
                lab = f"{r['short_id']} {r['amount']}"
                kb.add(types.InlineKeyboardButton(lab, callback_data=f"selrec_{r['id']}"))
            kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="btn_start"))
            try:
                bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å:", cid, mid, reply_markup=kb)
            except:
                bot.send_message(cid, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å:", reply_markup=kb)
            ack()
            return

        # --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å: –ø–æ–∫–∞–∑–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ Edit/Delete ---
        if data_cd.startswith("selrec_"):
            try:
                rec_id = int(data_cd.split("_", 1)[1])
            except:
                ack("–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞")
                return
            # –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            rec_exists = False
            for r in get_chat_store(cid).get("records", []):
                if r["id"] == rec_id:
                    rec_exists = True
                    rec_obj = r
                    break
            if not rec_exists:
                try:
                    bot.edit_message_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", cid, mid, reply_markup=build_main_keyboard(cid))
                except:
                    bot.send_message(cid, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=build_main_keyboard(cid))
                ack()
                return
            kb = types.InlineKeyboardMarkup(row_width=2)
            kb.add(
                types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"editrec_{rec_id}"),
                types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"deleterec_{rec_id}")
            )
            kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="btn_edit"))
            txt = f"–ó–∞–ø–∏—Å—å {rec_obj.get('short_id')}: {rec_obj.get('amount')} ‚Äî {rec_obj.get('note','')}"
            try:
                bot.edit_message_text(txt, cid, mid, reply_markup=kb)
            except:
                bot.send_message(cid, txt, reply_markup=kb)
            ack()
            return

        # --- –ù–∞—á–∞—Ç—å —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –∂–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π —Å—É–º–º–æ–π/–∑–∞–º–µ—Ç–∫–æ–π ---
        if data_cd.startswith("editrec_"):
            try:
                rec_id = int(data_cd.split("_", 1)[1])
            except:
                ack("–û—à–∏–±–∫–∞")
                return
            # —Å–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤ tracked_messages –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            data.setdefault("tracked_messages", {}).setdefault(str(cid), {})[str(uid)] = {
                "action": "edit_wait_value",
                "rid": rec_id
            }
            save_data(data)
            try:
                bot.edit_message_text(f"–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ {rec_id} (–Ω–∞–ø—Ä–∏–º–µ—Ä: +500 –∑–∞—Ä–ø–ª–∞—Ç–∞):", cid, mid)
            except:
                bot.send_message(cid, f"–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ {rec_id} (–Ω–∞–ø—Ä–∏–º–µ—Ä: +500 –∑–∞—Ä–ø–ª–∞—Ç–∞):")
            ack()
            return

        # --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
        if data_cd.startswith("deleterec_"):
            try:
                rec_id = int(data_cd.split("_", 1)[1])
            except:
                ack("–û—à–∏–±–∫–∞")
                return
            kb = types.InlineKeyboardMarkup(row_width=2)
            kb.add(
                types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_del_{rec_id}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_del_{rec_id}")
            )
            try:
                bot.edit_message_text(f"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å R{rec_id}?", cid, mid, reply_markup=kb)
            except:
                bot.send_message(cid, f"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å R{rec_id}?", reply_markup=kb)
            ack()
            return

        # --- –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ ---
        if data_cd.startswith("confirm_del_"):
            try:
                rec_id = int(data_cd.split("_", 2)[2])
            except:
                # try alternative split
                parts = data_cd.split("_")
                rec_id = int(parts[-1]) if parts and parts[-1].isdigit() else None
            if rec_id is None:
                ack("–û—à–∏–±–∫–∞ id")
                return
            ok, removed = delete_record_in_chat(cid, rec_id)
            if ok:
                try:
                    bot.edit_message_text(f"‚úÖ –ó–∞–ø–∏—Å—å R{rec_id} —É–¥–∞–ª–µ–Ω–∞.", cid, mid, reply_markup=build_main_keyboard(cid))
                except:
                    bot.send_message(cid, f"‚úÖ –ó–∞–ø–∏—Å—å R{rec_id} —É–¥–∞–ª–µ–Ω–∞.", reply_markup=build_main_keyboard(cid))
                # –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
                update_or_send_today_window(cid)
            else:
                try:
                    bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞).", cid, mid, reply_markup=build_main_keyboard(cid))
                except:
                    bot.send_message(cid, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞).", reply_markup=build_main_keyboard(cid))
            ack()
            return

        if data_cd.startswith("cancel_del_"):
            try:
                # –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º –≤ —Å–ø–∏—Å–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                bot.edit_message_text("–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.", cid, mid, reply_markup=build_main_keyboard(cid))
            except:
                bot.send_message(cid, "–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=build_main_keyboard(cid))
            ack()
            return

        # –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ –ø–æ–¥–æ—à–ª–æ
        ack()
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ callback: {e}")

# -----------------------------
# –û–¢–°–ï–ö 10 ‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
# -----------------------------
@bot.message_handler(func=lambda m: True, content_types=[
    "text", "photo", "document", "voice", "video", "audio", "sticker"
])
def handle_message(msg):
    try:
        if not getattr(msg, "from_user", None) or msg.from_user.is_bot:
            return

        chat_id = msg.chat.id
        user_id = msg.from_user.id

        # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (inline edit)
        chat_state = data.setdefault("tracked_messages", {})
        user_states = chat_state.get(str(chat_id), {})
        state = None
        if user_states:
            state = user_states.get(str(user_id))

        if state and state.get("action") == "edit_wait_value":
            rid = state.get("rid")
            lines = msg.text.splitlines() if msg.text else []
            if not lines:
                bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É —Å —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: +500 –ø—Ä–æ–¥–∞–∂–∞.", reply_markup=build_main_keyboard(chat_id))
                return
            first_line = lines[0].strip()
            amt, token = extract_first_number(first_line)
            if amt is None:
                bot.send_message(chat_id, "–ß–∏—Å–ª–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=build_main_keyboard(chat_id))
                return
            m = num_re.search(first_line)
            note = first_line[m.end():].strip() if m else ""
            final_amt = amt if token.lstrip().startswith("+") else -abs(amt)
            ok, updated = update_record_in_chat(chat_id, rid, final_amt, note)
            # —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            user_states.pop(str(user_id), None)
            data["tracked_messages"][str(chat_id)] = user_states
            save_data(data)
            if ok:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ (–≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)
                update_or_send_today_window(chat_id)
                bot.send_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å R{rid} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=build_main_keyboard(chat_id))
            else:
                bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞).", reply_markup=build_main_keyboard(chat_id))
            return

        # 2) –ü—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–∫–∞–∫ –±—ã–ª–æ)
        msg_key = f"{chat_id}:{msg.message_id}"
        processed = data.setdefault("processed_messages", [])
        if msg_key in processed:
            return

        # 3) –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏)
        owner_int = int(OWNER_ID) if OWNER_ID and str(OWNER_ID).isdigit() else None
        is_owner_msg = (owner_int is not None and user_id == owner_int)

        # 4) –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ (—Ç–µ–∫—Å—Ç –∏–ª–∏ caption)
        lines = []
        if msg.content_type == "text" and msg.text:
            lines = msg.text.splitlines()
        elif getattr(msg, "caption", None):
            lines = msg.caption.splitlines()

        # 5) –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —á–∏—Å–ª–æ
        added = False
        for line in lines:
            line = line.strip()
            if not line:
                continue
            amt, token = extract_first_number(line)
            if amt is None:
                continue
            m = num_re.search(line)
            note = line[m.end():].strip() if m else ""
            final_amt = amt if token.lstrip().startswith("+") else -abs(amt)
            add_record_to_chat(chat_id, final_amt, note, user_id)
            added = True

        # 6) –ü–æ–º–µ—Ç–∫–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
        processed.append(msg_key)
        if len(processed) > 2000:
            processed = processed[-1000:]
        data["processed_messages"] = processed
        save_data(data)

        # 7) –û–±–Ω–æ–≤–ª—è–µ–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º **–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ** —ç—Ç–æ–≥–æ –¥–Ω—è
        if added:
            update_or_send_today_window(chat_id)

        # 8) –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–∫–∞–∫ –±—ã–ª–æ)
        if is_owner_msg:
            for target in data.get("forward_targets", []):
                try:
                    t = int(target)
                except:
                    continue
                if t == chat_id:
                    update_or_send_today_window(owner_int)
                    continue
                try:
                    sent = bot.copy_message(chat_id=t, from_chat_id=chat_id, message_id=msg.message_id)
                    data.setdefault("processed_messages", []).append(f"{sent.chat.id}:{sent.message_id}")
                except Exception as e:
                    log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ {t}: {e}")
            save_data(data)

    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ handle_message: {e}")

# -----------------------------
# –û–¢–°–ï–ö 13 ‚Äî Flask webhook –∏ web endpoints
# -----------------------------
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª ‚Äî –≤–µ—Ä—Å–∏—è {VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

# -----------------------------
# –û–¢–°–ï–ö 14 ‚Äî Webhook —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫
# -----------------------------
def set_webhook():
    url = f"{APP_URL}/{TOKEN}"
    try:
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url=url)
        log_info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")
        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
        try:
            if OWNER_ID:
                bot.send_message(int(OWNER_ID), f"üåê Webhook –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {url}")
        except Exception as e:
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ webhook: {e}")
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

# -----------------------------
# –û–¢–°–ï–ö 15 ‚Äî –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–º–µ–Ω—ã –¥–Ω—è (–∫–∞–∫ –±—ã–ª–æ)
# -----------------------------
def schedule_daily_window_creation():
    def task():
        last_day = get_today_key()
        while True:
            try:
                time.sleep(60)
                current_day = get_today_key()
                if current_day != last_day:
                    for chat_id_str in list(data.get("chats", {}).keys()):
                        try:
                            chat_id = int(chat_id_str)
                        except:
                            continue
                        try:
                            update_or_send_today_window(chat_id)
                        except Exception as e:
                            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞ –Ω–æ–≤–æ–≥–æ –¥–Ω—è –¥–ª—è {chat_id}: {e}")
                    last_day = current_day
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –≤ daily loop: {e}")
                time.sleep(5)
    thread = threading.Thread(target=task, daemon=True)
    thread.start()

# -----------------------------
# –û–¢–°–ï–ö 16 ‚Äî –ó–∞–ø—É—Å–∫
# -----------------------------
if __name__ == "__main__":
    set_webhook()
    schedule_daily_window_creation()
    log_info(f"–ë–æ—Ç –§–û –≤–µ—Ä—Å–∏–∏ {VERSION} –∑–∞–ø—É—â–µ–Ω")
    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        if OWNER_ID:
            bot.send_message(int(OWNER_ID), "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ –∑–∞–ø—É—Å–∫–µ: {e}")
    app.run(host="0.0.0.0", port=PORT)
