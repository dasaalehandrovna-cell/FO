# ============================================
# Финансовый бот — версия 9.6.1.6 (одно окно)
# ============================================

# -----------------------------
# ОТСЕК 1 — Импорты и настройки
# -----------------------------
import os, json, csv, logging, re, requests
from datetime import datetime
from zoneinfo import ZoneInfo
import telebot
from flask import Flask, request
from telebot import types

TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
APP_URL = os.getenv("APP_URL", "https://fo-1.onrender.com")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.6.1.6"

if not TOKEN:
    raise ValueError("BOT_TOKEN не установлен!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# --------------------------------------------
# ОТСЕК 2 — Логирование
# --------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[logging.FileHandler(LOG_FILE, encoding="utf-8"), logging.StreamHandler()]
)
log_info = logging.info
log_error = logging.error
log_info(f"Старт приложения. Версия {VERSION}")

# --------------------------------------------
# ОТСЕК 3 — Данные
# --------------------------------------------
def default_data():
    return {
        "chats": {},              # chat_id -> {balance, records[], next_id, active_window_id}
        "forward_targets": [],    # chat_id для пересылки
        "tracked_messages": {},   # chat_id -> {user_id: state}
        "processed_messages": []  # для пересылки без дублей
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except:
            d = default_data()
    else:
        d = default_data()
    # ensure keys
    for k, v in default_data().items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"Ошибка сохранения data.json: {e}")

def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["chat_id","id","short_id","timestamp","amount","note","owner"])
            for cid, cdata in d.get("chats", {}).items():
                for r in cdata.get("records", []):
                    writer.writerow([cid, r["id"], r["short_id"], r["timestamp"], r["amount"], r["note"], r["owner"]])
    except Exception as e:
        log_error(f"Ошибка экспорта CSV: {e}")

data = load_data()
if OWNER_ID:
    try:
        owner_int = int(OWNER_ID)
        if owner_int not in data["forward_targets"]:
            data["forward_targets"].append(owner_int)
            save_data(data)
    except: pass

# --------------------------------------------
# ОТСЕК 4 — Вспомогательные функции
# --------------------------------------------
num_re = re.compile(r'([+-]?\s*\d+)')

def extract_first_number(s):
    if not s: return None, None
    m = num_re.search(s)
    if not m: return None, None
    token = m.group(1).replace(" ", "")
    try: amt = int(token)
    except: return None, None
    return amt, m.group(1).strip()

def get_chat_store(chat_id):
    chat_id = str(chat_id)
    if chat_id not in data["chats"]:
        data["chats"][chat_id] = {"balance":0,"records":[],"next_id":1,"active_window_id":None}
        save_data(data)
    return data["chats"][chat_id]

def add_record_to_chat(chat_id, amount, note, owner):
    store = get_chat_store(chat_id)
    rid = store.get("next_id", 1)
    ts = datetime.now(TZ).isoformat()
    rec = {"id":rid,"short_id":f"R{rid}","timestamp":ts,"amount":amount,"note":note,"owner":owner}
    store.setdefault("records", []).append(rec)
    store["balance"] = store.get("balance",0) + amount
    store["next_id"] = rid + 1
    save_data(data)
    export_to_csv(data)
    return rec

def delete_record_in_chat(chat_id, rec_id):
    store = get_chat_store(chat_id)
    recs = store.get("records", [])
    for r in recs:
        if r["id"] == rec_id or str(r["id"]) == str(rec_id):
            recs.remove(r)
            store["balance"] = sum([r["amount"] for r in recs])
            save_data(data)
            export_to_csv(data)
            return True, r
    return False, None

def update_record_in_chat(chat_id, rec_id, new_amount, new_note):
    store = get_chat_store(chat_id)
    for r in store.get("records", []):
        if r["id"] == rec_id or str(r["id"]) == str(rec_id):
            r["amount"] = new_amount
            r["note"] = new_note
            store["balance"] = sum([x["amount"] for x in store.get("records",[])])
            save_data(data)
            export_to_csv(data)
            return True, r
    return False, None

def format_amount(v):
    return f"+{v}" if v>0 else f"{v}"

# --------------------------------------------
# ОТСЕК 5 — Клавиатуры
# --------------------------------------------
def build_main_keyboard():
    kb = types.InlineKeyboardMarkup()
    kb.row(types.InlineKeyboardButton("💰 Баланс", callback_data="btn_balance"),
           types.InlineKeyboardButton("📊 Отчёт", callback_data="btn_report"))
    kb.row(types.InlineKeyboardButton("✏️ Редактировать", callback_data="btn_edit"),
           types.InlineKeyboardButton("⚙️ Сброс", callback_data="btn_reset"))
    kb.row(types.InlineKeyboardButton("🚀 Старт", callback_data="btn_start"),
           types.InlineKeyboardButton("📘 О коде", callback_data="btn_cod"))
    return kb

def update_main_window(chat_id, extra_text=None):
    store = get_chat_store(chat_id)
    lines = []
    lines.append(f"💰 Баланс: {format_amount(store.get('balance',0))} ₽")
    recs = store.get("records", [])[-20:]
    if recs:
        lines.append("\n📋 Последние операции:")
        for r in recs:
            lines.append(f"{r['short_id']}: {format_amount(r['amount'])} — {r.get('note','')}")
    if extra_text:
        lines.append("\n"+extra_text)
    text = "\n".join(lines)
    kb = build_main_keyboard()
    mid = store.get("active_window_id")
    try:
        if mid:
            bot.edit_message_text(text, chat_id, mid, reply_markup=kb)
        else:
            m = bot.send_message(chat_id, text, reply_markup=kb)
            store["active_window_id"] = m.message_id
            save_data(data)
    except:
        m = bot.send_message(chat_id, text, reply_markup=kb)
        store["active_window_id"] = m.message_id
        save_data(data)

# --------------------------------------------
# ОТСЕК 6 — Основные команды (edit, delete, report, balance)
# --------------------------------------------
@bot.message_handler(commands=["start"])
def cmd_start(msg):
    update_main_window(msg.chat.id, "👋 Добро пожаловать в Финансовый бот!")

@bot.message_handler(commands=["balance"])
def cmd_balance(msg):
    update_main_window(msg.chat.id)

@bot.message_handler(commands=["report"])
def cmd_report(msg):
    update_main_window(msg.chat.id)

@bot.message_handler(commands=["delete"])
def cmd_delete(msg):
    parts = msg.text.split()
    if len(parts)<2: return
    rid = int(parts[1].lstrip("R"))
    ok, rec = delete_record_in_chat(msg.chat.id, rid)
    if ok:
        update_main_window(msg.chat.id, f"✅ Запись R{rid} удалена.")
    else:
        update_main_window(msg.chat.id, f"❌ Запись R{rid} не найдена.")

# --------------------------------------------
# ОТСЕК 7 — Callback кнопки
# --------------------------------------------
@bot.callback_query_handler(func=lambda c: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    data_cd = call.data
    if data_cd=="btn_balance": update_main_window(chat_id)
    elif data_cd=="btn_report": update_main_window(chat_id)
    elif data_cd=="btn_reset":
        if str(call.from_user.id)!=str(OWNER_ID): return
        data["chats"][str(chat_id)] = {"balance":0,"records":[],"next_id":1,"active_window_id=None"}
        save_data(data)
        update_main_window(chat_id, "✅ Данные сброшены владельцем")
    elif data_cd=="btn_start": cmd_start(call.message)
    elif data_cd=="btn_cod":
        update_main_window(chat_id, f"📘 Финансовый бот v{VERSION}")
    elif data_cd=="btn_edit":
        update_main_window(chat_id, "✏️ Редактирование — отправьте '+100 заметка' или '-50 хлеб'.")

# --------------------------------------------
# ОТСЕК 8 — Обработка сообщений
# --------------------------------------------
@bot.message_handler(func=lambda m: True, content_types=["text"])
def handle_message(msg):
    if not getattr(msg,"from_user",None): return
    if msg.from_user.is_bot: return
    lines = msg.text.splitlines()
    any_added = False
    for line in lines:
        line = line.strip()
        if not line: continue
        amt, token = extract_first_number(line)
        if amt is None: continue
        note = line[num_re.search(line).end():].strip() if num_re.search(line) else ""
        raw_token = token
        if raw_token.startswith("+"): final_amt = amt
        elif raw_token.startswith("-"): final_amt = amt
        else: final_amt = -abs(amt)
        add_record_to_chat(msg.chat.id, final_amt, note, msg.from_user.id)
        any_added = True
    if any_added:
        update_main_window(msg.chat.id, "✅ Добавлены новые операции.")

# --------------------------------------------
# ОТСЕК 9 — Flask webhook
# --------------------------------------------
@app.route("/", methods=["GET"])
def index(): return f"Бот версия {VERSION} запущен."

@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
        bot.process_new_updates([update])
    except Exception as e:
        log_error(f"Webhook error: {e}")
    return "ok", 200

def ensure_webhook():
    try:
        url = f"{APP_URL.rstrip('/')}/webhook"
        info = requests.get(f"https://api.telegram.org/bot{TOKEN}/getWebhookInfo", timeout=10).json()
        if info.get("result",{}).get("url","") != url:
            r = requests.get(f"https://api.telegram.org/bot{TOKEN}/setWebhook", params={"url":url}, timeout=10)
            if r.json().get("ok"): log_info(f"Webhook установлен: {url}")
    except Exception as e:
        log_error(f"Webhook setup error: {e}")

# --------------------------------------------
# ОТСЕК 10 — Запуск
# --------------------------------------------
if __name__=="__main__":
    ensure_webhook()
    if OWNER_ID:
        try: bot.send_message(int(OWNER_ID), f"💬 Бот v{VERSION} запущен ✅")
        except: pass
    app.run(host="0.0.0.0", port=PORT)