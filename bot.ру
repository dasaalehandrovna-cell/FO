# ===========================================
# 1. –ò–º–ø–æ—Ä—Ç—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ===========================================
import os, json, time, re, threading
from datetime import datetime
from flask import Flask, request
import telebot
import csv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"
APP_URL = "https://yourapp.onrender.com"  # –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π
PORT = int(os.environ.get("PORT", 5000))
VERSION = "v3.0"

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

DATA_FILE = "data.json"
CSV_FILE = "data.csv"
data = {"chats": {}}


# ===========================================
# 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
# ===========================================
def load_data():
    global data
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = {"chats": {}}

def save_data(d):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

load_data()


# ===========================================
# 3. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ===========================================
def get_chat_store(chat_id):
    sid = str(chat_id)
    if sid not in data["chats"]:
        data["chats"][sid] = {
            "balance": 0,
            "records": [],
            "next_id": 1,
            "daily_records": {},
            "active_windows": {},
            "edit_wait": None,
            "edit_target": None,
            "forward_target": None
        }
    return data["chats"][sid]

def get_today_key():
    return datetime.now().strftime("%Y-%m-%d")

def format_amount(v):
    return f"{v:,.2f}".replace(",", " ").replace(".00", "")

def log_info(msg): print(f"[INFO] {msg}")
def log_error(msg): print(f"[ERROR] {msg}")


# ===========================================
# 4. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –æ–∫–Ω–∞
# ===========================================
from telebot import types

def build_main_keyboard(chat_id, confirm_reset=False):
    kb = types.InlineKeyboardMarkup()
    row1 = [types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
            types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report")]
    row2 = [types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="btn_edit"),
            types.InlineKeyboardButton("‚ôªÔ∏è –û–±–Ω—É–ª–∏—Ç—å", callback_data="btn_reset")]
    row3 = [types.InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="export_csv"),
            types.InlineKeyboardButton("üîÅ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="btn_start")]
    row4 = [types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="btn_cod")]
    kb.row(*row1); kb.row(*row2); kb.row(*row3); kb.row(*row4)
    if confirm_reset:
        kb.row(types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_reset"),
               types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_reset"))
    return kb


def update_or_send_today_window(chat_id, extra_text=None):
    store = get_chat_store(chat_id)
    today = get_today_key()
    records = store.get("daily_records", {}).get(today, [])
    total = sum(r["amount"] for r in records)
    inc = sum(r["amount"] for r in records if r["amount"] > 0)
    exp = sum(r["amount"] for r in records if r["amount"] < 0)
    text = (f"üìÖ {today}\n"
            f"–ü—Ä–∏—Ö–æ–¥: +{format_amount(inc)}\n"
            f"–†–∞—Å—Ö–æ–¥: {format_amount(exp)}\n"
            f"–û—Å—Ç–∞—Ç–æ–∫ –¥–Ω—è: {format_amount(total)}\n"
            f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {format_amount(store['balance'])}")
    if extra_text:
        text += f"\n\n{extra_text}"

    kb = build_main_keyboard(chat_id)
    msg_id = store.get("active_windows", {}).get("main")
    if msg_id:
        try:
            bot.edit_message_text(text, chat_id, msg_id, reply_markup=kb)
        except:
            m = bot.send_message(chat_id, text, reply_markup=kb)
            store["active_windows"]["main"] = m.message_id
    else:
        m = bot.send_message(chat_id, text, reply_markup=kb)
        store["active_windows"]["main"] = m.message_id
    save_data(data)


# ===========================================
# 5. –†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π –∏ CSV
# ===========================================
def export_to_csv(d):
    with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["chat_id", "record_id", "date", "amount", "type"])
        for sid, store in d["chats"].items():
            for rec in store["records"]:
                writer.writerow([sid, rec["id"], rec["date"], rec["amount"], rec["type"]])
    log_info("CSV –æ–±–Ω–æ–≤–ª—ë–Ω")


def add_record_to_chat(chat_id, amount):
    store = get_chat_store(chat_id)
    rid = store["next_id"]
    date = get_today_key()
    typ = "income" if amount > 0 else "expense"
    rec = {"id": rid, "date": date, "amount": amount, "type": typ}
    store["records"].append(rec)
    store["next_id"] += 1
    store["balance"] += amount
    store.setdefault("daily_records", {}).setdefault(date, []).append(rec)
    save_data(data)
    export_to_csv(data)
    update_or_send_today_window(chat_id, extra_text=f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {format_amount(amount)} ({'+' if amount>0 else ''}{amount})")
    return rid


def delete_record_in_chat(chat_id, rid):
    store = get_chat_store(chat_id)
    records = store.get("records", [])
    for r in records:
        if r["id"] == rid:
            store["balance"] -= r["amount"]
            records.remove(r)
            for daylist in store["daily_records"].values():
                for dr in list(daylist):
                    if dr["id"] == rid:
                        daylist.remove(dr)
            save_data(data)
            export_to_csv(data)
            return True, r
    return False, None


# ===========================================
# 6. –†–∞–∑–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ===========================================
def parse_numbers_from_text(text):
    # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π: –ø—Ä–æ–±–µ–ª, —Ç–æ—á–∫–∞, –∑–∞–ø—è—Ç–∞—è, –∫–∞–≤—ã—á–∫–∏
    text = text.replace("'", "").replace(",", "").replace(" ", "").replace(" ", "")
    lines = text.strip().splitlines()
    results = []
    for line in lines:
        match = re.findall(r"[-+]?\d+(?:[ .]\d+)*", line)
        if not match: continue
        try:
            val = match[0]
            val = float(val.replace(" ", "").replace(".", ""))
            if line.strip().startswith("-"):
                val = -abs(val)
            results.append(val)
        except:
            continue
    return results


# ===========================================
# 7. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# ===========================================
@bot.message_handler(commands=["start"])
def start_cmd(msg):
    chat_id = msg.chat.id
    update_or_send_today_window(chat_id, extra_text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å + –∏–ª–∏ - –¥–ª—è —É—á—ë—Ç–∞.")


@bot.message_handler(content_types=["text"])
def handle_text(msg):
    chat_id = msg.chat.id
    text = msg.text.strip()
    store = get_chat_store(chat_id)

    # 7.1 –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ / –ø–µ—Ä–µ—Å—ã–ª–∫–∞)
    if store.get("edit_wait"):
        handle_edit_or_forward(chat_id, text)
        return

    # 7.2 –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–∞ ‚Äî —ç—Ç–æ –∑–∞–ø–∏—Å—å –ø—Ä–∏—Ö–æ–¥–∞/—Ä–∞—Å—Ö–æ–¥–∞
    nums = parse_numbers_from_text(text)
    if nums:
        for n in nums:
            add_record_to_chat(chat_id, n)
        return

    # 7.3 –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∫–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
    if store.get("forward_target"):
        try:
            bot.send_message(store["forward_target"], text)
        except Exception as e:
            update_or_send_today_window(chat_id, extra_text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
        return

    update_or_send_today_window(chat_id, extra_text="‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.")


# ===========================================
# 8. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π
# ===========================================
def handle_edit_or_forward(chat_id, text):
    store = get_chat_store(chat_id)
    action = store.get("edit_wait")

    # 8.1 –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ ID
    if action == "change_id":
        try:
            rid = int(text.strip())
            for r in store["records"]:
                if r["id"] == rid:
                    store["edit_target"] = rid
                    store["edit_wait"] = "change_value"
                    update_or_send_today_window(chat_id, extra_text=f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ {rid}")
                    return
            update_or_send_today_window(chat_id, extra_text="‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except:
            update_or_send_today_window(chat_id, extra_text="‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        return

    # 8.2 –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É–º–º—ã
    if action == "change_value":
        rid = store.get("edit_target")
        try:
            val = float(text.replace(" ", "").replace(",", "."))
            for r in store["records"]:
                if r["id"] == rid:
                    old = r["amount"]
                    store["balance"] -= old
                    store["balance"] += val
                    r["amount"] = val
                    save_data(data)
                    export_to_csv(data)
                    update_or_send_today_window(chat_id, extra_text=f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–æ: {format_amount(old)} ‚Üí {format_amount(val)}")
                    store["edit_wait"] = None
                    store["edit_target"] = None
                    return
        except:
            update_or_send_today_window(chat_id, extra_text="‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    # 8.3 –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    if action == "delete_id":
        try:
            rid = int(text.strip())
            success, _ = delete_record_in_chat(chat_id, rid)
            if success:
                update_or_send_today_window(chat_id, extra_text=f"‚úÖ –ó–∞–ø–∏—Å—å {rid} —É–¥–∞–ª–µ–Ω–∞.")
            else:
                update_or_send_today_window(chat_id, extra_text="‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ.")
        except:
            update_or_send_today_window(chat_id, extra_text="‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.")
        store["edit_wait"] = None
        return

    # 8.4 –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    if action == "forward_id":
        try:
            target_id = int(text.strip())
            store["forward_target"] = target_id
            update_or_send_today_window(chat_id, extra_text=f"üì§ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –≤ —á–∞—Ç {target_id}.")
        except:
            update_or_send_today_window(chat_id, extra_text="‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID —á–∞—Ç–∞.")
        store["edit_wait"] = None
        return


# ===========================================
# 10. Flask webhook
# ===========================================
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200


@app.route("/", methods=["GET"])
def index():
    return f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª ‚Äî –≤–µ—Ä—Å–∏—è {VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ ‚úÖ", 200


# ===========================================
# 11. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞
# ===========================================
def schedule_daily_window_creation():
    def task():
        last_day = get_today_key()
        while True:
            try:
                time.sleep(60)
                current_day = get_today_key()
                if current_day != last_day:
                    # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–∫–Ω–æ
                    for chat_id_str, store in list(data.get("chats", {}).items()):
                        try:
                            chat_id = int(chat_id_str)
                            old_window = data.get("active_messages", {}).get(last_day, {}).get(chat_id_str)
                            if old_window:
                                bot.send_message(chat_id, f"üì¶ –î–µ–Ω—å {last_day} –∑–∞–≤–µ—Ä—à—ë–Ω. –ê—Ä—Ö–∏–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
                            update_or_send_today_window(chat_id)
                        except Exception as e:
                            log_error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–Ω—è –¥–ª—è {chat_id_str}: {e}")
                    last_day = current_day
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                time.sleep(5)
    thread = threading.Thread(target=task, daemon=True)
    thread.start()


# ===========================================
# 12. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ===========================================
def set_webhook():
    url = f"{APP_URL}/{TOKEN}"
    try:
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url=url)
        log_info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")


if __name__ == "__main__":
    log_info(f"–ë–æ—Ç –§–û –≤–µ—Ä—Å–∏–∏ {VERSION} –∑–∞–ø—É—â–µ–Ω.")
    if OWNER_ID:
        try:
            bot.send_message(int(OWNER_ID), f"üöÄ –ë–æ—Ç –§–û –≤–µ—Ä—Å–∏–∏ {VERSION} –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: {e}")

    set_webhook()
    schedule_daily_window_creation()
    app.run(host="0.0.0.0", port=PORT)




