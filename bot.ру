# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç (–≤–µ—Ä—Å–∏—è 9.6.1.8)
# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã:
#  - –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞–ª–∏ –≤ –æ–¥–Ω–æ–º –æ–∫–Ω–µ,
#  - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ,
#  - –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É.
# ============================================

import os
import json
import csv
import logging
import re
import threading
import time
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from telebot import types
from flask import Flask, request

# -----------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# -----------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
APP_URL = os.getenv("APP_URL", "https://fo-1.onrender.com")
PORT = int(os.environ.get("PORT", 5000))
TZ = ZoneInfo("America/Argentina/Catamarca")

if not TOKEN:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"

logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# -----------------------------
# –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
# -----------------------------
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {
        "chats": {},
        "overall_balance": 0,
        "next_id": 1,
        "active_messages": {},
        "tracked_messages": {},
        "records": []
    }

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

# -----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------
def get_today():
    return datetime.now(TZ).strftime("%Y-%m-%d")

def get_chat(chat_id):
    cid = str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid] = {
            "balance": 0,
            "records": [],
            "daily_records": {}
        }
        save_data()
    return data["chats"][cid]

def set_active_window(chat_id, msg_id):
    today = get_today()
    data["active_messages"].setdefault(today, {})[str(chat_id)] = msg_id
    save_data()

def get_active_window(chat_id):
    today = get_today()
    return data.get("active_messages", {}).get(today, {}).get(str(chat_id))

# -----------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -----------------------------
def build_main_keyboard(chat_id=None):
    kb = types.InlineKeyboardMarkup(row_width=3)
    kb.row(
        types.InlineKeyboardButton("üí∞ –±–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
        types.InlineKeyboardButton("üìä –æ—Ç—á—ë—Ç", callback_data="btn_report"),
        types.InlineKeyboardButton("‚úèÔ∏è –∏–∑–º–µ–Ω–∏—Ç—å", callback_data="btn_edit")
    )
    kb.row(
        types.InlineKeyboardButton("‚öôÔ∏è –æ–±–Ω—É–ª–∏—Ç—å", callback_data="btn_reset"),
        types.InlineKeyboardButton("‚ÑπÔ∏è", callback_data="btn_info")
    )
    bal = 0
    if chat_id:
        bal = get_chat(chat_id)["balance"]
    kb.add(types.InlineKeyboardButton(f"üí∞ {bal} ARS", callback_data="noop"))
    return kb

# -----------------------------
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞
# -----------------------------
def update_window(chat_id):
    today = get_today()
    chat = get_chat(chat_id)
    recs = chat["daily_records"].get(today, [])
    text = f"üìÖ {today}\n"
    if not recs:
        text += "–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
    else:
        for r in recs[-20:]:
            sign = "+" if r["amount"] > 0 else ""
            text += f"{r['id']}: {sign}{r['amount']} ‚Äî {r['note']}\n"
    text += f"\nüí∞ –ë–∞–ª–∞–Ω—Å: {chat['balance']} ARS"
    kb = build_main_keyboard(chat_id)

    mid = get_active_window(chat_id)
    if mid:
        try:
            bot.edit_message_text(text, chat_id, mid, reply_markup=kb)
            return
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    sent = bot.send_message(chat_id, text, reply_markup=kb)
    set_active_window(chat_id, sent.message_id)

# -----------------------------
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
# -----------------------------
def add_record(chat_id, amount, note, owner):
    chat = get_chat(chat_id)
    rid = data["next_id"]
    rec = {
        "id": rid,
        "amount": amount,
        "note": note,
        "timestamp": datetime.now(TZ).isoformat(timespec="seconds"),
        "owner": owner
    }
    chat["records"].append(rec)
    chat["balance"] += amount
    today = get_today()
    chat["daily_records"].setdefault(today, []).append(rec)
    data["next_id"] += 1
    save_data()
    update_window(chat_id)
    return rec

def update_record(chat_id, rid, amount, note):
    chat = get_chat(chat_id)
    for r in chat["records"]:
        if r["id"] == rid:
            diff = amount - r["amount"]
            r["amount"] = amount
            r["note"] = note
            chat["balance"] += diff
            save_data()
            update_window(chat_id)
            return True
    return False

# -----------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
# -----------------------------
@bot.callback_query_handler(func=lambda call: True)
def callbacks(call):
    cid = call.message.chat.id
    mid = call.message.message_id
    data_cd = call.data

    if data_cd == "btn_balance":
        chat = get_chat(cid)
        txt = f"üí∞ –ë–∞–ª–∞–Ω—Å: {chat['balance']} ARS"
        try:
            bot.edit_message_text(txt, cid, mid, reply_markup=build_main_keyboard(cid))
        except:
            bot.send_message(cid, txt, reply_markup=build_main_keyboard(cid))

    elif data_cd == "btn_report":
        today = get_today()
        recs = get_chat(cid)["daily_records"].get(today, [])
        if not recs:
            txt = "üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."
        else:
            txt = "üìä –°–µ–≥–æ–¥–Ω—è:\n" + "\n".join(
                [f"{r['id']}: {r['amount']} ‚Äî {r['note']}" for r in recs[-20:]]
            )
        bot.edit_message_text(txt, cid, mid, reply_markup=build_main_keyboard(cid))

    elif data_cd == "btn_edit":
        chat = get_chat(cid)
        if not chat["records"]:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        kb = types.InlineKeyboardMarkup()
        for r in chat["records"][-10:]:
            kb.add(types.InlineKeyboardButton(f"{r['id']}: {r['note']}", callback_data=f"edit_{r['id']}"))
        kb.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", cid, mid, reply_markup=kb)

    elif data_cd.startswith("edit_"):
        rid = int(data_cd.split("_")[1])
        data["tracked_messages"][str(cid)] = {"action": "edit_wait", "rid": rid}
        save_data()
        bot.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏ {rid}:", cid, mid)

    elif data_cd == "btn_reset":
        data["chats"].pop(str(cid), None)
        save_data()
        bot.edit_message_text("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –æ–±–Ω—É–ª–µ–Ω—ã!", cid, mid)

    elif data_cd == "back_main":
        update_window(cid)

    elif data_cd == "btn_info":
        txt = "üí¨ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç –≤–µ—Ä—Å–∏–∏ 9.6.1.8\n–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ."
        bot.edit_message_text(txt, cid, mid, reply_markup=build_main_keyboard(cid))

    else:
        bot.answer_callback_query(call.id)

# -----------------------------
# –°–æ–æ–±—â–µ–Ω–∏—è
# -----------------------------
@bot.message_handler(func=lambda m: True)
def messages(m):
    cid = m.chat.id
    uid = m.from_user.id
    txt = m.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    state = data.get("tracked_messages", {}).get(str(cid))
    if state and state.get("action") == "edit_wait":
        rid = state["rid"]
        match = re.search(r"([+-]?\d+)", txt)
        if not match:
            bot.reply_to(m, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +200 –∏–ª–∏ -150)")
            return
        amount = int(match.group(1))
        note = txt.replace(match.group(1), "").strip()
        update_record(cid, rid, amount, note)
        data["tracked_messages"].pop(str(cid), None)
        save_data()
        bot.reply_to(m, f"–ó–∞–ø–∏—Å—å {rid} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ")
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    match = re.search(r"([+-]?\d+)", txt)
    if match:
        amount = int(match.group(1))
        note = txt.replace(match.group(1), "").strip()
        add_record(cid, amount, note, m.from_user.first_name)
        bot.reply_to(m, "–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ")
    else:
        bot.reply_to(m, "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, +100 –ø—Ä–æ–¥—É–∫—Ç—ã)")

# -----------------------------
# Flask webhook
# -----------------------------
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.data.decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def home():
    return "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

# -----------------------------
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
# -----------------------------
def set_webhook():
    url = f"{APP_URL}/{TOKEN}"
    try:
        bot.remove_webhook()
        time.sleep(1)
        bot.set_webhook(url=url)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")
        if OWNER_ID:
            bot.send_message(int(OWNER_ID), f"üåê Webhook –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:\n{url}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ webhook: {e}")

# -----------------------------
# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
# -----------------------------
def daily_check():
    last_day = get_today()
    while True:
        time.sleep(60)
        now_day = get_today()
        if now_day != last_day:
            for chat_id in data.get("chats", {}):
                update_window(int(chat_id))
            last_day = now_day

# -----------------------------
# –ó–∞–ø—É—Å–∫
# -----------------------------
if __name__ == "__main__":
    set_webhook()
    threading.Thread(target=daily_check, daemon=True).start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    if OWNER_ID:
        try:
            bot.send_message(int(OWNER_ID), "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")
    app.run(host="0.0.0.0", port=PORT)
