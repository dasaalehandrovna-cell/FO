# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
# ============================================

import os, json, csv, logging, threading, time, re
from datetime import datetime
from zoneinfo import ZoneInfo
import telebot
from flask import Flask, request
from telebot import types

# -----------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID", 0))
APP_URL = os.getenv("APP_URL", "https://fo-1.onrender.com")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.6.1.7"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -----------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[logging.FileHandler(LOG_FILE, encoding="utf-8"), logging.StreamHandler()]
)
def log_info(msg): logging.info(msg)
def log_error(msg): logging.error(msg)
log_info(f"–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–µ—Ä—Å–∏—è {VERSION}")

# -----------------------------
# –î–∞–Ω–Ω—ã–µ
# -----------------------------
def default_data():
    return {"overall_balance":0,"records":[],"chats":{},"active_messages":{},"next_id":1}

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE,"r",encoding="utf-8") as f:
                d=json.load(f)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ data.json: {e}")
            d=default_data()
    else:
        d=default_data()
    base=default_data()
    for k,v in base.items():
        if k not in d:
            d[k]=v
    return d

def save_data(d):
    try:
        with open(DATA_FILE,"w",encoding="utf-8") as f:
            json.dump(d,f,ensure_ascii=False,indent=2)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

data = load_data()

# -----------------------------
# –ß–∞—Ç / –¥–µ–Ω—å
# -----------------------------
def get_today_key(): return datetime.now(TZ).strftime("%Y-%m-%d")
def get_chat_store(chat_id):
    cid=str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid]={"balance":0,"records":[],"next_id":1,"daily_records":{},"active_windows":{},"edit_wait":None,"edit_target":None,"forward_target":None}
        save_data(data)
    return data["chats"][cid]

def get_today_active_window(chat_id):
    today=get_today_key()
    return data.get("active_messages",{}).get(today,{}).get(str(chat_id))

def set_today_active_window(chat_id,message_id):
    today=get_today_key()
    if "active_messages" not in data: data["active_messages"]={}
    if today not in data["active_messages"]: data["active_messages"][today]={}
    data["active_messages"][today][str(chat_id)]=message_id
    save_data(data)

# -----------------------------
# –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø–∏—Å—è–º–∏
# -----------------------------
def add_record_to_chat(chat_id,amount,note,owner):
    store=get_chat_store(chat_id)
    rid=data.get("next_id",1)
    rec={"id":rid,"short_id":f"R{rid}","timestamp":datetime.now(TZ).isoformat(timespec="seconds"),"amount":amount,"note":note,"owner":owner}
    data.setdefault("records",[]).append(rec)
    store.setdefault("records",[]).append(rec)
    day=get_today_key()
    store.setdefault("daily_records",{}).setdefault(day,[]).append(rec)
    store["balance"]=store.get("balance",0)+amount
    data["overall_balance"]=data.get("overall_balance",0)+amount
    data["next_id"]=rid+1
    save_data(data)
    try: export_to_csv(data)
    except: pass
    return rec

def update_record_in_chat(chat_id,rid,new_amount,new_note):
    store=get_chat_store(chat_id)
    found=None
    for r in store.get("records",[]):
        if r["id"]==rid:
            diff=new_amount-r["amount"]
            r["amount"]=new_amount
            r["note"]=new_note
            found=r
            break
    if found:
        for day_recs in store.get("daily_records",{}).values():
            for r in day_recs:
                if r["id"]==rid:
                    r.update(found)
        store["balance"]=sum([x["amount"] for x in store.get("records",[])])
        data["overall_balance"]=sum([x["amount"] for x in data.get("records",[])])
        save_data(data)
        export_to_csv(data)
        return True,found
    return False,None

def delete_record_in_chat(chat_id,rid):
    store=get_chat_store(chat_id)
    removed=None
    for r in list(store.get("records",[])):
        if r["id"]==rid or str(r["id"])==str(rid) or r.get("short_id")==f"R{rid}":
            removed=r
            store["records"].remove(r)
            break
    if removed:
        for day_key,recs in store.get("daily_records",{}).items():
            store["daily_records"][day_key]=[x for x in recs if x["id"]!=rid]
        store["balance"]=sum([x["amount"] for x in store.get("records",[])])
        data["records"]=[x for x in data.get("records",[]) if x["id"]!=rid]
        data["overall_balance"]=sum([x["amount"] for x in data.get("records",[])])
        save_data(data)
        export_to_csv(data)
        return True,removed
    return False,None

def export_to_csv(d):
    try:
        with open(CSV_FILE,"w",newline='',encoding="utf-8") as f:
            writer=csv.writer(f)
            writer.writerow(["chat_id","ID","short_id","timestamp","amount","note","owner","day_key"])
            for cid,cdata in d.get("chats",{}).items():
                for day_key,records in cdata.get("daily_records",{}).items():
                    for r in records:
                        writer.writerow([cid,r.get("id"),r.get("short_id"),r.get("timestamp"),r.get("amount"),r.get("note"),r.get("owner"),day_key])
    except Exception as e: log_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")

# -----------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
# -----------------------------
def build_main_keyboard(chat_id=None, confirm_reset=False):
    kb = types.InlineKeyboardMarkup(row_width=3)
    kb.row(
        types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
        types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report"),
        types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="btn_edit")
    )
    if confirm_reset:
        kb.row(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_reset"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_reset")
        )
    else:
        kb.row(
            types.InlineKeyboardButton("‚öôÔ∏è –û–±–Ω—É–ª–∏—Ç—å", callback_data="btn_reset"),
            types.InlineKeyboardButton("üì§ CSV", callback_data="export_csv"),
            types.InlineKeyboardButton("üì§ –ü–µ—Ä–µ—Å–ª–∞—Ç—å", callback_data="btn_forward")
        )
    kb.row(
        types.InlineKeyboardButton("üöÄ", callback_data="btn_start"),
        types.InlineKeyboardButton("‚ÑπÔ∏è", callback_data="btn_cod")
    )
    balance_text = ""
    if chat_id is not None:
        store = get_chat_store(chat_id)
        balance_text = f"üí∞ {store.get('balance',0)} ARS"
    kb.add(types.InlineKeyboardButton(balance_text or "üí∞ 0 ARS", callback_data="noop"))
    return kb

# -----------------------------
# –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
# -----------------------------
def update_or_send_today_window(chat_id, extra_text=None):
    today_key = get_today_key()
    store = get_chat_store(chat_id)
    day_records = store.get("daily_records", {}).get(today_key, [])

    if not day_records:
        text = f"üìÖ {today_key}\n–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.\nüí∞ –ë–∞–ª–∞–Ω—Å: {store.get('balance',0)} ARS"
    else:
        lines = [f"üìÖ {today_key}", "üìã –û–ø–µ—Ä–∞—Ü–∏–∏:"]
        for r in day_records[-50:]:
            sign = "+" if r["amount"] > 0 else ""
            lines.append(f"{r['short_id']}: {sign}{r['amount']} ‚Äî {r.get('note','')}")
        lines.append(f"\nüí∞ –ë–∞–ª–∞–Ω—Å: {store.get('balance',0)} ARS")
        text = "\n".join(lines)

    if extra_text:
        text = f"{extra_text}\n\n{text}"

    kb = build_main_keyboard(chat_id)
    today_msgs = data.setdefault("active_messages", {}).setdefault(today_key, {})
    active_id = today_msgs.get(str(chat_id))

    if active_id:
        try:
            bot.edit_message_text(text, chat_id, active_id, reply_markup=kb)
        except Exception as e:
            if "message is not modified" not in str(e):
                log_error(f"[update_or_send_today_window] —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
        return

    try:
        sent = bot.send_message(chat_id, text, reply_markup=kb)
        set_today_active_window(chat_id, sent.message_id)
        log_info(f"[update_or_send_today_window] –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}, message_id={sent.message_id}")
    except Exception as e:
        log_error(f"[update_or_send_today_window] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ –¥–ª—è chat {chat_id}: {e}")

# -----------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# -----------------------------
@bot.message_handler(func=lambda m: True)
def handle_message(msg):
    chat_id = msg.chat.id
    text = msg.text
    store = get_chat_store(chat_id)

    # --- –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–ª–∞–¥–µ–ª—å—Ü–µ–º ---
    if chat_id == OWNER_ID and msg.chat.type == "private":
        target_chat_id = store.get("forward_target")
        if target_chat_id:
            try:
                bot.send_message(target_chat_id, text)
            except:
                update_or_send_today_window(chat_id, extra_text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
            store["forward_target"] = None
        update_or_send_today_window(chat_id)
        return

    # --- –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ –ª–∏—á–∫—É –≤–ª–∞–¥–µ–ª—å—Ü–∞ ---
    if chat_id != OWNER_ID and OWNER_ID:
        try:
            bot.send_message(OWNER_ID, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {msg.from_user.first_name} ({chat_id}):\n{text}")
        except:
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É –≤–ª–∞–¥–µ–ª—å—Ü–∞: {chat_id}")

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
    wait_action = store.get("edit_wait")

    if wait_action is None:
        # –ê–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
        lines = text.splitlines()
        any_added = False
        for line in lines:
            clean_line = line.replace(" ","").replace(".","").replace(",","").replace("‚Äô","").replace("‚Äò","")
            if not clean_line: continue
            match = re.match(r"([+-]?\d+)", clean_line)
            if match:
                try:
                    amount = int(match.group(1))
                    note = line[match.end():].strip()
                    add_record_to_chat(chat_id, amount, note, msg.from_user.id)
                    any_added = True
                except:
                    continue
        if any_added:
            update_or_send_today_window(chat_id, extra_text="‚úÖ –ó–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        else:
            update_or_send_today_window(chat_id)
        return

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
    if wait_action == "change_id":
        try:
            rid = int(text.strip())
            store["edit_wait"] = "change_value"
            store["edit_target"] = rid
            update_or_send_today_window(chat_id, extra_text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∏ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ {rid}")
        except:
            update_or_send_today_window(chat_id, extra_text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    elif wait_action == "change_value":
        rid = store.get("edit_target")
        if not rid: store["edit_wait"] = None; return
        parts = text.strip().split(" ",1)
        try:
            amount = int(parts[0])
            note = parts[1] if len(parts)>1 else ""
            success,_ = update_record_in_chat(chat_id,rid,amount,note)
            if success:
                update_or_send_today_window(chat_id, extra_text=f"‚úÖ –ó–∞–ø–∏—Å—å {rid} –∏–∑–º–µ–Ω–µ–Ω–∞")
            else:
                update_or_send_today_window(chat_id, extra_text=f"‚ùå –ó–∞–ø–∏—Å—å {rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except:
            update_or_send_today_window(chat_id, extra_text="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        store["edit_wait"] = None
        store["edit_target"] = None
        return

    elif wait_action == "delete_id":
        try:
            rid = int(text.strip())
            success,_ = delete_record_in_chat(chat_id,rid)
            if success:
                update_or_send_today_window(chat_id, extra_text=f"‚úÖ –ó–∞–ø–∏—Å—å {rid} —É–¥–∞–ª–µ–Ω–∞")
            else:
                update_or_send_today_window(chat_id, extra_text=f"‚ùå –ó–∞–ø–∏—Å—å {rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except:
            update_or_send_today_window(chat_id, extra_text="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        store["edit_wait"] = None
        return

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ target –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    if wait_action == "set_forward_target":
        try:
            target_chat_id = int(text.strip())
            store["forward_target"] = target_chat_id
            store["edit_wait"] = None
            update_or_send_today_window(chat_id, extra_text=f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤–∞—à–µ–π –ª–∏—á–∫–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –≤ —á–∞—Ç {target_chat_id}")
        except:
            update_or_send_today_window(chat_id, extra_text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    if wait_action == "forward_msg_text":
        target_chat_id = store.get("forward_target")
        if not target_chat_id: store["edit_wait"] = None; return
        try:
            bot.send_message(target_chat_id, text)
            update_or_send_today_window(chat_id, extra_text=f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —á–∞—Ç {target_chat_id}")
        except:
            update_or_send_today_window(chat_id, extra_text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        store["edit_wait"] = None
        store["forward_target"] = None
        return

# -----------------------------
# –ö–æ–º–∞–Ω–¥–∞ /start
# -----------------------------
@bot.message_handler(commands=["start"])
def handle_start(msg):
    chat_id = msg.chat.id
    start_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª.\n\n"
        "üí∞ –ë–∞–ª–∞–Ω—Å ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞\n"
        "üìä –û—Ç—á—ë—Ç ‚Äî –ø—Ä–∏—Ö–æ–¥, —Ä–∞—Å—Ö–æ–¥, –∏—Ç–æ–≥ –¥–Ω—è\n"
        "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏\n"
        "‚öôÔ∏è –û–±–Ω—É–ª–∏—Ç—å ‚Äî –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º\n"
        "üì§ CSV ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤ CSV\n"
        "üì§ –ü–µ—Ä–µ—Å–ª–∞—Ç—å ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏\n"
        "üöÄ –°—Ç–∞—Ä—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –æ–∫–Ω—É\n"
        "‚ÑπÔ∏è ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞\n\n"
        "üìå –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —á–∏—Å–ª–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—á—ë—Ç–∞.\n"
        "‚ûï –∏–ª–∏ –±–µ–∑ –∑–Ω–∞–∫–∞ ‚Äî –ø—Ä–∏—Ö–æ–¥, ‚ûñ ‚Äî —Ä–∞—Å—Ö–æ–¥.\n"
        "–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Å—Ä–∞–∑—É."
    )
    update_or_send_today_window(chat_id, extra_text=start_text)

# -----------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
# -----------------------------
@bot.callback_query_handler(func=lambda call: True)
def handle_buttons(call):
    chat_id = call.message.chat.id
    data_id = call.data
    store = get_chat_store(chat_id)

    if data_id == "btn_report":
        today_key = get_today_key()
        day_records = store.get("daily_records", {}).get(today_key, [])
        income = sum(r["amount"] for r in day_records if r["amount"] > 0)
        expense = abs(sum(r["amount"] for r in day_records if r["amount"] < 0))
        total = income - expense
        balance = store.get("balance", 0)
        text = (
            f"üìÖ {today_key}\nüìä –û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å:\n"
            f"‚ûï –ü—Ä–∏—Ö–æ–¥: {income} ARS\n"
            f"‚ûñ –†–∞—Å—Ö–æ–¥: {expense} ARS\n"
            f"üü∞ –ò—Ç–æ–≥ –¥–Ω—è: {total} ARS\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} ARS"
        )
        kb = build_main_keyboard(chat_id)
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=kb)
        return

    elif data_id in ["btn_start", "cancel_reset"]:
        update_or_send_today_window(chat_id)
        return

    elif data_id == "btn_edit":
        kb = types.InlineKeyboardMarkup(row_width=2)
        kb.add(
            types.InlineKeyboardButton("‚úèÔ∏è", callback_data="edit_change"),
            types.InlineKeyboardButton("‚ùå", callback_data="edit_delete"),
        )
        kb.add(types.InlineKeyboardButton("üîô", callback_data="btn_start"))
        update_or_send_today_window(chat_id, extra_text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:")
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=kb)
        return

    elif data_id == "edit_change":
        store["edit_wait"] = "change_id"
        update_or_send_today_window(chat_id, extra_text="–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
        return

    elif data_id == "edit_delete":
        store["edit_wait"] = "delete_id"
        update_or_send_today_window(chat_id, extra_text="–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
        return

    elif data_id == "btn_reset":
        kb = build_main_keyboard(chat_id, confirm_reset=True)
        bot.edit_message_text("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ?", chat_id, call.message.message_id, reply_markup=kb)
        return

    elif data_id == "confirm_reset":
        global data
        data = default_data()
        save_data(data)
        update_or_send_today_window(chat_id, extra_text="‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã")
        return

    elif data_id == "export_csv":
        try:
            export_to_csv(data)
            with open(CSV_FILE, "rb") as f:
                bot.send_document(chat_id, f, caption="üìÑ –í–∞—à CSV-—Ñ–∞–π–ª")
        except:
            update_or_send_today_window(chat_id, extra_text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å CSV.")
        return

    elif data_id == "btn_forward":
        store["edit_wait"] = "set_forward_target"
        update_or_send_today_window(chat_id, extra_text="–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞, –∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤–∞—à–µ–π –ª–∏—á–∫–∏:")
        return

    elif data_id in ["btn_cod","noop"]:
        bot.answer_callback_query(call.id)
        return

# -----------------------------
# Flask webhook
# -----------------------------
@app.route(f"/{TOKEN}",methods=["POST"])
def webhook():
    update=telebot.types.Update.de_json(request.get_data().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK",200

@app.route("/",methods=["GET"])
def index():
    return f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª ‚Äî –≤–µ—Ä—Å–∏—è {VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç",200

# -----------------------------
# Webhook –∏ –∑–∞–ø—É—Å–∫
# -----------------------------
def set_webhook():
    url=f"{APP_URL}/{TOKEN}"
    try:
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url=url)
        log_info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

def schedule_daily_window_creation():
    def task():
        last_day=get_today_key()
        while True:
            try:
                time.sleep(60)
                current_day=get_today_key()
                if current_day!=last_day:
                    for chat_id_str in list(data.get("chats",{}).keys()):
                        try: chat_id=int(chat_id_str)
                        except: continue
                        try: update_or_send_today_window(chat_id)
                        except Exception as e: log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞ –Ω–æ–≤–æ–≥–æ –¥–Ω—è –¥–ª—è {chat_id}: {e}")
                    last_day=current_day
            except Exception as e: log_error(f"–û—à–∏–±–∫–∞ –≤ daily loop: {e}"); time.sleep(5)
    thread=threading.Thread(target=task,daemon=True)
    thread.start()

# -----------------------------
# –ó–∞–ø—É—Å–∫
# -----------------------------
if __name__=="__main__":
    set_webhook()
    schedule_daily_window_creation()
    log_info(f"–ë–æ—Ç –§–û –≤–µ—Ä—Å–∏–∏ {VERSION} –∑–∞–ø—É—â–µ–Ω")
    if OWNER_ID:
        try:
            bot.send_message(int(OWNER_ID),f"–ë–æ—Ç –§–û –≤–µ—Ä—Å–∏–∏ {VERSION} –∑–∞–ø—É—â–µ–Ω")
        except: pass
    app.run(host="0.0.0.0",port=PORT)