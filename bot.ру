import telebot
import threading
import os
import json
from flask import Flask

# üîí –¢–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# üìÅ –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "data.json"

# üßÆ –î–∞–Ω–Ω—ã–µ
balance = 0
records = []

# üë§ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ /start)
OWNER_ID_FILE = "owner_id.txt"


# üîπ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def load_data():
    global balance, records
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            balance = data.get("balance", 0)
            records = data.get("records", [])
    else:
        save_data()


# üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump({"balance": balance, "records": records}, f, ensure_ascii=False, indent=2)


# üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
def save_owner_id(user_id):
    with open(OWNER_ID_FILE, "w") as f:
        f.write(str(user_id))


# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
def get_owner_id():
    if os.path.exists(OWNER_ID_FILE):
        with open(OWNER_ID_FILE, "r") as f:
            return f.read().strip()
    return None


@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ"


@bot.message_handler(commands=['start'])
def start_message(message):
    save_owner_id(message.chat.id)
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–µ–¥—É —Ç–≤–æ–π –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –û—Ç—á—ë—Ç (–§–û).\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "`+1000 —Ö–ª–µ–±` ‚Äî –ø—Ä–∏—Ö–æ–¥\n"
        "`-500 –±–µ–Ω–∑–∏–Ω` ‚Äî —Ä–∞—Å—Ö–æ–¥\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/–±–∞–ª–∞–Ω—Å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫\n"
        "/–æ—Ç—á–µ—Ç ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
        "/—Å–±—Ä–æ—Å ‚Äî –æ–±–Ω—É–ª–∏—Ç—å –æ—Ç—á—ë—Ç",
        parse_mode="Markdown"
    )


@bot.message_handler(commands=['–±–∞–ª–∞–Ω—Å'])
def show_balance(message):
    bot.send_message(message.chat.id, f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}")


@bot.message_handler(commands=['–æ—Ç—á–µ—Ç'])
def show_report(message):
    if not records:
        bot.send_message(message.chat.id, "üìÇ –û—Ç—á—ë—Ç –ø—É—Å—Ç.")
    else:
        text = "\n".join(records)
        bot.send_message(message.chat.id, f"üìò –û—Ç—á—ë—Ç:\n\n{text}\n\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance}")


@bot.message_handler(commands=['—Å–±—Ä–æ—Å'])
def reset_data(message):
    global balance, records
    balance = 0
    records = []
    save_data()
    bot.send_message(message.chat.id, "‚ôªÔ∏è –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å–±—Ä–æ—à–µ–Ω. –ë–∞–ª–∞–Ω—Å: 0")


@bot.message_handler(func=lambda message: True)
def handle_transaction(message):
    global balance
    text = message.text.strip()

    if text.startswith('+') or text.startswith('-'):
        try:
            parts = text.split(' ', 1)
            amount = int(parts[0])
            comment = parts[1] if len(parts) > 1 else ''
            balance += amount
            record = f"{'–ü—Ä–∏—Ö–æ–¥' if amount > 0 else '–†–∞—Å—Ö–æ–¥'} {amount}: {comment}"
            records.append(record)
            save_data()
            bot.send_message(message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {record}\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance}")
        except Exception:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: `+1000 —Ö–ª–µ–±`", parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "üìé –ò—Å–ø–æ–ª—å–∑—É–π `+` –∏–ª–∏ `-` –ø–µ—Ä–µ–¥ —Å—É–º–º–æ–π.", parse_mode="Markdown")


def run_bot():
    load_data()
    owner_id = get_owner_id()
    if owner_id:
        try:
            bot.send_message(owner_id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        except Exception:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ.")
    bot.polling(none_stop=True)


if __name__ == "__main__":
    threading.Thread(target=run_bot).start()
    app.run(host="0.0.0.0", port=10000)
