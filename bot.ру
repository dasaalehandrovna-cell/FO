# ===========================================
# 1. –ò–º–ø–æ—Ä—Ç—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ===========================================
import os, json, time, re, threading
from datetime import datetime
from flask import Flask, request
import telebot
import csv
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.environ.get("BOT_TOKEN")  # —Ç–µ–ø–µ—Ä—å –±–µ—Ä—ë–º –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
APP_URL = "https://yourapp.onrender.com"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "v3.4"

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

OWNER_ID = os.environ.get("OWNER_ID")  # —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
data = {"chats": {}}


# ===========================================
# 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
# ===========================================
def load_data():
    global data
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = {"chats": {}}

def save_data(d):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

load_data()


# ===========================================
# 3. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ===========================================
def get_chat_store(chat_id):
    sid = str(chat_id)
    if sid not in data["chats"]:
        data["chats"][sid] = {
            "balance": 0,
            "records": [],
            "next_id": 1,
            "daily_records": {},
            "active_windows": {},
            "edit_wait": None,
            "edit_target": None,
            "forward_target": None
        }
    return data["chats"][sid]

def get_today_key():
    return datetime.now().strftime("%Y-%m-%d")

def format_amount(v):
    sign = "+" if v > 0 else "‚àí"
    return f"{sign}{abs(v):,}".replace(",", " ")

def log_info(msg): print(f"[INFO] {msg}")
def log_error(msg): print(f"[ERROR] {msg}")


# ===========================================
# 4. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –æ–∫–Ω–∞
# ===========================================
def build_main_keyboard(chat_id, confirm_reset=False):
    kb = types.InlineKeyboardMarkup()
    row1 = [types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
            types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report")]
    row2 = [types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="btn_edit"),
            types.InlineKeyboardButton("‚ôªÔ∏è –û–±–Ω—É–ª–∏—Ç—å", callback_data="btn_reset")]
    row3 = [types.InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="export_csv")]
    row4 = [types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="btn_cod")]
    kb.row(*row1); kb.row(*row2); kb.row(*row3); kb.row(*row4)
    if confirm_reset:
        kb.row(types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_reset"),
               types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_reset"))
    return kb


def update_or_send_today_window(chat_id, extra_text=None):
    store = get_chat_store(chat_id)
    today = get_today_key()
    records = store.get("daily_records", {}).get(today, [])

    total = sum(r["amount"] for r in records)
    inc = sum(r["amount"] for r in records if r["amount"] > 0)
    exp = sum(r["amount"] for r in records if r["amount"] < 0)

    text = (f"üìÖ {today}\n"
            f"–ü—Ä–∏—Ö–æ–¥: {format_amount(inc)}\n"
            f"–†–∞—Å—Ö–æ–¥: {format_amount(exp)}\n"
            f"–û—Å—Ç–∞—Ç–æ–∫ –¥–Ω—è: {format_amount(total)}\n"
            f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {format_amount(store['balance'])}")

    if extra_text:
        text += f"\n\n{extra_text}"

    kb = build_main_keyboard(chat_id)
    msg_id = store.get("active_windows", {}).get("main")

    if msg_id:
        try:
            bot.edit_message_text(text, chat_id, msg_id, reply_markup=kb)
        except:
            m = bot.send_message(chat_id, text, reply_markup=kb)
            store["active_windows"]["main"] = m.message_id
    else:
        m = bot.send_message(chat_id, text, reply_markup=kb)
        store["active_windows"]["main"] = m.message_id

    save_data(data)


# ===========================================
# 5. –†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π –∏ CSV
# ===========================================
def export_to_csv(d):
    with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["chat_id", "record_id", "date", "amount", "type"])
        for sid, store in d["chats"].items():
            for rec in store["records"]:
                writer.writerow([sid, rec["id"], rec["date"], rec["amount"], rec["type"]])
    log_info("CSV –æ–±–Ω–æ–≤–ª—ë–Ω")


def add_record_to_chat(chat_id, amount):
    store = get_chat_store(chat_id)
    rid = store["next_id"]
    date = get_today_key()
    typ = "income" if amount > 0 else "expense"
    rec = {"id": rid, "date": date, "amount": amount, "type": typ}
    store["records"].append(rec)
    store["next_id"] += 1
    store["balance"] += amount
    store.setdefault("daily_records", {}).setdefault(date, []).append(rec)
    save_data(data)
    export_to_csv(data)
    update_or_send_today_window(chat_id, extra_text=f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {format_amount(amount)}")
    return rid


def delete_record_in_chat(chat_id, rid):
    store = get_chat_store(chat_id)
    records = store.get("records", [])
    for r in records:
        if r["id"] == rid:
            store["balance"] -= r["amount"]
            records.remove(r)
            for daylist in store["daily_records"].values():
                for dr in list(daylist):
                    if dr["id"] == rid:
                        daylist.remove(dr)
            save_data(data)
            export_to_csv(data)
            update_or_send_today_window(chat_id, extra_text=f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å {rid} ({format_amount(r['amount'])})")
            return True, r
    return False, None


# ===========================================
# 6. –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
# ===========================================
def parse_numbers_from_text(text):
    text = text.replace("'", "").replace(",", "").replace(" ", " ")
    lines = text.strip().splitlines()
    results = []

    for line in lines:
        match = re.findall(r"[-+]?\d+(?:[ .,']\d+)*", line)
        if not match:
            continue
        raw = match[0].replace(" ", "").replace(",", "").replace(".", "")
        try:
            val = float(raw)
            if line.strip().startswith("+"):
                val = abs(val)
            else:
                val = -abs(val)
            results.append(val)
        except:
            continue
    return results


# ===========================================
# 7. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# ===========================================
@bot.message_handler(commands=["start"])
def start_cmd(msg):
    chat_id = msg.chat.id
    update_or_send_today_window(chat_id, extra_text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å + –∏–ª–∏ - –¥–ª—è —É—á—ë—Ç–∞.")


@bot.message_handler(content_types=["text"])
def handle_text(msg):
    chat_id = msg.chat.id
    text = msg.text.strip()
    store = get_chat_store(chat_id)

    # –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    if text.lower() in ["/—É–¥–∞–ª–∏—Ç—å_–ø–µ—Ä–µ—Å—ã–ª–∫—É", "/delete_forward"]:
        store["forward_target"] = None
        save_data(data)
        update_or_send_today_window(chat_id, extra_text="üîï –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return

    nums = parse_numbers_from_text(text)
    if nums:
        for n in nums:
            add_record_to_chat(chat_id, n)
        return

    if store.get("forward_target"):
        try:
            bot.send_message(store["forward_target"], text)
        except Exception as e:
            update_or_send_today_window(chat_id, extra_text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
        return

    update_or_send_today_window(chat_id, extra_text="‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.")


# ===========================================
# 8. Callback –∫–Ω–æ–ø–∫–∏
# ===========================================
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    store = get_chat_store(chat_id)
    data_id = call.data

    if data_id == "btn_balance":
        update_or_send_today_window(chat_id)
        return
    elif data_id == "btn_report":
        today = get_today_key()
        records = store.get("daily_records", {}).get(today, [])
        if not records:
            update_or_send_today_window(chat_id, extra_text="üì≠ –°–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
            return
        lines = [f"{r['id']}: {format_amount(r['amount'])}" for r in records]
        bot.edit_message_text("üìä –î–≤–∏–∂–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å:\n" + "\n".join(lines),
                              chat_id, call.message.message_id, reply_markup=build_main_keyboard(chat_id))
        return
    elif data_id == "btn_edit":
        today = get_today_key()
        records = store.get("daily_records", {}).get(today, [])
        if not records:
            update_or_send_today_window(chat_id, extra_text="üì≠ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
            return
        kb = types.InlineKeyboardMarkup()
        for r in records:
            kb.row(
                types.InlineKeyboardButton(f"{format_amount(r['amount'])}", callback_data=f"noop"),
                types.InlineKeyboardButton("‚úèÔ∏è", callback_data=f"edit_{r['id']}"),
                types.InlineKeyboardButton("üóëÔ∏è", callback_data=f"del_{r['id']}")
            )
        bot.edit_message_text("‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:", chat_id, call.message.message_id, reply_markup=kb)
        return
    elif data_id == "btn_reset":
        kb = types.InlineKeyboardMarkup()
        kb.row(types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_reset"),
               types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_reset"))
        bot.edit_message_text("‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?", chat_id, call.message.message_id, reply_markup=kb)
        return
    elif data_id == "confirm_reset":
        store["records"].clear()
        store["balance"] = 0
        store["daily_records"].clear()
        save_data(data)
        update_or_send_today_window(chat_id, extra_text="‚ôªÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.")
        return
    elif data_id == "cancel_reset":
        update_or_send_today_window(chat_id, extra_text="–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    elif data_id.startswith("del_"):
        rid = int(data_id.split("_")[1])
        delete_record_in_chat(chat_id, rid)
        return
    elif data_id.startswith("edit_"):
        rid = int(data_id.split("_")[1])
        store["edit_wait"] = "change_value"
        store["edit_target"] = rid
        update_or_send_today_window(chat_id, extra_text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ {rid}:")
        return
    elif data_id == "export_csv":
        export_to_csv(data)
        update_or_send_today_window(chat_id, extra_text="üì§ CSV —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.")
        return
    elif data_id == "btn_cod":
        update_or_send_today_window(chat_id, extra_text=f"–ë–æ—Ç –§–û –≤–µ—Ä—Å–∏—è {VERSION}")
        return
    elif data_id == "noop":
        return


# ===========================================
# 9. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
# ===========================================
def handle_edit_or_forward(chat_id, text):
    store = get_chat_store(chat_id)
    action = store.get("edit_wait")
    if action != "change_value": return

    rid = store.get("edit_target")
    try:
        val = float(text.replace(" ", "").replace(",", "."))
        for r in store["records"]:
            if r["id"] == rid:
                old = r["amount"]
                store["balance"] -= old
                store["balance"] += val
                r["amount"] = val
                save_data(data)
                export_to_csv(data)
                update_or_send_today_window(chat_id, extra_text=f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–æ: {format_amount(old)} ‚Üí {format_amount(val)}")
                store["edit_wait"] = None
                store["edit_target"] = None
                return
    except:
        update_or_send_today_window(chat_id, extra_text="‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return


# ===========================================
# 10. Flask webhook
# ===========================================
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª ‚Äî –≤–µ—Ä—Å–∏—è {VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ", 200


# ===========================================
# 11. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞
# ===========================================
def schedule_daily_window_creation():
    def task():
        last_day = get_today_key()
        while True:
            try:
                time.sleep(60)
                current_day = get_today_key()
                if current_day != last_day:
                    for chat_id_str, store in list(data.get("chats", {}).items()):
                        try:
                            chat_id = int(chat_id_str)
                            update_or_send_today_window(chat_id)
                        except Exception as e:
                            log_error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–Ω—è –¥–ª—è {chat_id_str}: {e}")
                    last_day = current_day
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                time.sleep(5)
    thread = threading.Thread(target=task, daemon=True)
    thread.start()


# ===========================================
# 12. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ===========================================
def set_webhook():
    url = f"{APP_URL}/{TOKEN}"
    try:
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url=url)
        log_info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")


if __name__ == "__main__":
    log_info(f"–ë–æ—Ç –§–û –≤–µ—Ä—Å–∏–∏ {VERSION} –∑–∞–ø—É—â–µ–Ω.")
    set_webhook()
    schedule_daily_window_creation()
    app.run(host="0.0.0.0", port=PORT)