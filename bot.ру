import os
import json
import csv
import logging
import threading
import time
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
APP_URL = os.getenv("APP_URL", "https://yourapp.onrender.com")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.8.3"

if not TOKEN:
    raise ValueError("BOT_TOKEN не установлен!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[logging.FileHandler(LOG_FILE, encoding="utf-8"), logging.StreamHandler()]
)

def log_info(msg):
    logging.info(msg)
def log_error(msg):
    logging.error(msg)

log_info(f"Старт приложения. Версия {VERSION}")

# -----------------------------
# Структура данных и IO
# -----------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "chats": {},
        "active_messages": {},
        "processed_messages": [],
        "forward_targets": [],
        "tracked_messages": {},
        "next_id": 1
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except:
            d = default_data()
    else:
        d = default_data()
    base = default_data()
    for k, v in base.items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"Ошибка сохранения data.json: {e}")

data = load_data()

if OWNER_ID:
    try:
        oi = int(OWNER_ID)
        if oi not in data.get("forward_targets", []):
            data["forward_targets"].append(oi)
            save_data(data)
    except Exception:
        pass
# -----------------------------
# Вспомогательные
# -----------------------------
def get_today_key():
    return datetime.now(TZ).strftime("%Y-%m-%d")

def get_chat_store(chat_id):
    cid = str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid] = {
            "balance": 0,
            "records": [],
            "next_id": 1,
            "daily_records": {},
            "active_windows": {},
            "edit_wait": None,
            "edit_target": None,
            "forward_enabled": False
        }
        save_data(data)
    return data["chats"][cid]

def set_today_active_window(chat_id, message_id):
    today = get_today_key()
    if "active_messages" not in data:
        data["active_messages"] = {}
    if today not in data["active_messages"]:
        data["active_messages"][today] = {}
    data["active_messages"][today][str(chat_id)] = message_id
    save_data(data)

# -----------------------------
# Работа с записями
# -----------------------------
def add_record_to_chat(chat_id, amount, note, owner):
    store = get_chat_store(chat_id)
    rid = data.get("next_id", 1)
    rec = {"id": rid, "short_id": f"R{rid}", "timestamp": datetime.now(TZ).isoformat(timespec="seconds"), "amount": amount, "note": note, "owner": owner}
    data.setdefault("records", []).append(rec)
    store.setdefault("records", []).append(rec)
    day = get_today_key()
    store.setdefault("daily_records", {}).setdefault(day, []).append(rec)
    store["balance"] = store.get("balance", 0) + amount
    data["overall_balance"] = data.get("overall_balance", 0) + amount
    data["next_id"] = rid + 1
    save_data(data)
    export_to_csv(data)

    if store.get("forward_enabled") and OWNER_ID:
        try:
            bot.send_message(int(OWNER_ID), f"Пересылка из чата {chat_id}: {rec['short_id']} {rec['amount']} — {rec['note']}")
        except Exception as e:
            log_error(f"Ошибка пересылки записи: {e}")

    return rec

def update_record_in_chat(chat_id, rid, new_amount, new_note, user=None):
    store = get_chat_store(chat_id)
    found = None
    for r in store.get("records", []):
        if r["id"] == rid:
            r["amount"] = new_amount
            r["note"] = new_note
            found = r
            break
    if found:
        for day_recs in store.get("daily_records", {}).values():
            for r in day_recs:
                if r["id"] == rid:
                    r.update(found)
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data(data)
        export_to_csv(data)
        return True, found
    return False, None

def delete_record_in_chat(chat_id, rid, user=None):
    store = get_chat_store(chat_id)
    removed = None
    for r in list(store.get("records", [])):
        if r["id"] == rid or str(r["id"]) == str(rid) or r.get("short_id") == f"R{rid}":
            removed = r
            store["records"].remove(r)
            break
    if removed:
        for day_key, recs in store.get("daily_records", {}).items():
            store["daily_records"][day_key] = [x for x in recs if x["id"] != rid]
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        data["records"] = [x for x in data.get("records", []) if x["id"] != rid]
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data(data)
        export_to_csv(data)
        return True, removed
    return False, None

def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["chat_id","ID","short_id","timestamp","amount","note","owner","day_key"])
            for cid, cdata in d.get("chats", {}).items():
                for day_key, records in cdata.get("daily_records", {}).items():
                    for r in records:
                        writer.writerow([cid, r.get("id"), r.get("short_id"), r.get("timestamp"), r.get("amount"), r.get("note"), r.get("owner"), day_key])
    except Exception as e:
        log_error(f"Ошибка экспорта CSV: {e}")
# -----------------------------
# Клавиатуры
# -----------------------------
def build_main_keyboard(chat_id=None, confirm_reset=False):
    kb = types.InlineKeyboardMarkup(row_width=3)
    kb.row(
        types.InlineKeyboardButton("💰 Баланс", callback_data="btn_balance"),
        types.InlineKeyboardButton("📊 Отчёт", callback_data="btn_report"),
        types.InlineKeyboardButton("📂 CSV", callback_data="btn_csv")
    )
    kb.row(types.InlineKeyboardButton("✏️ Редактировать", callback_data="btn_edit_list"))
    kb.row(types.InlineKeyboardButton("📨 Форвард", callback_data="btn_toggle_forward"))
    if confirm_reset:
        kb.row(
            types.InlineKeyboardButton("✅ Да", callback_data="confirm_reset"),
            types.InlineKeyboardButton("❌ Нет", callback_data="cancel_reset")
        )
    balance_text = ""
    if chat_id is not None:
        store = get_chat_store(chat_id)
        balance_text = f"💰 {store.get('balance', 0)} ARS"
    kb.add(types.InlineKeyboardButton(balance_text or "💰 0 ARS", callback_data="noop"))
    return kb

def build_edit_keyboard_for_record(rid):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.row(
        types.InlineKeyboardButton("+10", callback_data=f"preset_add_{rid}_10"),
        types.InlineKeyboardButton("-10", callback_data=f"preset_add_{rid}_-10")
    )
    kb.row(
        types.InlineKeyboardButton("+100", callback_data=f"preset_add_{rid}_100"),
        types.InlineKeyboardButton("-100", callback_data=f"preset_add_{rid}_-100")
    )
    kb.row(
        types.InlineKeyboardButton("+500", callback_data=f"preset_add_{rid}_500"),
        types.InlineKeyboardButton("-500", callback_data=f"preset_add_{rid}_-500")
    )
    kb.add(types.InlineKeyboardButton("✏ Ввести вручную", callback_data=f"edit_manual_{rid}"))
    kb.add(types.InlineKeyboardButton("🗑 Удалить", callback_data=f"edit_delete_{rid}"))
    kb.add(types.InlineKeyboardButton("🔄 Обнулить", callback_data="btn_reset"))
    kb.add(types.InlineKeyboardButton("🔙 Назад", callback_data="edit_back_to_list"))
    return kb

def build_confirm_delete_keyboard(rid):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.row(types.InlineKeyboardButton("✅ Да, удалить", callback_data=f"confirm_delete_{rid}"),
           types.InlineKeyboardButton("❌ Отмена", callback_data="cancel_delete"))
    return kb

# -----------------------------
# Обновление/создание окна
# -----------------------------
def update_or_send_today_window(chat_id, create_if_missing=True):
    today_key = get_today_key()
    store = get_chat_store(chat_id)
    day_records = store.get("daily_records", {}).get(today_key, [])

    daily_income = sum(r["amount"] for r in day_records if r["amount"] > 0)
    daily_expense = sum(r["amount"] for r in day_records if r["amount"] < 0)
    overall_balance = store.get("balance", 0)

    if not day_records:
        text = (
            f"📅 {today_key}\n"
            f"Пока нет операций.\n"
            f"💵 Приход: {daily_income} ARS\n"
            f"💸 Расход: {abs(daily_expense)} ARS\n"
            f"💰 Общий остаток: {overall_balance} ARS"
        )
    else:
        lines = [f"📅 {today_key}", "📋 Операции:"]
        for r in day_records[-50:]:
            sign = "+" if r["amount"] > 0 else "-"
            lines.append(f"{r['short_id']}: {sign}{abs(r['amount'])} — {r.get('note','')}")
        lines.append(
            f"\n💵 Приход: {daily_income} ARS\n"
            f"💸 Расход: {abs(daily_expense)} ARS\n"
            f"💰 Общий остаток: {overall_balance} ARS"
        )
        text = "\n".join(lines)

    kb = build_main_keyboard(chat_id)
    today_msgs = data.setdefault("active_messages", {}).setdefault(get_today_key(), {})
    active_id = today_msgs.get(str(chat_id))

    if active_id:
        try:
            bot.edit_message_text(text, chat_id, active_id, reply_markup=kb)
        except telebot.apihelper.ApiException as e:
            log_error(f"Не удалось редактировать окно {active_id} для чата {chat_id}: {e}")
        return

    if not create_if_missing:
        return

    try:
        sent = bot.send_message(chat_id, text, reply_markup=kb)
        set_today_active_window(chat_id, sent.message_id)
    except Exception as e:
        log_error(f"Ошибка при создании нового окна для {chat_id}: {e}")
# -----------------------------
# Callback обработчик
# -----------------------------
@bot.callback_query_handler(func=lambda c: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    store = get_chat_store(chat_id)
    today_key = get_today_key()
    day_records = store.get("daily_records", {}).get(today_key, [])
    today_msgs = data.setdefault("active_messages", {}).setdefault(today_key, {})
    active_id = today_msgs.get(str(chat_id))

    # Баланс
    if call.data == "btn_balance":
        daily_income = sum(r["amount"] for r in day_records if r["amount"] > 0)
        daily_expense = sum(r["amount"] for r in day_records if r["amount"] < 0)
        overall_balance = store.get("balance", 0)
        text = (
            f"📅 {today_key}\n\n"
            f"💰 Общий остаток: {overall_balance} ARS\n"
            f"💵 Приход за сегодня: {daily_income} ARS\n"
            f"💸 Расход за сегодня: {abs(daily_expense)} ARS"
        )
        if active_id:
            try:
                bot.edit_message_text(text, chat_id, active_id, reply_markup=build_main_keyboard(chat_id))
            except telebot.apihelper.ApiException as e:
                log_error(f"Ошибка редактирования окна (Баланс): {e}")
        else:
            update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "Баланс обновлён ✅")
        return

    # Toggle forward
    if call.data == "btn_toggle_forward":
        store["forward_enabled"] = not store.get("forward_enabled", False)
        save_data(data)
        update_or_send_today_window(chat_id)
        return

    # Редактировать список записей
    if call.data == "btn_edit_list":
        if not day_records:
            text = f"📅 {today_key}\nПока нет операций за сегодня."
            if active_id:
                try:
                    bot.edit_message_text(text, chat_id, active_id, reply_markup=build_main_keyboard(chat_id))
                except:
                    pass
            else:
                update_or_send_today_window(chat_id)
            bot.answer_callback_query(call.id, "Нет записей для редактирования")
            return

        lines = [f"📅 {today_key}", "Выберите запись для редактирования:"]
        kb = types.InlineKeyboardMarkup(row_width=1)
        for r in reversed(day_records[-20:]):
            sign = "+" if r["amount"] > 0 else "-"
            label = f"{r['short_id']}: {sign}{abs(r['amount'])} — {r.get('note','')}"
            kb.add(types.InlineKeyboardButton(label, callback_data=f"rec_{r['id']}"))
        kb.add(types.InlineKeyboardButton("🔙 Назад", callback_data="back_to_main"))
        text = "\n".join(lines)
        if active_id:
            try:
                bot.edit_message_text(text, chat_id, active_id, reply_markup=kb)
            except:
                pass
        else:
            sent = bot.send_message(chat_id, text, reply_markup=kb)
            set_today_active_window(chat_id, sent.message_id)
        bot.answer_callback_query(call.id)
        return

    # Выбор записи и редактирование (подробно)
    if call.data.startswith("rec_"):
        rid = int(call.data.split("_")[1])
        rec = next((r for r in day_records if r["id"] == rid), None)
        if not rec:
            bot.answer_callback_query(call.id, "Запись не найдена")
            return
        sign = "+" if rec["amount"] > 0 else "-"
        text = f"Запись {rec['short_id']}\n{sign}{abs(rec['amount'])} — {rec.get('note','')}\nДобавлена: {rec.get('timestamp')}"
        kb = build_edit_keyboard_for_record(rid)
        if active_id:
            try:
                bot.edit_message_text(text, chat_id, active_id, reply_markup=kb)
            except:
                pass
        else:
            sent = bot.send_message(chat_id, text, reply_markup=kb)
            set_today_active_window(chat_id, sent.message_id)
        bot.answer_callback_query(call.id)
        return

    # Обнуление из подменю редактирования
    if call.data == "btn_reset":
        store["records"] = []
        store["daily_records"] = {}
        store["balance"] = 0
        data["records"] = [x for x in data.get("records", []) if x.get("owner") != chat_id]
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data(data)
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "Данные сброшены 🧹")
        return

    if call.data in ("back_to_main", "edit_back_to_list"):
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id)
        return

    bot.answer_callback_query(call.id)
    return

# -----------------------------
# Запуск Flask webhook и планировщик
# -----------------------------
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return f"Финансовый бот «ФО» — версия {VERSION} работает", 200

def set_webhook():
    url = f"{APP_URL}/{TOKEN}"
    try:
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url=url)
        log_info(f"Webhook установлен: {url}")
    except Exception as e:
        log_error(f"Не удалось установить webhook: {e}")

def schedule_daily_window_creation():
    def task():
        last_day = get_today_key()
        while True:
            try:
                time.sleep(60)
                current_day = get_today_key()
                if current_day != last_day:
                    for chat_id_str in list(data.get("chats", {}).keys()):
                        try:
                            chat_id = int(chat_id_str)
                        except:
                            continue
                        try:
                            update_or_send_today_window(chat_id)
                        except:
                            pass
                    last_day = current_day
            except:
                time.sleep(5)
    thread = threading.Thread(target=task, daemon=True)
    thread.start()

if __name__ == "__main__":
    set_webhook()
    schedule_daily_window_creation()
    log_info("Бот запущен ✅")
    app.run(host="0.0.0.0", port=PORT)