# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.9.2
# –î–æ–±–∞–≤–ª–µ–Ω–æ: Keep-Alive —Å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –ø–∏–Ω–≥–∞
# ============================================

import os
import json
import csv
import telebot
from telebot import types
from datetime import datetime
import threading
import time
from flask import Flask

TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"
OWNER_ID = –í–ê–®_CHAT_ID  # —Å—é–¥–∞ —Å—Ç–∞–≤–∏–º —Å–≤–æ–π Telegram ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot = telebot.TeleBot(TOKEN)

DATA_FILE = "data.json"
CSV_FILE = "records.csv"

# -----------------------------
# –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
# -----------------------------
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
else:
    data = {"records": []}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["user_id","amount","note","date"])
        for r in data["records"]:
            writer.writerow([r["owner"], r["amount"], r["note"], r["date"]])

def get_user_records(chat_id):
    return [r for r in data["records"] if r["owner"] == chat_id]

# -----------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -----------------------------
def build_main_keyboard():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.row(
        types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
        types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="report")
    )
    kb.row(
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add"),
        types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_menu")
    )
    kb.row(
        types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="delete_menu"),
        types.InlineKeyboardButton("üóëÔ∏è –û–±–Ω—É–ª–∏—Ç—å", callback_data="reset_confirm")
    )
    kb.row(types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="info"))
    return kb

# -----------------------------
# –ö–æ–º–∞–Ω–¥—ã
# -----------------------------
@bot.message_handler(commands=["start"])
def cmd_start(msg):
    bot.send_message(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_main_keyboard())

# -----------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback
# -----------------------------
@bot.callback_query_handler(func=lambda c: True)
def cb_handler(call):
    cid = call.message.chat.id
    user_records = get_user_records(cid)

    if call.data == "balance":
        total = sum(r["amount"] for r in user_records)
        bot.edit_message_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {total}", cid, call.message.message_id, reply_markup=build_main_keyboard())

    elif call.data == "report":
        if not user_records:
            text = "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç—á—ë—Ç–∞."
        else:
            text = "üìä –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n"
            for r in user_records:
                text += f'{r["date"]}: {r["amount"]} ‚Äî {r["note"]}\n'
        bot.edit_message_text(text, cid, call.message.message_id, reply_markup=build_main_keyboard())

    elif call.data == "add":
        msg = bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∑–∞–º–µ—Ç–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n100 –ü—Ä–æ–¥—É–∫—Ç—ã")
        bot.register_next_step_handler(msg, add_record)

    elif call.data == "edit_menu":
        if not user_records:
            bot.edit_message_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", cid, call.message.message_id, reply_markup=build_main_keyboard())
            return
        kb = types.InlineKeyboardMarkup()
        for i, r in enumerate(user_records):
            kb.row(types.InlineKeyboardButton(f'{r["date"]}: {r["amount"]} ‚Äî {r["note"]}', callback_data=f'edit_{i}'))
        kb.row(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", cid, call.message.message_id, reply_markup=kb)

    elif call.data.startswith("edit_"):
        index = int(call.data.split("_")[1])
        record = user_records[index]
        msg = bot.send_message(cid, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∏ –∑–∞–º–µ—Ç–∫—É –¥–ª—è {record['date']}:")
        bot.register_next_step_handler(msg, lambda m, rec=record: edit_record_step2(m, rec))

    elif call.data == "delete_menu":
        if not user_records:
            bot.edit_message_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", cid, call.message.message_id, reply_markup=build_main_keyboard())
            return
        kb = types.InlineKeyboardMarkup()
        for i, r in enumerate(user_records):
            kb.row(types.InlineKeyboardButton(f'{r["date"]}: {r["amount"]} ‚Äî {r["note"]}', callback_data=f'del_{i}'))
        kb.row(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", cid, call.message.message_id, reply_markup=kb)

    elif call.data.startswith("del_"):
        index = int(call.data.split("_")[1])
        record = user_records[index]
        data["records"].remove(record)
        save_data()
        bot.edit_message_text("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.", cid, call.message.message_id, reply_markup=build_main_keyboard())

    elif call.data == "reset_confirm":
        kb = types.InlineKeyboardMarkup()
        kb.row(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="reset_yes"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="back")
        )
        bot.edit_message_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏?", cid, call.message.message_id, reply_markup=kb)

    elif call.data == "reset_yes":
        data["records"] = [r for r in data["records"] if r["owner"] != cid]
        save_data()
        bot.edit_message_text("‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã.", cid, call.message.message_id, reply_markup=build_main_keyboard())

    elif call.data == "back":
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", cid, call.message.message_id, reply_markup=build_main_keyboard())

    elif call.data == "info":
        bot.edit_message_text("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.9.2\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", cid, call.message.message_id, reply_markup=build_main_keyboard())

# -----------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# -----------------------------
def add_record(msg):
    cid = msg.chat.id
    parts = msg.text.strip().split(" ", 1)
    try:
        amount = float(parts[0])
        note = parts[1] if len(parts) > 1 else ""
    except:
        bot.send_message(cid, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: —Å—É–º–º–∞ –∑–∞–º–µ—Ç–∫–∞")
        return
    record = {"owner": cid, "amount": amount, "note": note, "date": datetime.now().strftime("%Y-%m-%d")}
    data["records"].append(record)
    save_data()
    bot.send_message(cid, "‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=build_main_keyboard())

def edit_record_step2(msg, record):
    cid = msg.chat.id
    parts = msg.text.strip().split(" ", 1)
    try:
        amount = float(parts[0])
        note = parts[1] if len(parts) > 1 else ""
    except:
        bot.send_message(cid, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: —Å—É–º–º–∞ –∑–∞–º–µ—Ç–∫–∞")
        return
    record["amount"] = amount
    record["note"] = note
    save_data()
    bot.send_message(cid, "‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=build_main_keyboard())

# -----------------------------
# Keep-Alive —á–µ—Ä–µ–∑ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
# -----------------------------
app = Flask("")

@app.route("/")
def home():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"

def run_web():
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))

threading.Thread(target=run_web, daemon=True).start()

# -----------------------------
# Keep-Alive —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
# -----------------------------
def keep_alive_notify():
    while True:
        try:
            bot.send_message(OWNER_ID, "üí° –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        except:
            pass
        time.sleep(100)  # –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç

threading.Thread(target=keep_alive_notify, daemon=True).start()

# -----------------------------
# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
# -----------------------------
bot.send_message(OWNER_ID, "‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω!")

# -----------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -----------------------------
bot.infinity_polling()