# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.8.6
# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è (–æ–¥–∏–Ω —Ñ–∞–π–ª) —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –æ–∫–Ω–æ–º, CSV, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏
# ID: Code_011
# ============================================

# -----------------------------
# –û–¢–°–ï–ö 1 ‚Äî –ò–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------------
import os
import json
import csv
import logging
import re
import threading
import time
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
APP_URL = os.getenv("APP_URL", "https://yourapp.onrender.com")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.8.6"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -----------------------------
# –û–¢–°–ï–ö 2 ‚Äî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[logging.FileHandler(LOG_FILE, encoding="utf-8"), logging.StreamHandler()]
)

def log_info(msg):
    logging.info(msg)

def log_error(msg):
    logging.error(msg)

log_info(f"–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–µ—Ä—Å–∏—è {VERSION}")

# -----------------------------
# –û–¢–°–ï–ö 3 ‚Äî –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ IO
# -----------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "chats": {},
        "active_messages": {},
        "next_id": 1
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {DATA_FILE}: {e}")
            d = default_data()
    else:
        d = default_data()
    base = default_data()
    for k, v in base.items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

data = load_data()

# -----------------------------
# –û–¢–°–ï–ö 3.1 ‚Äî OWNER_ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# -----------------------------
if OWNER_ID:
    try:
        oi = int(OWNER_ID)
        if oi not in data.get("forward_targets", []):
            data.setdefault("forward_targets", []).append(oi)
            save_data(data)
    except Exception as e:
        log_error(f"OWNER_ID –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω: {e}")

# -----------------------------
# –û–¢–°–ï–ö 4 ‚Äî –ß–∞—Ç/–¥–∞—Ç–∞ (—Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
# -----------------------------
def get_today_key():
    return datetime.now(TZ).strftime("%Y-%m-%d")

def get_chat_store(chat_id):
    cid = str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid] = {
            "balance": 0,
            "records": [],
            "next_id": 1,
            "daily_records": {},
            "edit_wait": None,       # None | "change_value" | "delete_id"
            "edit_target": None,     # target record id for edit/delete
            "awaiting_reset_confirm": False,
            "delete_confirm": None
        }
        save_data(data)
    return data["chats"][cid]

def get_today_active_window(chat_id):
    today = get_today_key()
    return data.setdefault("active_messages", {}).get(today, {}).get(str(chat_id))

def set_today_active_window(chat_id, message_id):
    today = get_today_key()
    data.setdefault("active_messages", {}).setdefault(today, {})[str(chat_id)] = message_id
    save_data(data)

# -----------------------------
# –û–¢–°–ï–ö 5 ‚Äî –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø–∏—Å—è–º–∏
# -----------------------------
def add_record_to_chat(chat_id, amount, note, owner):
    store = get_chat_store(chat_id)
    rid = data.get("next_id", 1)
    rec = {
        "id": rid,
        "short_id": f"R{rid}",
        "timestamp": datetime.now(TZ).isoformat(timespec="seconds"),
        "amount": amount,
        "note": note,
        "owner": owner,
        "deleted": False
    }
    data.setdefault("records", []).append(rec)
    store.setdefault("records", []).append(rec)
    day = get_today_key()
    store.setdefault("daily_records", {}).setdefault(day, []).append(rec)
    store["balance"] = sum(r["amount"] for r in store.get("records", []) if not r.get("deleted", False))
    data["overall_balance"] = sum(r["amount"] for r in data.get("records", []) if not r.get("deleted", False))
    data["next_id"] = rid + 1
    save_data(data)
    try:
        export_to_csv(data)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV: {e}")
    return rec

def update_record_in_chat(chat_id, rid, new_amount, new_note):
    store = get_chat_store(chat_id)
    found = None
    for r in store.get("records", []):
        if r["id"] == rid:
            r["amount"] = new_amount
            r["note"] = new_note
            r["deleted"] = False
            found = r
            break
    if found:
        for day_recs in store.get("daily_records", {}).values():
            for r in day_recs:
                if r["id"] == rid:
                    r.update(found)
        store["balance"] = sum(x["amount"] for x in store.get("records", []) if not x.get("deleted", False))
        data["overall_balance"] = sum(x["amount"] for x in data.get("records", []) if not x.get("deleted", False))
        save_data(data)
        try:
            export_to_csv(data)
        except:
            pass
        return True, found
    return False, None

def mark_deleted_record(chat_id, rid):
    store = get_chat_store(chat_id)
    removed = None
    for r in store.get("records", []):
        if r["id"] == rid:
            r["deleted"] = True
            r["note"] = r.get("note", "")
            removed = r
            break
    if removed:
        for day_recs in store.get("daily_records", {}).values():
            for r in day_recs:
                if r["id"] == rid:
                    r["deleted"] = True
        store["balance"] = sum(x["amount"] for x in store.get("records", []) if not x.get("deleted", False))
        data["overall_balance"] = sum(x["amount"] for x in data.get("records", []) if not x.get("deleted", False))
        save_data(data)
        try:
            export_to_csv(data)
        except:
            pass
        return True, removed
    return False, None

def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["chat_id","ID","short_id","timestamp","amount","note","owner","day_key","deleted"])
            for cid, cdata in d.get("chats", {}).items():
                for day_key, records in cdata.get("daily_records", {}).items():
                    for r in records:
                        writer.writerow([cid, r.get("id"), r.get("short_id"), r.get("timestamp"), r.get("amount"), r.get("note"), r.get("owner"), day_key, r.get("deleted", False)])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")

# -----------------------------
# –û–¢–°–ï–ö 6 ‚Äî –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -----------------------------
def build_main_keyboard(chat_id=None, confirm_reset=False, replace_update_with_edit=True):
    kb = types.InlineKeyboardMarkup(row_width=3)
    kb.row(
        types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
        types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report"),
        types.InlineKeyboardButton("üìÇ CSV", callback_data="btn_csv")
    )
    if confirm_reset:
        kb.row(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_reset"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_reset")
        )
    else:
        kb.row(types.InlineKeyboardButton("‚öôÔ∏è –û–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="btn_reset"))
    if replace_update_with_edit:
        kb.row(
            types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="btn_edit_mode"),
            types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="btn_cod")
        )
    else:
        kb.row(
            types.InlineKeyboardButton("üöÄ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="btn_start"),
            types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="btn_cod")
        )
    balance_text = ""
    if chat_id is not None:
        store = get_chat_store(chat_id)
        balance_text = f"üí∞ {store.get('balance', 0)} ARS"
    kb.add(types.InlineKeyboardButton(balance_text or "üí∞ 0 ARS", callback_data="noop"))
    return kb

# -----------------------------
# –û–¢–°–ï–ö 7 ‚Äî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —Å–ø–∏—Å–æ–∫)
# -----------------------------
def update_or_send_today_window(chat_id, create_if_missing=True, show_info=False, edit_mode=False):
    today_key = get_today_key()
    store = get_chat_store(chat_id)
    day_records = store.get("daily_records", {}).get(today_key, [])

    if show_info:
        text = (
            f"‚ÑπÔ∏è –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è {VERSION}\n\n"
            "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start ‚Äî —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –æ–∫–Ω–æ\n"
            "/balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫\n"
            "/report ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å\n"
            "/csv ‚Äî —Å–∫–∞—á–∞—Ç—å CSV\n"
            "/reset ‚Äî –æ–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)\n"
            "/update ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –æ–∫–Ω–æ\n"
            "/info ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –æ–∫–Ω–æ\n\n"
            "üìù –ü—Ä–∏–º–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n"
            "+500 –ó–∞—Ä–ø–ª–∞—Ç–∞\n"
            "-150 –û–±–µ–¥\n"
            "200 –¢–∞–∫—Å–∏  (–±–µ–∑ –∑–Ω–∞–∫–∞ = —Ä–∞—Å—Ö–æ–¥)\n\n"
            "‚úèÔ∏è –ù–∞–∂–º–∏—Ç–µ ¬´–ò–∑–º–µ–Ω–∏—Ç—å¬ª —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å—è–º–∏ (–ò–∑–º–µ–Ω–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å)."
        )
        kb = build_main_keyboard(chat_id, replace_update_with_edit=True)
    else:
        daily_income = sum(r["amount"] for r in day_records if r["amount"] > 0 and not r.get("deleted", False))
        daily_expense = sum(r["amount"] for r in day_records if r["amount"] < 0 and not r.get("deleted", False))
        overall_balance = store.get("balance", 0)

        if not day_records:
            text = (
                f"üìÖ {today_key}\n–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.\n"
                f"üíµ –ü—Ä–∏—Ö–æ–¥: {daily_income} ARS\n"
                f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(daily_expense)} ARS\n"
                f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS"
            )
            kb = build_main_keyboard(chat_id, replace_update_with_edit=True)
        else:
            lines = [f"üìÖ {today_key}", "üìã –û–ø–µ—Ä–∞—Ü–∏–∏:"]
            kb = types.InlineKeyboardMarkup()
            # –µ—Å–ª–∏ edit_mode=True ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ò–∑–º–µ–Ω–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
            for r in day_records[-50:]:
                if r.get("deleted", False):
                    lines.append(f"{r['short_id']}: ‚ùå –£–¥–∞–ª–µ–Ω–æ ‚Äî {r.get('note','')}")
                else:
                    sign = "+" if r["amount"] > 0 else "-"
                    lines.append(f"{r['short_id']}: {sign}{abs(r['amount'])} ‚Äî {r.get('note','')}")
                    if edit_mode:
                        kb.row(
                            types.InlineKeyboardButton(f"‚úè {r['short_id']}", callback_data=f"edit_{r['id']}"),
                            types.InlineKeyboardButton(f"üóë {r['short_id']}", callback_data=f"delete_{r['id']}")
                        )
            lines.append(
                f"\nüíµ –ü—Ä–∏—Ö–æ–¥: {daily_income} ARS\n"
                f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(daily_expense)} ARS\n"
                f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS"
            )
            # bottom row: –û–±–Ω—É–ª–∏—Ç—å –∏ –ù–∞–∑–∞–¥ (–≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            if edit_mode:
                kb.row(
                    types.InlineKeyboardButton("‚öôÔ∏è –û–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="btn_reset"),
                    types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="btn_back_from_edit")
                )
            else:
                # –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–∏–∫—Ä–µ–ø–∏–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
                kb.row(
                    types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
                    types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report"),
                    types.InlineKeyboardButton("üìÇ CSV", callback_data="btn_csv")
                )
                kb.row(
                    types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="btn_edit_mode"),
                    types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="btn_cod")
                )
            text = "\n".join(lines)

    today_msgs = data.setdefault("active_messages", {}).setdefault(get_today_key(), {})
    active_id = today_msgs.get(str(chat_id))

    if active_id:
        try:
            bot.edit_message_text(text, chat_id, active_id, reply_markup=kb)
            return
        except telebot.apihelper.ApiException as e:
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ {active_id} –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")

    if not create_if_missing:
        return

    try:
        sent = bot.send_message(chat_id, text, reply_markup=kb)
        today_msgs[str(chat_id)] = sent.message_id
        save_data(data)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è {chat_id}: {e}")
# -----------------------------
# –û–¢–°–ï–ö 8 ‚Äî Callback –∫–Ω–æ–ø–æ–∫ (edit/delete —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º; –≤–≤–æ–¥ –Ω–æ–≤–æ–π —Å—É–º–º—ã –ø–æ –∫–Ω–æ–ø–∫–µ)
# -----------------------------
def send_or_edit(chat_id, text, reply_markup=None):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —á–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å; –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    –∏ —Å—Ç–∞–≤–∏—Ç –µ–≥–æ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ. –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –≤ –æ–¥–Ω–æ–º –æ–∫–Ω–µ.
    """
    active_id = get_today_active_window(chat_id)
    try:
        if active_id:
            bot.edit_message_text(text, chat_id, active_id, reply_markup=reply_markup)
            return active_id
    except telebot.apihelper.ApiException as e:
        log_error(f"send_or_edit: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {active_id} –¥–ª—è {chat_id}: {e}")
    # –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–µ
    try:
        sent = bot.send_message(chat_id, text, reply_markup=reply_markup)
        set_today_active_window(chat_id, sent.message_id)
        return sent.message_id
    except Exception as e:
        log_error(f"send_or_edit: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {chat_id}: {e}")
        return None

@bot.callback_query_handler(func=lambda c: True)
def handle_callback(call):
    try:
        chat_id = call.message.chat.id
    except Exception:
        return
    store = get_chat_store(chat_id)
    today = get_today_key()

    # –æ—Ç–∫—Ä—ã—Ç—å —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Ä—è–¥–æ–º —Å –∑–∞–ø–∏—Å—è–º–∏)
    if call.data == "btn_edit_mode":
        update_or_send_today_window(chat_id, create_if_missing=True, edit_mode=True)
        bot.answer_callback_query(call.id, "–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç ‚úèÔ∏è")
        return

    # edit per record -> show small interactive panel with action button
    if call.data.startswith("edit_"):
        try:
            rid = int(call.data.split("_", 1)[1])
        except:
            bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
            return
        # find record details
        store_local = get_chat_store(chat_id)
        rec = None
        for r in store_local.get("records", []):
            if r["id"] == rid:
                rec = r
                break
        if not rec:
            bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        # build panel (we will edit active window)
        kb = types.InlineKeyboardMarkup()
        kb.row(
            types.InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Å—É–º–º—É", callback_data=f"start_edit_{rid}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_action")
        )
        text = (
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {rec['short_id']}:\n"
            f"–¢–µ–∫—É—â–µ–µ: {rec['amount']} ‚Äî {rec.get('note','')}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Å—É–º–º—É¬ª, –∑–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∏ –∑–∞–º–µ—Ç–∫—É (–ø—Ä–∏–º–µ—Ä: +500 –ó–∞—Ä–ø–ª–∞—Ç–∞)."
        )
        send_or_edit(chat_id, text, reply_markup=kb)
        bot.answer_callback_query(call.id)
        return

    # start edit by callback -> set wait flag and prompt text input
    if call.data.startswith("start_edit_"):
        try:
            # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ callback (start_edit_{rid} –∏–ª–∏ start_edit__{rid})
            parts = call.data.split("_")
            rid = int(parts[-1])
        except:
            bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
            return
        store["edit_wait"] = "change_value"
        store["edit_target"] = rid
        save_data(data)
        # –ø–æ–ø—Ä–æ—Å–∏–º –≤ —Ç–æ–º –∂–µ –∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫–Ω–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º/—Å–æ–∑–¥–∞—ë–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ)
        text = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∏ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ R{rid} (–ø—Ä–∏–º–µ—Ä: +500 –ó–∞—Ä–ø–ª–∞—Ç–∞):"
        send_or_edit(chat_id, text, reply_markup=types.InlineKeyboardMarkup().row(
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥", callback_data="cancel_edit_action")
        ))
        bot.answer_callback_query(call.id)
        return

    if call.data == "cancel_edit_action":
        store["edit_wait"] = None
        store["edit_target"] = None
        save_data(data)
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
        return

    # delete per record -> confirmation buttons
    if call.data.startswith("delete_"):
        try:
            rid = int(call.data.split("_", 1)[1])
        except:
            bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
            return
        store["delete_confirm"] = rid
        save_data(data)
        kb = types.InlineKeyboardMarkup()
        kb.row(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_delete"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_delete")
        )
        text = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å R{rid}?"
        send_or_edit(chat_id, text, reply_markup=kb)
        bot.answer_callback_query(call.id)
        return

    if call.data == "confirm_delete":
        rid = store.get("delete_confirm")
        if not rid:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        success, _ = mark_deleted_record(chat_id, rid)
        store["delete_confirm"] = None
        save_data(data)
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω–∞—è ‚úÖ")
        return

    if call.data == "cancel_delete":
        store["delete_confirm"] = None
        save_data(data)
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå")
        return

    # CSV (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –æ—Å—Ç–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ)
    if call.data == "btn_csv":
        try:
            with open(CSV_FILE, "rb") as f:
                bot.send_document(chat_id, f, caption="üìÇ –í–∞—à —Ñ–∞–π–ª data.csv")
            bot.answer_callback_query(call.id, "CSV –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üìÅ")
        except Exception as e:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}")
        return

    # reset flow (show confirm inline) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫–Ω–µ
    if call.data == "btn_reset":
        kb = build_main_keyboard(chat_id, confirm_reset=True)
        text = "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?"
        send_or_edit(chat_id, text, reply_markup=kb)
        store["awaiting_reset_confirm"] = True
        save_data(data)
        bot.answer_callback_query(call.id)
        return

    if call.data == "confirm_reset":
        if store.get("awaiting_reset_confirm"):
            store["records"] = []
            store["daily_records"] = {}
            store["balance"] = 0
            all_recs = []
            for cid, c in data.get("chats", {}).items():
                all_recs.extend(c.get("records", []))
            data["records"] = all_recs
            data["overall_balance"] = sum(r["amount"] for r in data.get("records", []) if not r.get("deleted", False))
            store["awaiting_reset_confirm"] = False
            save_data(data)
            update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã üßπ")
        return

    if call.data == "cancel_reset":
        store["awaiting_reset_confirm"] = False
        save_data(data)
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω ‚ùå")
        return

    # info in same window
    if call.data == "btn_cod":
        update_or_send_today_window(chat_id, show_info=True)
        bot.answer_callback_query(call.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìÑ")
        return

    # back from edit view
    if call.data == "btn_back_from_edit":
        update_or_send_today_window(chat_id, create_if_missing=True)
        bot.answer_callback_query(call.id, "–ù–∞–∑–∞–¥")
        return

    # balance/report/update/noop
    if call.data == "btn_balance":
        send_balance(chat_id)
        bot.answer_callback_query(call.id, "–ë–∞–ª–∞–Ω—Å –ø–æ–∫–∞–∑–∞–Ω ‚úÖ")
        return
    if call.data == "btn_report":
        send_report(chat_id)
        bot.answer_callback_query(call.id, "–û—Ç—á—ë—Ç –ø–æ–∫–∞–∑–∞–Ω üìä")
        return
    if call.data == "btn_start":
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–û–∫–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ üîÑ")
        return
    if call.data == "noop":
        bot.answer_callback_query(call.id)
        return

    bot.answer_callback_query(call.id)

# -----------------------------
# –û–¢–°–ï–ö 9 ‚Äî –°–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã
# -----------------------------
@bot.message_handler(commands=["start"])
def cmd_start(msg):
    update_or_send_today_window(msg.chat.id)
    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–æ–º –∂–µ –∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫–Ω–µ + –æ—Ç–¥–µ–ª—å–Ω–æ–µ –∫—Ä–∞—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    send_or_edit(msg.chat.id, f"‚úÖ –û–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚Äî –≤–µ—Ä—Å–∏—è {VERSION}", reply_markup=build_main_keyboard(msg.chat.id))
    try:
        bot.send_message(msg.chat.id, f"‚úÖ –û–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚Äî –≤–µ—Ä—Å–∏—è {VERSION}")
    except:
        pass

@bot.message_handler(commands=["balance"])
def cmd_balance(msg):
    send_balance(msg.chat.id)

@bot.message_handler(commands=["report"])
def cmd_report(msg):
    send_report(msg.chat.id)

@bot.message_handler(commands=["csv"])
def cmd_csv(msg):
    send_csv(msg.chat.id)

@bot.message_handler(commands=["reset"])
def cmd_reset(msg):
    kb = build_main_keyboard(msg.chat.id, confirm_reset=True)
    text = "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?"
    active_id = get_today_active_window(msg.chat.id)
    send_or_edit(msg.chat.id, text, reply_markup=kb)
    store = get_chat_store(msg.chat.id)
    store["awaiting_reset_confirm"] = True
    save_data(data)

@bot.message_handler(commands=["update"])
def cmd_update(msg):
    update_or_send_today_window(msg.chat.id)

@bot.message_handler(commands=["info"])
def cmd_info(msg):
    update_or_send_today_window(msg.chat.id, show_info=True)

# -----------------------------
# –û–¢–°–ï–ö 10 ‚Äî –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
# -----------------------------
num_re = re.compile(r'([+-]?\s*\d+)')

@bot.message_handler(func=lambda m: True)
def handle_message(msg):
    if not msg.text:
        return
    chat_id = msg.chat.id
    store = get_chat_store(chat_id)
    wait_action = store.get("edit_wait")

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    if wait_action is None:
        m = num_re.search(msg.text)
        if m:
            try:
                raw = m.group(1).replace(" ", "")
                if raw.startswith("+"):
                    amount = int(raw[1:])
                elif raw.startswith("-"):
                    amount = -int(raw[1:])
                else:
                    amount = -int(raw)
                note = msg.text.replace(m.group(1), "").strip()
                add_record_to_chat(chat_id, amount, note, msg.from_user.id)
                update_or_send_today_window(chat_id)
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        return

    # –∏–∑–º–µ–Ω–µ–Ω–∏–µ ‚Äî –≤–≤–æ–¥ –Ω–æ–≤–æ–π —Å—É–º–º—ã (–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Å—É–º–º—É")
    if wait_action == "change_value":
        rid = store.get("edit_target")
        if not rid:
            store["edit_wait"] = None
            store["edit_target"] = None
            save_data(data)
            return
        parts = msg.text.strip().split(" ", 1)
        try:
            raw = parts[0]
            if raw.startswith("+"):
                amount = int(raw[1:])
            elif raw.startswith("-"):
                amount = -int(raw[1:])
            else:
                amount = -int(raw)
            note = parts[1] if len(parts) > 1 else ""
            success, _ = update_record_in_chat(chat_id, rid, amount, note)
            store["edit_wait"] = None
            store["edit_target"] = None
            save_data(data)
            update_or_send_today_window(chat_id)
            # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ —Å –∫—Ä–∞—Ç–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            send_or_edit(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å R{rid} –∏–∑–º–µ–Ω–µ–Ω–∞" if success else f"‚ùå –ó–∞–ø–∏—Å—å R{rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=build_main_keyboard(chat_id))
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
            send_or_edit(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—É–º–º—ã/—Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: +500 –ó–∞—Ä–ø–ª–∞—Ç–∞", reply_markup=build_main_keyboard(chat_id))
        return

    # —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –≤–≤–æ–¥—É ID (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ç–∞–∫–æ–π —Ä–µ–∂–∏–º)
    if wait_action == "delete_id":
        try:
            rid = int(msg.text.strip())
            success, _ = mark_deleted_record(chat_id, rid)
            store["edit_wait"] = None
            store["edit_target"] = None
            save_data(data)
            update_or_send_today_window(chat_id)
            send_or_edit(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å R{rid} —É–¥–∞–ª–µ–Ω–∞" if success else f"‚ùå –ó–∞–ø–∏—Å—å R{rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=build_main_keyboard(chat_id))
        except:
            send_or_edit(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=build_main_keyboard(chat_id))
        return

# -----------------------------
# –û–¢–°–ï–ö 11 ‚Äî –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (send_balance, send_report, send_csv, reset, info)
# -----------------------------
def send_balance(chat_id):
    store = get_chat_store(chat_id)
    today_key = get_today_key()
    day_records = store.get("daily_records", {}).get(today_key, [])
    daily_income = sum(r["amount"] for r in day_records if r["amount"] > 0 and not r.get("deleted", False))
    daily_expense = sum(r["amount"] for r in day_records if r["amount"] < 0 and not r.get("deleted", False))
    overall_balance = store.get("balance", 0)
    text = (
        f"üìÖ {today_key}\n\n"
        f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS\n"
        f"üíµ –ü—Ä–∏—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {daily_income} ARS\n"
        f"üí∏ –†–∞—Å—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {abs(daily_expense)} ARS"
    )
    send_or_edit(chat_id, text, reply_markup=build_main_keyboard(chat_id))

def send_report(chat_id):
    store = get_chat_store(chat_id)
    today_key = get_today_key()
    day_records = store.get("daily_records", {}).get(today_key, [])
    expenses = [r for r in day_records if r["amount"] < 0 and not r.get("deleted", False)]
    total = sum(abs(r["amount"]) for r in expenses)
    if not expenses:
        text = f"üìÖ {today_key}\n–ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\nüí∏ –†–∞—Å—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å: 0 ARS"
    else:
        lines = [f"üìÖ {today_key}", "üìã –†–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å:"]
        for r in expenses[-30:]:
            lines.append(f"{r['short_id']}: -{abs(r['amount'])} ‚Äî {r.get('note','')}")
        lines.append(f"\nüí∏ –†–∞—Å—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å: {total} ARS")
        text = "\n".join(lines)
    send_or_edit(chat_id, text, reply_markup=build_main_keyboard(chat_id))

def send_csv(chat_id):
    try:
        with open(CSV_FILE, "rb") as f:
            bot.send_document(chat_id, f, caption="üìÇ –í–∞—à —Ñ–∞–π–ª data.csv")
    except Exception as e:
        send_or_edit(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CSV: {e}", reply_markup=build_main_keyboard(chat_id))

def reset_data(chat_id):
    store = get_chat_store(chat_id)
    store["records"] = []
    store["daily_records"] = {}
    store["balance"] = 0
    all_recs = []
    for cid, c in data.get("chats", {}).items():
        all_recs.extend(c.get("records", []))
    data["records"] = all_recs
    data["overall_balance"] = sum(r["amount"] for r in data.get("records", []) if not r.get("deleted", False))
    save_data(data)
    update_or_send_today_window(chat_id)

# -----------------------------
# –û–¢–°–ï–ö 12 ‚Äî Webhook / Flask routes
# -----------------------------
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    # Telegram –ø—Ä–∏—Å—ã–ª–∞–µ—Ç update –≤ –≤–∏–¥–µ JSON; telebot –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ
    update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª ‚Äî –≤–µ—Ä—Å–∏—è {VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

# -----------------------------
# –û–¢–°–ï–ö 13 ‚Äî Webhook —É—Å—Ç–∞–Ω–æ–≤–∫–∞, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–Ω—è –∏ –∑–∞–ø—É—Å–∫
# -----------------------------
def set_webhook():
    url = f"{APP_URL}/{TOKEN}"
    try:
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url=url)
        log_info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

def schedule_daily_window_creation():
    def task():
        last_day = get_today_key()
        while True:
            try:
                time.sleep(60)
                current_day = get_today_key()
                if current_day != last_day:
                    for cid in list(data.get("chats", {}).keys()):
                        try:
                            update_or_send_today_window(int(cid))
                        except Exception as e:
                            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞ –Ω–æ–≤–æ–≥–æ –¥–Ω—è –¥–ª—è {cid}: {e}")
                    last_day = current_day
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –≤ daily loop: {e}")
                time.sleep(5)
    threading.Thread(target=task, daemon=True).start()

if __name__ == "__main__":
    # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    set_webhook()
    schedule_daily_window_creation()
    log_info(f"–ë–æ—Ç –§–û –≤–µ—Ä—Å–∏–∏ {VERSION} –∑–∞–ø—É—â–µ–Ω")

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if OWNER_ID:
        try:
            bot.send_message(int(OWNER_ID), f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! (–≤–µ—Ä—Å–∏—è {VERSION})")
        except Exception as e:
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")

    # –∑–∞–ø—É—Å–∫ Flask
    app.run(host="0.0.0.0", port=PORT)