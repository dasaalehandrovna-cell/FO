# –ö–æ–¥ –±–æ—Ç–∞ ‚Ññ9.1 (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–¥–∞ ‚Ññ8)
# Webhook-–±–æ—Ç (Flask). –í–µ—Ä—Å–∏—è ‚Ññ9.1
# –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ —Å ‚Ññ8: —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ delayed_delete(..., delay=5)
# –∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–∫–Ω–∞ ‚Äî —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ, –ø–æ—Ç–æ–º —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ.

import os
import json
import time
import threading
import re
import csv
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

# -------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
PORT = int(os.environ.get("PORT", 5000))

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -------------------------
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ data.json
# -------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],           # {id, short_id, timestamp(ISO UTC), amount, note, owner}
        "active_messages": {},   # YYYY-MM-DD -> {chat_id, message_id}
        "next_id": 1,
        "sent_messages": []      # –∏—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
    }

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            try:
                d = json.load(f)
            except Exception:
                d = default_data()
    else:
        d = default_data()
    # ensure keys
    for k, v in default_data().items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

data = load_data()

# -------------------------
# –ü–∞—Ä—Å–∏–Ω–≥, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# -------------------------
NUMBER_RE = re.compile(r'([+-]?\s*[\d][\d\s\.,]*)')

def parse_first_number(text):
    if not text:
        return None, None, None
    m = NUMBER_RE.search(text)
    if not m:
        return None, None, None
    raw = m.group(1)
    s = raw.strip()
    if s.startswith('+'):
        sign = '+'
        digits = s[1:].strip()
    elif s.startswith('-'):
        sign = '-'
        digits = s[1:].strip()
    else:
        sign = ''  # –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–∫–∞ => —Ä–∞—Å—Ö–æ–¥
        digits = s
    digits_norm = re.sub(r'[\s\.,]', '', digits)
    dm = re.match(r'(\d+)', digits_norm)
    if not dm:
        return None, None, None
    return int(dm.group(1)), sign, raw

def apply_sign_and_normalize(num, sign):
    return num if sign == '+' else -num

def fmt_amount(n):
    return f"{abs(n):,}".replace(",", ".")

def make_short_id(n):
    return f"R{n}"

def date_local_str(dt):
    return dt.astimezone(TZ).strftime("%Y-%m-%d")

def time_local_str(dt):
    return dt.astimezone(TZ).strftime("%H:%M")

# -------------------------
# –û—Ç–ø—Ä–∞–≤–∫–∞ + –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# -------------------------
def record_sent_message(chat_id, message_obj, purpose="unknown", day=None):
    entry = {
        "chat_id": int(chat_id),
        "message_id": int(message_obj.message_id),
        "timestamp": datetime.now(tz=ZoneInfo("UTC")).isoformat(),
        "purpose": purpose,
        "day": day or datetime.now(tz=TZ).strftime("%Y-%m-%d")
    }
    data.setdefault("sent_messages", []).append(entry)
    save_data(data)

def send_and_record(chat_id, text, reply_markup=None, parse_mode=None, purpose="message", day=None):
    sent = bot.send_message(int(chat_id), text, reply_markup=reply_markup, parse_mode=parse_mode)
    record_sent_message(chat_id, sent, purpose=purpose, day=day)
    return sent

def send_file_and_record(chat_id, path, caption=None, purpose="file"):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞, –∑–∞–ø–∏—Å—å –≤ sent_messages
    with open(path, "rb") as f:
        sent = bot.send_document(int(chat_id), f, caption=caption)
    record_sent_message(chat_id, sent, purpose=purpose, day=datetime.now(tz=TZ).strftime("%Y-%m-%d"))
    return sent

# -------------------------
# –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –° –ó–ê–î–ï–†–ñ–ö–û–ô
# -------------------------
def delayed_delete(chat_id, message_id, delay=5):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)."""
    def worker():
        time.sleep(delay)
        try:
            bot.delete_message(int(chat_id), int(message_id))
        except Exception as e:
            # –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            print(f"delayed_delete error for {chat_id}/{message_id}: {e}")
    threading.Thread(target=worker, daemon=True).start()

# -------------------------
# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –¥–Ω—è (–≤–∫–ª—é—á–∞—è –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏)
# -------------------------
def build_day_window(chat_id, day_date):
    recs = []
    for r in data["records"]:
        if str(r.get("owner")) != str(chat_id):
            continue
        ts = datetime.fromisoformat(r["timestamp"]).astimezone(TZ)
        if date_local_str(ts) == day_date:
            recs.append((ts, r))
    recs.sort(key=lambda x: x[0])
    if not recs:
        return "üìò –ó–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."

    lines = []
    lines.append(f"üìÖ {day_date}\n")
    last_hour = None
    day_income, day_expense = 0, 0
    for ts, r in recs:
        hour = ts.strftime("%H")
        if last_hour is None:
            last_hour = hour
        elif hour != last_hour:
            lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Å–∞
            last_hour = hour
        amt = r["amount"]
        sign = "+" if amt > 0 else "-"
        sid = r.get("short_id") or make_short_id(r.get("id"))
        note = r.get("note", "")
        t_local = time_local_str(ts)
        lines.append(f"üïì {t_local} | {sid} | {sign}{fmt_amount(amt)} {note}".rstrip())
        if amt > 0:
            day_income += amt
        else:
            day_expense += abs(amt)
    overall = data.get("overall_balance", 0)
    lines.append("")
    lines.append(f"üìà –ü—Ä–∏—Ö–æ–¥ –¥–Ω—è: {fmt_amount(day_income)}")
    lines.append(f"üìâ –†–∞—Å—Ö–æ–¥ –¥–Ω—è: {fmt_amount(day_expense)}")
    lines.append(f"üíµ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {fmt_amount(overall)}")
    return "\n".join(lines)

# -------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -------------------------
def kb_day_main():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_menu"))
    return kb

def kb_edit_main():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="edit_modify"))
    kb.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="edit_delete"))
    kb.add(types.InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="edit_export_csv"))
    kb.add(types.InlineKeyboardButton("–û–±–Ω—É–ª–∏—Ç—å –≤—Å—ë (–≤—Å–µ—Ö)", callback_data="edit_reset_all"))
    kb.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="edit_cancel"))
    return kb

def kb_records_list(chat_id, day_date, mode):
    kb = types.InlineKeyboardMarkup()
    recs = []
    for ts, r in get_day_records_for_chat(chat_id, day_date):
        sid = r.get("short_id") or make_short_id(r.get("id"))
        amt = r["amount"]
        sign = "+" if amt > 0 else "-"
        label = f"[{sid}] {sign}{fmt_amount(amt)} {r.get('note','')}"
        recs.append((sid, label))
    if not recs:
        kb.add(types.InlineKeyboardButton("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å", callback_data="no_op"))
        kb.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="edit_menu"))
        return kb
    for sid, label in recs:
        kb.add(types.InlineKeyboardButton(label[:60], callback_data=f"select:{mode}:{sid}"))
    kb.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="edit_menu"))
    return kb

def kb_yes_no(prefix):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–î–∞", callback_data=f"{prefix}_yes"),
           types.InlineKeyboardButton("–ù–µ—Ç", callback_data=f"{prefix}_no"))
    return kb

# -------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ: –ø–æ–∏—Å–∫, —É–¥–∞–ª–∏—Ç—å, –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å
# -------------------------
def get_day_records_for_chat(chat_id, day_date):
    recs = []
    for r in data["records"]:
        if str(r.get("owner")) != str(chat_id):
            continue
        ts = datetime.fromisoformat(r["timestamp"]).astimezone(TZ)
        if date_local_str(ts) == day_date:
            recs.append((ts, r))
    recs.sort(key=lambda x: x[0])
    return recs

def find_record_by_short_id(short_id):
    for r in data["records"]:
        if r.get("short_id") == short_id or make_short_id(r.get("id")) == short_id:
            return r
    return None

def delete_record_by_short_id(chat_id, short_id):
    r = find_record_by_short_id(short_id)
    if not r or str(r.get("owner")) != str(chat_id):
        return False
    try:
        data["records"] = [x for x in data["records"] if not (x.get("short_id") == short_id or make_short_id(x.get("id")) == short_id)]
        data["overall_balance"] = data.get("overall_balance", 0) - r["amount"]
        save_data(data)
        today = datetime.now(tz=TZ).strftime("%Y-%m-%d")
        update_day_window_after_change(chat_id, today)
        return True
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:", e)
        return False

def modify_record_by_short_id(chat_id, short_id, new_text):
    r = find_record_by_short_id(short_id)
    if not r or str(r.get("owner")) != str(chat_id):
        return False
    num, sign, raw = parse_first_number(new_text)
    if num is None:
        return False
    new_amt = apply_sign_and_normalize(num, sign)
    note = new_text[(new_text.find(raw) + len(raw)):].strip() if raw in new_text else ""
    for i, rr in enumerate(data["records"]):
        rr_sid = rr.get("short_id") or make_short_id(rr.get("id"))
        if rr_sid == short_id:
            data["overall_balance"] = data.get("overall_balance", 0) - rr["amount"] + new_amt
            data["records"][i]["amount"] = new_amt
            data["records"][i]["note"] = note
            save_data(data)
            today = datetime.now(tz=TZ).strftime("%Y-%m-%d")
            update_day_window_after_change(chat_id, today)
            return True
    return False

# -------------------------
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞ –¥–Ω—è: —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–µ ‚Äî –ø–æ—Ç–æ–º —Å—Ç–∞—Ä–æ–µ (—É–¥–∞–ª—è–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)
# -------------------------
def update_day_window_after_change(chat_id, day_date, purpose="day_window"):
    prev = data.get("active_messages", {}).get(day_date)
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
    text = build_day_window(chat_id, day_date)
    kb = kb_day_main()
    sent = bot.send_message(int(chat_id), text, reply_markup=kb)
    data.setdefault("active_messages", {})[day_date] = {"chat_id": int(chat_id), "message_id": int(sent.message_id)}
    record_sent_message(chat_id, sent, purpose=purpose, day=day_date)
    save_data(data)
    # –ü–æ—Ç–æ–º —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ (–µ—Å–ª–∏ –±—ã–ª–æ) —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    if prev and int(prev.get("chat_id")) == int(chat_id):
        delayed_delete(prev["chat_id"], prev["message_id"], delay=5)
        data["active_messages"].pop(day_date, None)
        save_data(data)
    return sent

# -------------------------
# –ü—Ä–∏ –ª—é–±–æ–º –≤—Ö–æ–¥—è—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è (–µ—Å–ª–∏ –±—ã–ª–æ), –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ
# -------------------------
def delete_active_window_if_today_and_belong(chat_id):
    today = datetime.now(tz=TZ).strftime("%Y-%m-%d")
    am = data.get("active_messages", {}).get(today)
    if am and int(am.get("chat_id")) == int(chat_id):
        # —É–¥–∞–ª—è–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, –Ω–æ –Ω–µ —Å—Ä–∞–∑—É –∏–∑ active_messages (–±—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å active_messages –ø–æ—Å–ª–µ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞)
        delayed_delete(am["chat_id"], am["message_id"], delay=5)
        data["active_messages"].pop(today, None)
        save_data(data)
        return True
    return False

# -------------------------
# –§–æ–Ω–æ–≤—ã–π —Ç—Ä–µ–¥: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã –¥–Ω—è
# -------------------------
def midnight_watcher():
    last_date = datetime.now(tz=TZ).strftime("%Y-%m-%d")
    while True:
        try:
            now_date = datetime.now(tz=TZ).strftime("%Y-%m-%d")
            if now_date != last_date:
                # —Å–æ–±—Ä–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —á–∞—Ç–æ–≤ –∏–∑ –∑–∞–ø–∏—Å–µ–π + active_messages
                owners = set()
                for r in data.get("records", []):
                    owners.add(str(r.get("owner")))
                for d, am in data.get("active_messages", {}).items():
                    owners.add(str(am.get("chat_id")))
                for owner in owners:
                    try:
                        update_day_window_after_change(int(owner), now_date, purpose="new_day")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞ –¥–ª—è {owner}: {e}")
                last_date = now_date
            time.sleep(30)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –≤ midnight_watcher:", e)
            time.sleep(30)

threading.Thread(target=midnight_watcher, daemon=True).start()

# -------------------------
# –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV (–≤—Å—ë –≤—Ä–µ–º—è)
# -------------------------
def export_all_to_csv(path=CSV_FILE):
    """
    –ö–æ–ª–æ–Ω–∫–∏ CSV:
    ID,–î–∞—Ç–∞,–í—Ä–µ–º—è,–°—É–º–º–∞,–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π,–¢–∏–ø
    –î–∞—Ç–∞/–í—Ä–µ–º—è ‚Äî –ª–æ–∫–∞–ª—å–Ω—ã–µ (TZ)
    –¢–∏–ø: –ø—Ä–∏—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥
    """
    rows = []
    for r in data.get("records", []):
        ts_utc = datetime.fromisoformat(r["timestamp"])
        ts_local = ts_utc.astimezone(TZ)
        date_s = ts_local.strftime("%Y-%m-%d")
        time_s = ts_local.strftime("%H:%M:%S")
        amt = r["amount"]
        typ = "–ø—Ä–∏—Ö–æ–¥" if amt > 0 else "—Ä–∞—Å—Ö–æ–¥"
        rows.append({
            "ID": r.get("short_id") or make_short_id(r.get("id")),
            "–î–∞—Ç–∞": date_s,
            "–í—Ä–µ–º—è": time_s,
            "–°—É–º–º–∞": f"{amt:+d}",
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": r.get("note",""),
            "–¢–∏–ø": typ,
            "–í–ª–∞–¥–µ–ª–µ—Ü": r.get("owner")
        })
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º CSV (–≤ UTF-8 —Å BOM —á—Ç–æ–±—ã Excel –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫—Ä—ã–ª)
    with open(path, "w", newline="", encoding="utf-8-sig") as csvfile:
        fieldnames = ["ID","–î–∞—Ç–∞","–í—Ä–µ–º—è","–°—É–º–º–∞","–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π","–¢–∏–ø","–í–ª–∞–¥–µ–ª–µ—Ü"]
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for row in rows:
            writer.writerow(row)
    return path

# -------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# -------------------------
# pending_actions for modify flow
pending_actions = {}

@bot.message_handler(func=lambda m: True)
def handle_any_message(message):
    chat_id = message.chat.id
    text = message.text or ""
    text = text.strip()
    # 1) —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è (–µ—Å–ª–∏ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è) –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
    deleted = delete_active_window_if_today_and_belong(chat_id)
    today = datetime.now(tz=TZ).strftime("%Y-%m-%d")
    # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ (–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ)
    update_day_window_after_change(chat_id, today, purpose="recreated_on_message")

    # 2) –µ—Å–ª–∏ –µ—Å—Ç—å pending action (–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è) ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ—ë –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if str(chat_id) in pending_actions:
        state = pending_actions[str(chat_id)]
        if state.get("type") == "await_modify_input":
            short = state.get("short_id")
            ok = modify_record_by_short_id(chat_id, short, text)
            if ok:
                send_and_record(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å {short} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", purpose="modified_record")
            else:
                send_and_record(chat_id, f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å {short}. –ü—Ä–∏–º–µ—Ä: +1000 –∑–∞—Ä–ø–ª–∞—Ç–∞", purpose="modify_failed")
            pending_actions.pop(str(chat_id), None)
            return
        else:
            pending_actions.pop(str(chat_id), None)

    # 3) –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: –∫–∞–∂–¥–∞—è –Ω–µ–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    if not text:
        return
    lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
    any_added = False
    for line in lines:
        num, sign, raw = parse_first_number(line)
        if num is None:
            # –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue
        amt_signed = apply_sign_and_normalize(num, sign)
        note = line[(line.find(raw) + len(raw)):].strip() if raw in line else ""
        rec_id = data.get("next_id", 1)
        short = make_short_id(rec_id)
        ts = datetime.now(tz=ZoneInfo("UTC")).isoformat()
        rec = {
            "id": rec_id,
            "short_id": short,
            "timestamp": ts,
            "amount": amt_signed,
            "note": note,
            "owner": str(chat_id)
        }
        data["records"].append(rec)
        data["next_id"] = rec_id + 1
        data["overall_balance"] = data.get("overall_balance", 0) + amt_signed
        any_added = True
    if any_added:
        save_data(data)
        # –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ (—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–æ–≤–æ–µ –∏ —á–µ—Ä–µ–∑ delayed_delete —É–¥–∞–ª–∏—Ç —Å—Ç–∞—Ä–æ–µ)
        update_day_window_after_change(chat_id, today, purpose="added_records")

# -------------------------
# Callback handler (inline)
# -------------------------
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    data_call = call.data or ""
    chat_id = call.message.chat.id
    call_msg = call.message
    today = datetime.now(tz=TZ).strftime("%Y-%m-%d")
    try:
        bot.answer_callback_query(call.id)
    except Exception:
        pass

    # –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ reply_markup)
    if data_call == "edit_menu":
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_edit_main())
        except Exception:
            send_and_record(chat_id, "–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb_edit_main(), purpose="edit_menu_fallback")
        return

    if data_call == "edit_cancel":
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_day_main())
        except Exception:
            send_and_record(chat_id, build_day_window(chat_id, today), reply_markup=kb_day_main(), purpose="day_window_fallback")
        return

    # –ò–∑–º–µ–Ω–∏—Ç—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π (–∫–Ω–æ–ø–∫–∏)
    if data_call == "edit_modify":
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_records_list(chat_id, today, mode="modify"))
        except Exception:
            send_and_record(chat_id, "–í—ã–±–æ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=kb_records_list(chat_id, today, mode="modify"), purpose="modify_list_fallback")
        return

    # –£–¥–∞–ª–∏—Ç—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
    if data_call == "edit_delete":
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_records_list(chat_id, today, mode="delete"))
        except Exception:
            send_and_record(chat_id, "–í—ã–±–æ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb_records_list(chat_id, today, mode="delete"), purpose="delete_list_fallback")
        return

    # –≠–∫—Å–ø–æ—Ä—Ç CSV
    if data_call == "edit_export_csv" or data_call == "edit_export_csv_alt":
        try:
            path = export_all_to_csv(CSV_FILE)
            send_file_and_record(chat_id, path, caption="–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (CSV)", purpose="export_csv")
            # –≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞)
            try:
                bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_edit_main())
            except Exception:
                pass
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV:", e)
            send_and_record(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV.", purpose="export_error")
        return

    # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏: select:<mode>:<short_id>
    if data_call.startswith("select:"):
        parts = data_call.split(":", 2)
        if len(parts) != 3:
            send_and_record(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", purpose="select_error")
            return
        mode = parts[1]
        short_id = parts[2]
        if mode == "modify":
            # –ø—Ä–æ—Å–∏–º –≤ —á–∞—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ; —Å–æ—Ö—Ä–∞–Ω—è–µ–º pending
            try:
                bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=None)
            except Exception:
                pass
            send_and_record(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {short_id} (–ø—Ä–∏–º–µ—Ä: +1000 –∑–∞—Ä–ø–ª–∞—Ç–∞).", purpose="await_modify_input")
            pending_actions[str(chat_id)] = {"type": "await_modify_input", "short_id": short_id, "origin_message_id": call_msg.message_id}
            return
        elif mode == "delete":
            # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º yes/no –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
            try:
                bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_yes_no(f"confirm_delete:{short_id}"))
            except Exception:
                send_and_record(chat_id, f"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å {short_id}?", reply_markup=kb_yes_no(f"confirm_delete:{short_id}"), purpose="delete_confirm_fallback")
            return
        else:
            send_and_record(chat_id, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞.", purpose="select_badmode")
            return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è: confirm_delete:<shortid>_yes/_no
    if data_call.startswith("confirm_delete:"):
        tail = data_call[len("confirm_delete:"):]
        if tail.endswith("_yes"):
            short_id = tail[:-4]
            ok = delete_record_by_short_id(chat_id, short_id)
            if ok:
                try:
                    bot.edit_message_text(f"‚úÖ –ó–∞–ø–∏—Å—å {short_id} —É–¥–∞–ª–µ–Ω–∞.", call_msg.chat.id, call_msg.message_id)
                except Exception:
                    send_and_record(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å {short_id} —É–¥–∞–ª–µ–Ω–∞.", purpose="deleted_record")
            else:
                try:
                    bot.edit_message_text(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å {short_id}.", call_msg.chat.id, call_msg.message_id)
                except Exception:
                    send_and_record(chat_id, f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å {short_id}.", purpose="delete_failed")
        else:
            # –æ—Ç–º–µ–Ω–∞ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_edit_main())
            except Exception:
                send_and_record(chat_id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb_edit_main(), purpose="delete_cancelled")
        return

    # –û–±–Ω—É–ª–µ–Ω–∏–µ: –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞/–Ω–µ—Ç
    if data_call == "edit_reset_all":
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_yes_no("confirm_reset_all"))
        except Exception:
            send_and_record(chat_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤—Å–µ–≥–¥–∞? (–î–∞/–ù–µ—Ç)", reply_markup=kb_yes_no("confirm_reset_all"), purpose="reset_confirm_fallback")
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω—É–ª–µ–Ω–∏—è
    if data_call.startswith("confirm_reset_all"):
        if data_call.endswith("_yes"):
            data["overall_balance"] = 0
            data["records"] = []
            data["active_messages"] = {}
            save_data(data)
            try:
                bot.edit_message_text("‚ôªÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã. üìò –î–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å.", call_msg.chat.id, call_msg.message_id)
            except Exception:
                send_and_record(chat_id, "‚ôªÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã. üìò –î–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å.", purpose="reset_done")
        else:
            try:
                bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_edit_main())
            except Exception:
                send_and_record(chat_id, "–û–±–Ω—É–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb_edit_main(), purpose="reset_cancel")
        return

    # no_op –∏–ª–∏ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data_call in ("no_op",):
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_day_main())
        except Exception:
            send_and_record(chat_id, build_day_window(chat_id, today), reply_markup=kb_day_main(), purpose="no_op_fallback")
        return

    # log unhandled
    print("Unhandled callback:", data_call)

# -------------------------
# –ö–æ–º–∞–Ω–¥—ã: /–±–∞–ª–∞–Ω—Å /–æ—Ç—á–µ—Ç /—Å–±—Ä–æ—Å
# -------------------------
@bot.message_handler(commands=["–±–∞–ª–∞–Ω—Å"])
def cmd_balance(message):
    overall = data.get("overall_balance", 0)
    bot.reply_to(message, f"üí∞ –¢–µ–∫—É—â–∏–π –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: {fmt_amount(overall)}")

@bot.message_handler(commands=["–æ—Ç—á–µ—Ç"])
def cmd_report(message):
    chat_id = message.chat.id
    today = datetime.now(tz=TZ).strftime("%Y-%m-%d")
    update_day_window_after_change(chat_id, today, purpose="report_cmd")

@bot.message_handler(commands=["—Å–±—Ä–æ—Å"])
def cmd_reset(message):
    chat_id = message.chat.id
    kb = kb_yes_no("confirm_reset_all")
    send_and_record(chat_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? (–î–∞/–ù–µ—Ç)", reply_markup=kb, purpose="reset_command")

# -------------------------
# Webhook endpoints
# -------------------------
@app.route("/" + TOKEN, methods=["POST"])
def receive_update():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/", methods=["GET"])
def set_and_ping():
    bot.remove_webhook()
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    bot.set_webhook(url=webhook_url)
    print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", webhook_url)
    if OWNER_ID:
        try:
            msg = bot.send_message(int(OWNER_ID), "‚úÖ –ë–æ—Ç ‚Ññ9.1: webhook –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            # –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ delayed_delete (5 —Å–µ–∫)
            delayed_delete(int(OWNER_ID), msg.message_id, delay=5)
            record_sent_message(OWNER_ID, msg, purpose="owner_ping")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞:", e)
    return "ok", 200

# -------------------------
# –ó–∞–ø—É—Å–∫
# -------------------------
if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ‚Ññ9.1 (webhook)...")
    save_data(data)
    if OWNER_ID:
        try:
            msg = bot.send_message(int(OWNER_ID), "‚úÖ –ë–æ—Ç ‚Ññ9.1 –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            delayed_delete(int(OWNER_ID), msg.message_id, delay=5)
            record_sent_message(OWNER_ID, msg, purpose="owner_start")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞:", e)
    app.run(host="0.0.0.0", port=PORT)