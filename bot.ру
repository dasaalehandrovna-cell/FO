# -------------------------
# –ö–æ–¥ –±–æ—Ç–∞ ‚Ññ9.6.5
# Webhook-–±–æ—Ç (Flask). –í–µ—Ä—Å–∏—è ‚Ññ9.6.5
# –ù–æ–≤–æ–µ: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ forward targets, –∫–æ–º–∞–Ω–¥—ã /addforward /removeforward /listforwards,
# –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏.
# –¢—Ä–µ–±—É–µ—Ç –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏: BOT_TOKEN, OWNER_ID
# requirements.txt: pyTelegramBotAPI==4.23.0, flask
# –§–∞–π–ª—ã: data.json (–±–∞–∑–∞), data.csv (—ç–∫—Å–ø–æ—Ä—Ç)
# -------------------------

import os
import json
import time
import threading
import re
import csv
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

# -------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
PORT = int(os.environ.get("PORT", 5000))
WEBHOOK_PATH = os.environ.get("WEBHOOK_PATH", "/" + TOKEN)

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -------------------------
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ data.json
# -------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],           # {id, short_id, timestamp(ISO UTC), amount, note, owner}
        "active_messages": {},   # YYYY-MM-DD -> { "chat_id": id, "message_id": id } (–ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É)
        "next_id": 1,
        "sent_messages": [],     # –∏—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
        "forward_targets": {}    # "<owner_chat_id>": ["<target1>", "<target2>", ...]
    }

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            try:
                d = json.load(f)
            except Exception:
                d = default_data()
    else:
        d = default_data()
    # ensure keys
    for k, v in default_data().items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

data = load_data()

# -------------------------
# –ü–∞—Ä—Å–∏–Ω–≥, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–∞–∫ –≤ –±–∞–∑–æ–≤–æ–π)
# -------------------------
NUMBER_RE = re.compile(r'([+-]?\s*[\d][\d\s\.,]*)')

def parse_first_number(text):
    if not text:
        return None, None, None
    m = NUMBER_RE.search(text)
    if not m:
        return None, None, None
    raw = m.group(1)
    s = raw.strip()
    if s.startswith('+'):
        sign = '+'
        digits = s[1:].strip()
    elif s.startswith('-'):
        sign = '-'
        digits = s[1:].strip()
    else:
        sign = ''  # –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–∫–∞ => —Ä–∞—Å—Ö–æ–¥
        digits = s
    digits_norm = re.sub(r'[\s\.,]', '', digits)
    dm = re.match(r'(\d+)', digits_norm)
    if not dm:
        return None, None, None
    return int(dm.group(1)), sign, raw

def apply_sign_and_normalize(num, sign):
    return num if sign == '+' else -num

def fmt_amount(n):
    return f"{abs(n):,}".replace(",", ".")

def make_short_id(n):
    return f"R{n}"

def date_local_str(dt):
    return dt.astimezone(TZ).strftime("%Y-%m-%d")

def time_local_str(dt):
    return dt.astimezone(TZ).strftime("%H:%M")

# -------------------------
# –û—Ç–ø—Ä–∞–≤–∫–∞ + –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# -------------------------
def record_sent_message(chat_id, message_obj, purpose="unknown", day=None):
    entry = {
        "chat_id": int(chat_id),
        "message_id": int(message_obj.message_id) if hasattr(message_obj, "message_id") else None,
        "timestamp": datetime.now(tz=ZoneInfo("UTC")).isoformat(),
        "purpose": purpose,
        "day": day or datetime.now(tz=TZ).strftime("%Y-%m-%d")
    }
    data.setdefault("sent_messages", []).append(entry)
    save_data(data)

def send_and_record(chat_id, text, reply_markup=None, parse_mode=None, purpose="message", day=None):
    sent = bot.send_message(int(chat_id), text, reply_markup=reply_markup, parse_mode=parse_mode)
    record_sent_message(chat_id, sent, purpose=purpose, day=day)
    return sent

def send_file_and_record(chat_id, path, caption=None, purpose="file"):
    with open(path, "rb") as f:
        sent = bot.send_document(int(chat_id), f, caption=caption)
    record_sent_message(chat_id, sent, purpose=purpose, day=datetime.now(tz=TZ).strftime("%Y-%m-%d"))
    return sent

# -------------------------
# –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –° –ó–ê–î–ï–†–ñ–ö–û–ô
# -------------------------
def delayed_delete(chat_id, message_id, delay=5):
    def worker():
        time.sleep(delay)
        try:
            bot.delete_message(int(chat_id), int(message_id))
        except Exception as e:
            print(f"delayed_delete error for {chat_id}/{message_id}: {e}")
    threading.Thread(target=worker, daemon=True).start()

# -------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑ 9.6.1: build_day_window, update_day_window_after_change, –∏ –ø—Ä.
# (–î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ —Å—á–∏—Ç–∞–µ–º —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# -------------------------
# --- (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ 9.6.1: build_day_window, kb_*, get_day_records_for_chat, find_record_by_short_id, delete_record_by_short_id, modify_record_by_short_id, export_all_to_csv –∏ —Ç.–¥.)
# –ß—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –∫–æ–¥ –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ –ø—Ä–∏–º–µ—Ä–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ –æ—Å—Ç–∞–≤—å —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ –≤ 9.6.1/9.6.4.
# -------------------------

# -------------------------
# Helper: normalize forward targets storage
# -------------------------
def ensure_forward_list_for(chat_id):
    key = str(chat_id)
    data.setdefault("forward_targets", {})
    if key not in data["forward_targets"] or not isinstance(data["forward_targets"][key], list):
        # convert old single-string to list
        if key in data["forward_targets"] and data["forward_targets"][key]:
            data["forward_targets"][key] = [str(data["forward_targets"][key])]
        else:
            data["forward_targets"][key] = []
    return data["forward_targets"][key]

def add_forward_target(chat_id, target):
    lst = ensure_forward_list_for(chat_id)
    t = str(target).strip()
    if t in lst:
        return False
    lst.append(t)
    data["forward_targets"][str(chat_id)] = lst
    save_data(data)
    return True

def remove_forward_target(chat_id, target):
    lst = ensure_forward_list_for(chat_id)
    t = str(target).strip()
    if t in lst:
        lst = [x for x in lst if x != t]
        data["forward_targets"][str(chat_id)] = lst
        save_data(data)
        return True
    return False

def list_forward_targets(chat_id):
    lst = ensure_forward_list_for(chat_id)
    return lst

# -------------------------
# validate_and_test_forward (—Ç–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)
# -------------------------
def validate_and_test_target(target):
    """
    –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ target.
    target –º–æ–∂–µ—Ç –±—ã—Ç—å '@username' –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π chat_id.
    –í–µ—Ä–Ω—ë—Ç (ok: bool, msg: str, normalized_target: str)
    """
    t_raw = str(target).strip()
    if t_raw.startswith("@"):
        normalized = t_raw
    else:
        try:
            normalized = int(t_raw)
        except Exception:
            normalized = t_raw  # –≤–æ–∑–º–æ–∂–Ω–æ username –±–µ–∑ @
    try:
        test_text = "üîÅ –¢–µ—Å—Ç –æ—Ç –±–æ—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏. –ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ —ç—Ç–æ ‚Äî –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ."
        bot.send_message(normalized, test_text)
        return True, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.", str(normalized)
    except Exception as e:
        return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}", str(normalized)

# -------------------------
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ (–≤—Å–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π) -> —Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏
# -------------------------
def auto_forward_message_from(chat_id, message):
    """
    –ë–µ—Ä—ë—Ç —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –¥–ª—è chat_id –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Ç—É–¥–∞ –∫–æ–ø–∏–∏/—Ñ–æ—Ä–≤–∞—Ä–¥—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """
    results = []
    targets = data.get("forward_targets", {}).get(str(chat_id)) or []
    if not targets:
        return results
    for t in targets:
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∫–∞–∫ int
            try:
                tgt_int = int(t)
                bot.forward_message(tgt_int, int(chat_id), message.message_id)
                results.append((t, True, None))
            except Exception:
                bot.forward_message(t, int(chat_id), message.message_id)
                results.append((t, True, None))
        except Exception as e:
            # –µ—Å–ª–∏ forward_message –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä –∫–∞–Ω–∞–ª, –≥–¥–µ forward –∑–∞–ø—Ä–µ—â—ë–Ω),
            # –ø—Ä–æ–±—É–µ–º –ø–æ—Å–ª–∞—Ç—å –∫–æ–ø–∏—é (–µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç) –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
            try:
                if message.content_type == 'text' and getattr(message, "text", None):
                    bot.send_message(t, f"üì® –ö–æ–ø–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ {chat_id}:\n\n{message.text}")
                    results.append((t, True, "sent_copy"))
                else:
                    results.append((t, False, str(e)))
            except Exception as e2:
                results.append((t, False, str(e2)))
    # —Å–æ—Ö—Ä–∞–Ω–∏–º —Ñ–∞–∫—Ç –ø–æ–ø—ã—Ç–æ–∫
    for t, ok, info in results:
        data.setdefault("sent_messages", []).append({
            "timestamp": datetime.now(tz=ZoneInfo("UTC")).isoformat(),
            "from_chat": str(chat_id),
            "to": str(t),
            "ok": bool(ok),
            "info": info
        })
    save_data(data)
    return results

# -------------------------
# pending_actions: —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ (–∫–∞–∫ –±—ã–ª–æ)
# -------------------------
pending_actions = {}  # key: str(chat_id) -> { "type": "...", payload: {...} }

# -------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∞–º–∏ –¥–ª—è —á–∞—Ç–∞
# -------------------------
@bot.message_handler(commands=['addforward'])
def cmd_addforward(message):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
    –∏–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å @username / chat_id –≤ –æ—Ç–≤–µ—Ç.
    """
    chat_id = message.chat.id
    send_and_record(chat_id, "–ü–µ—Ä–µ—à–ª–∏ —Å—é–¥–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å chat_id/@username. –ù–∞–ø–∏—à–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã.", purpose="await_forward_input_cmd")
    pending_actions[str(chat_id)] = {"type": "await_forward_setup", "payload": {}}

@bot.message_handler(commands=['removeforward'])
def cmd_removeforward(message):
    chat_id = message.chat.id
    lst = list_forward_targets(chat_id)
    if not lst:
        send_and_record(chat_id, "–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.", purpose="remove_forward_noop")
        return
    # –ø–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫ –∏ –ø–æ–ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª—å —Ç–µ–∫—Å—Ç–æ–º
    send_and_record(chat_id, "–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–ª–µ–π:\n" + "\n".join(lst) + "\n\n–û—Ç–ø—Ä–∞–≤—å —Ç–æ—á–Ω—É—é —Ü–µ–ª—å (–∏–∑ —Å–ø–∏—Å–∫–∞) —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å, –∏–ª–∏ '–≤—Å—ë' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ.", purpose="await_remove_forward")
    pending_actions[str(chat_id)] = {"type": "await_remove_forward", "payload": {}}

@bot.message_handler(commands=['listforwards'])
def cmd_listforwards(message):
    chat_id = message.chat.id
    lst = list_forward_targets(chat_id)
    if not lst:
        send_and_record(chat_id, "–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.", purpose="list_forwards_empty")
    else:
        send_and_record(chat_id, "–¢–µ–∫—É—â–∏–µ —Ü–µ–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n" + "\n".join(lst), purpose="list_forwards")

# -------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –æ–∂–∏–¥–∞–Ω–∏—è) ‚Äî –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º auto_forward
# -------------------------
@bot.message_handler(func=lambda m: True, content_types=['text','photo','document','video','voice','audio','sticker','animation','contact','location'])
def handle_any_message(message):
    global data
    chat_id = message.chat.id
    # reload data to be sure
    data = load_data()

    # –µ—Å–ª–∏ –µ—Å—Ç—å pending action ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–π
    pa = pending_actions.get(str(chat_id))
    if pa:
        t = pa.get("type")
        if t == "await_forward_setup":
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–æ—à–ª–æ–π –ª–æ–≥–∏–∫–µ: –ø—Ä–∏–Ω—è—Ç—å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç
            target = None
            if getattr(message, "forward_from_chat", None):
                try:
                    target = str(message.forward_from_chat.id)
                except Exception:
                    target = None
            elif getattr(message, "forward_from", None):
                try:
                    target = str(message.forward_from.id)
                except Exception:
                    target = None
            elif message.content_type == 'text':
                txt = (message.text or "").strip()
                if txt.lower() == "–æ—Ç–º–µ–Ω–∞":
                    send_and_record(chat_id, "–û—Ç–º–µ–Ω–µ–Ω–æ.", purpose="forward_setup_cancel")
                    pending_actions.pop(str(chat_id), None)
                    return
                target = txt
            if not target:
                send_and_record(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª—å. –û—Ç–º–µ–Ω–µ–Ω–æ.", purpose="forward_setup_failed")
                pending_actions.pop(str(chat_id), None)
                return
            ok, msg, norm = validate_and_test_target(target)
            if ok:
                added = add_forward_target(chat_id, norm)
                if added:
                    send_and_record(chat_id, f"‚úÖ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {norm}", purpose="forward_added")
                else:
                    send_and_record(chat_id, f"‚ÑπÔ∏è –¶–µ–ª—å —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ: {norm}", purpose="forward_exists")
            else:
                send_and_record(chat_id, f"‚ùå {msg}", purpose="forward_test_failed")
            pending_actions.pop(str(chat_id), None)
            return

        if t == "await_remove_forward":
            if message.content_type == 'text':
                txt = (message.text or "").strip()
                if txt.lower() == '–≤—Å—ë' or txt.lower() == '–≤—Å–µ':
                    data["forward_targets"].pop(str(chat_id), None)
                    save_data(data)
                    send_and_record(chat_id, "‚úÖ –í—Å–µ —Ü–µ–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω—ã.", purpose="forward_removed_all")
                else:
                    removed = remove_forward_target(chat_id, txt)
                    if removed:
                        send_and_record(chat_id, f"‚úÖ –¶–µ–ª—å {txt} —É–¥–∞–ª–µ–Ω–∞.", purpose="forward_removed")
                    else:
                        send_and_record(chat_id, f"‚ùó –¶–µ–ª—å {txt} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", purpose="forward_remove_failed")
            else:
                send_and_record(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –æ—Ç–º–µ–Ω–µ–Ω–æ.", purpose="forward_remove_failed")
            pending_actions.pop(str(chat_id), None)
            return

    # 1) –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞: –µ—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –µ—Å—Ç—å —Ü–µ–ª–∏ ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
    try:
        auto_forward_message_from(chat_id, message)
    except Exception as e:
        print(f"[auto-forward] unexpected error: {e}")

    # 2) –î–∞–ª–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞ –∏ —Ç.–¥.
    # –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏: –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Å—é–¥–∞ —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –±—ã–ª–∞ –≤ 9.6.1/9.6.4:
    # - —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –µ—Å–ª–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç
    # - –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    # - –≤—ã–∑–æ–≤ update_day_window_after_change(chat_id, today, purpose=...)
    # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ –æ—Å—Ç–∞–≤—å —ç—Ç—É –ª–æ–≥–∏–∫—É –∫–∞–∫ –≤ –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏.
    # -------------------------
    # –ü—Ä–∏–º–µ—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏ (–µ—Å–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é)
    text = (message.text or "").strip() if message.content_type == 'text' else ""
    if message.content_type == 'text' and text:
        num, sign, raw = parse_first_number(text)
        if num is not None:
            amt_signed = apply_sign_and_normalize(num, sign)
            rec_id = data.get("next_id", 1)
            short = make_short_id(rec_id)
            ts = datetime.now(tz=ZoneInfo("UTC")).isoformat()
            rec = {
                "id": rec_id,
                "short_id": short,
                "timestamp": ts,
                "amount": amt_signed,
                "note": text[(text.find(raw)+len(raw)):].strip() if raw in text else "",
                "owner": str(chat_id)
            }
            data.setdefault("records", []).append(rec)
            data["next_id"] = rec_id + 1
            data["overall_balance"] = data.get("overall_balance", 0) + amt_signed
            save_data(data)
            # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞ ‚Äî –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ –±—É–¥–µ—Ç update_day_window_after_change
    # –µ—Å–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –Ω–æ –æ–∫–Ω–æ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ

# -------------------------
# Webhook (Flask)
# -------------------------
@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return '', 200

if __name__ == "__main__":
    # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ‚Äî —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
    try:
        if OWNER_ID:
            bot.send_message(OWNER_ID, "–ë–æ—Ç ‚Ññ9.6.5 –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤. –ü–µ—Ä–µ—Å—ã–ª–∫–∞: –≤–∫–ª—é—á–µ–Ω–∞.")
    except Exception:
        pass
    app.run(host="0.0.0.0", port=PORT)

# lines: 220