# ==========================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.8.6 ‚Äî –±–ª–æ–∫ 1/3
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –∑–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, —É—Ç–∏–ª–∏—Ç—ã
# ==========================

import os
import json
import csv
import time
import threading
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from telebot import types
from flask import Flask, request

# ---------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ----------
TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")
OWNER_ID = os.getenv("OWNER_ID")
PORT = int(os.getenv("PORT", 5000))
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
TZ = ZoneInfo("America/Argentina/Catamarca")
VERSION = "9.8.6"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# ---------- –õ–æ–≥–∏ ----------
def log_info(msg): print(f"[INFO] {msg}")
def log_error(msg): print(f"[ERROR] {msg}")

log_info(f"–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–µ—Ä—Å–∏—è {VERSION}")

# ---------- –î–∞–Ω–Ω—ã–µ ----------
def default_data():
    return {"overall_balance": 0, "records": [], "chats": {}, "active_messages": {}, "next_id": 1}

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {DATA_FILE}: {e}")
            d = default_data()
    else:
        d = default_data()
    # –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏
    base = default_data()
    for k, v in base.items():
        if k not in d:
            d[k] = v
    return d

def save_data(d=None):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d or data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

data = load_data()

# –î–æ–±–∞–≤–ª—è–µ–º OWNER_ID –≤ forward_targets (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
if OWNER_ID:
    try:
        oi = int(OWNER_ID)
        if oi not in data.get("forward_targets", []):
            data.setdefault("forward_targets", []).append(oi)
            save_data(data)
    except Exception as e:
        log_error(f"OWNER_ID –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω: {e}")

# ---------- –î–∞—Ç–∞ / —á–∞—Ç-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ ----------
def get_today_key(): return datetime.now(TZ).strftime("%Y-%m-%d")

def get_chat_store(chat_id):
    cid = str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid] = {
            "balance": 0, "records": [], "next_id": 1, "daily_records": {},
            "edit_wait": None, "edit_target": None,
            "awaiting_reset_confirm": False, "delete_confirm": None
        }
        save_data(data)
    return data["chats"][cid]

def get_today_active_window(chat_id):
    today = get_today_key()
    return data.setdefault("active_messages", {}).get(today, {}).get(str(chat_id))

def set_today_active_window(chat_id, message_id):
    today = get_today_key()
    data.setdefault("active_messages", {}).setdefault(today, {})[str(chat_id)] = message_id
    save_data(data)

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ –æ–∫–Ω–∞ ----------
def update_active_window(chat_id, text, kb=None):
    active_id = get_today_active_window(chat_id)
    kb = kb or build_main_keyboard(chat_id)
    if active_id:
        try:
            bot.edit_message_text(text, chat_id, active_id, reply_markup=kb)
            return
        except telebot.apihelper.ApiException:
            sent = bot.send_message(chat_id, text, reply_markup=kb)
            set_today_active_window(chat_id, sent.message_id)
            return
    else:
        sent = bot.send_message(chat_id, text, reply_markup=kb)
        set_today_active_window(chat_id, sent.message_id)
# ==========================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.8.6 ‚Äî –±–ª–æ–∫ 2/3
# –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø–∏—Å—è–º–∏, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞
# ==========================

# ---------- –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø–∏—Å—è–º–∏ ----------
def add_record_to_chat(chat_id, amount, note, owner):
    store = get_chat_store(chat_id)
    rid = data.get("next_id", 1)
    rec = {
        "id": rid, "short_id": f"R{rid}",
        "timestamp": datetime.now(TZ).isoformat(timespec="seconds"),
        "amount": amount, "note": note, "owner": owner, "deleted": False
    }
    data.setdefault("records", []).append(rec)
    store.setdefault("records", []).append(rec)
    day = get_today_key()
    store.setdefault("daily_records", {}).setdefault(day, []).append(rec)
    # –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –±–∞–ª–∞–Ω—Å
    store["balance"] = sum(r["amount"] for r in store.get("records", []) if not r.get("deleted", False))
    data["overall_balance"] = sum(r["amount"] for r in data.get("records", []) if not r.get("deleted", False))
    data["next_id"] = rid + 1
    save_data(data)
    try: export_to_csv(data)
    except Exception as e: log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV: {e}")
    return rec

def update_record_in_chat(chat_id, rid, new_amount, new_note):
    store = get_chat_store(chat_id)
    found = None
    for r in store.get("records", []):
        if r["id"] == rid:
            r["amount"], r["note"], r["deleted"] = new_amount, new_note, False
            found = r
            break
    if found:
        for day_recs in store.get("daily_records", {}).values():
            for r in day_recs:
                if r["id"] == rid: r.update(found)
        store["balance"] = sum(x["amount"] for x in store.get("records", []) if not x.get("deleted", False))
        data["overall_balance"] = sum(x["amount"] for x in data.get("records", []) if not x.get("deleted", False))
        save_data(data)
        try: export_to_csv(data)
        except: pass
        return True, found
    return False, None

def mark_deleted_record(chat_id, rid):
    store = get_chat_store(chat_id)
    removed = None
    for r in store.get("records", []):
        if r["id"] == rid:
            r["deleted"] = True
            removed = r
            break
    if removed:
        for day_recs in store.get("daily_records", {}).values():
            for r in day_recs:
                if r["id"] == rid: r["deleted"] = True
        store["balance"] = sum(x["amount"] for x in store.get("records", []) if not x.get("deleted", False))
        data["overall_balance"] = sum(x["amount"] for x in data.get("records", []) if not x.get("deleted", False))
        save_data(data)
        try: export_to_csv(data)
        except: pass
        return True, removed
    return False, None

def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["chat_id","ID","short_id","timestamp","amount","note","owner","day_key","deleted"])
            for cid, cdata in d.get("chats", {}).items():
                for day_key, records in cdata.get("daily_records", {}).items():
                    for r in records:
                        writer.writerow([cid, r.get("id"), r.get("short_id"), r.get("timestamp"), r.get("amount"), r.get("note"), r.get("owner"), day_key, r.get("deleted", False)])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def build_main_keyboard(chat_id=None, confirm_reset=False, replace_update_with_edit=True):
    kb = types.InlineKeyboardMarkup(row_width=3)
    kb.row(
        types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
        types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report"),
        types.InlineKeyboardButton("üìÇ CSV", callback_data="btn_csv")
    )
    if confirm_reset:
        kb.row(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_reset"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_reset")
        )
    else:
        kb.row(types.InlineKeyboardButton("‚öôÔ∏è –û–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="btn_reset"))
    if replace_update_with_edit:
        kb.row(
            types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="btn_edit_mode"),
            types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="btn_cod")
        )
    else:
        kb.row(
            types.InlineKeyboardButton("üöÄ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="btn_start"),
            types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="btn_cod")
        )
    balance_text = ""
    if chat_id is not None:
        store = get_chat_store(chat_id)
        balance_text = f"üí∞ {store.get('balance', 0)} ARS"
    kb.add(types.InlineKeyboardButton(balance_text or "üí∞ 0 ARS", callback_data="noop"))
    return kb

# ---------- –°–æ–∑–¥–∞–Ω–∏–µ / –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞ ----------
def update_or_send_today_window(chat_id, create_if_missing=True, show_info=False, edit_mode=False):
    today_key = get_today_key()
    store = get_chat_store(chat_id)
    day_records = store.get("daily_records", {}).get(today_key, [])

    if show_info:
        text = (
            f"‚ÑπÔ∏è –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è {VERSION}\n\n"
            "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start ‚Äî —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –æ–∫–Ω–æ\n"
            "/balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫\n"
            "/report ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å\n"
            "/csv ‚Äî —Å–∫–∞—á–∞—Ç—å CSV\n"
            "/reset ‚Äî –æ–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)\n"
            "/update ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –æ–∫–Ω–æ\n"
            "/info ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –æ–∫–Ω–æ\n\n"
            "üìù –ü—Ä–∏–º–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n"
            "+500 –ó–∞—Ä–ø–ª–∞—Ç–∞\n-150 –û–±–µ–¥\n200 –¢–∞–∫—Å–∏\n\n"
            "‚úèÔ∏è –ù–∞–∂–º–∏—Ç–µ ¬´–ò–∑–º–µ–Ω–∏—Ç—å¬ª —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å—è–º–∏."
        )
        kb = build_main_keyboard(chat_id, replace_update_with_edit=True)
    else:
        daily_income = sum(r["amount"] for r in day_records if r["amount"] > 0 and not r.get("deleted", False))
        daily_expense = sum(r["amount"] for r in day_records if r["amount"] < 0 and not r.get("deleted", False))
        overall_balance = store.get("balance", 0)

        if not day_records:
            text = (
                f"üìÖ {today_key}\n–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.\n"
                f"üíµ –ü—Ä–∏—Ö–æ–¥: {daily_income} ARS\n"
                f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(daily_expense)} ARS\n"
                f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS"
            )
            kb = build_main_keyboard(chat_id, replace_update_with_edit=True)
        else:
            lines = [f"üìÖ {today_key}", "üìã –û–ø–µ—Ä–∞—Ü–∏–∏:"]
            kb = types.InlineKeyboardMarkup()
            for r in day_records[-50:]:
                if r.get("deleted", False):
                    lines.append(f"{r['short_id']}: ‚ùå –£–¥–∞–ª–µ–Ω–æ ‚Äî {r.get('note','')}")
                else:
                    sign = "+" if r["amount"] > 0 else "-"
                    lines.append(f"{r['short_id']}: {sign}{abs(r['amount'])} ‚Äî {r.get('note','')}")
                    if edit_mode:
                        kb.row(
                            types.InlineKeyboardButton(f"‚úè {r['short_id']}", callback_data=f"edit_{r['id']}"),
                            types.InlineKeyboardButton(f"üóë {r['short_id']}", callback_data=f"delete_{r['id']}")
                        )
            lines.append(
                f"\nüíµ –ü—Ä–∏—Ö–æ–¥: {daily_income} ARS\n"
                f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(daily_expense)} ARS\n"
                f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS"
            )
            if edit_mode:
                kb.row(
                    types.InlineKeyboardButton("‚öôÔ∏è –û–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="btn_reset"),
                    types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="btn_back_from_edit")
                )
            else:
                kb.row(
                    types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
                    types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report"),
                    types.InlineKeyboardButton("üìÇ CSV", callback_data="btn_csv")
                )
                kb.row(
                    types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="btn_edit_mode"),
                    types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="btn_cod")
                )
            text = "\n".join(lines)

    update_active_window(chat_id, text, kb)
# ==========================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.8.6 ‚Äî –±–ª–æ–∫ 3/3
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫, —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–º–∞–Ω–¥—ã, webhook, –∑–∞–ø—É—Å–∫
# ==========================

import re
num_re = re.compile(r'([+-]?\s*\d+)')

# ---------- Callback handler ----------
@bot.callback_query_handler(func=lambda c: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    store = get_chat_store(chat_id)

    # -------- –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è --------
    if call.data == "btn_edit_mode":
        update_or_send_today_window(chat_id, edit_mode=True)
        bot.answer_callback_query(call.id, "–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç ‚úèÔ∏è")
        return

    if call.data.startswith("edit_"):
        rid = int(call.data.split("_")[1])
        rec = next((r for r in store.get("records", []) if r["id"]==rid), None)
        if not rec:
            bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        text = f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {rec['short_id']}:\n–¢–µ–∫—É—â–µ–µ: {rec['amount']} ‚Äî {rec.get('note','')}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∏ –∑–∞–º–µ—Ç–∫—É (–ø—Ä–∏–º–µ—Ä: +500 –ó–∞—Ä–ø–ª–∞—Ç–∞)"
        update_active_window(chat_id, text)
        store["edit_wait"] = "change_value"
        store["edit_target"] = rid
        save_data(data)
        bot.answer_callback_query(call.id)
        return

    if call.data.startswith("delete_"):
        rid = int(call.data.split("_")[1])
        store["delete_confirm"] = rid
        save_data(data)
        kb = types.InlineKeyboardMarkup()
        kb.row(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_delete"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_delete")
        )
        update_active_window(chat_id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å R{rid}?", kb)
        bot.answer_callback_query(call.id)
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    if call.data == "confirm_delete":
        rid = store.get("delete_confirm")
        if rid: mark_deleted_record(chat_id, rid)
        store["delete_confirm"] = None
        save_data(data)
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ ‚úÖ")
        return

    if call.data == "cancel_delete":
        store["delete_confirm"] = None
        save_data(data)
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå")
        return

    # -------- CSV --------
    if call.data == "btn_csv":
        try:
            with open(CSV_FILE, "rb") as f:
                bot.send_document(chat_id, f, caption="üìÇ –í–∞—à —Ñ–∞–π–ª data.csv")
            bot.answer_callback_query(call.id, "CSV –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üìÅ")
        except Exception as e:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}")
        return

    # -------- –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö --------
    if call.data == "btn_reset":
        kb = build_main_keyboard(chat_id, confirm_reset=True)
        update_active_window(chat_id, "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?", kb)
        store["awaiting_reset_confirm"] = True
        save_data(data)
        bot.answer_callback_query(call.id)
        return

    if call.data == "confirm_reset":
        if store.get("awaiting_reset_confirm"):
            store["records"] = []
            store["daily_records"] = {}
            store["balance"] = 0
            store["awaiting_reset_confirm"] = False
            save_data(data)
            update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã üßπ")
        return

    if call.data == "cancel_reset":
        store["awaiting_reset_confirm"] = False
        save_data(data)
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω ‚ùå")
        return

    # -------- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è --------
    if call.data == "btn_cod":
        update_or_send_today_window(chat_id, show_info=True)
        bot.answer_callback_query(call.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìÑ")
        return

    # -------- –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è --------
    if call.data == "btn_back_from_edit":
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–ù–∞–∑–∞–¥")
        return

    # -------- –ë–∞–ª–∞–Ω—Å / –û—Ç—á—ë—Ç / noop --------
    if call.data == "btn_balance":
        send_balance(chat_id)
        bot.answer_callback_query(call.id, "–ë–∞–ª–∞–Ω—Å –ø–æ–∫–∞–∑–∞–Ω ‚úÖ")
        return

    if call.data == "btn_report":
        send_report(chat_id)
        bot.answer_callback_query(call.id, "–û—Ç—á—ë—Ç –ø–æ–∫–∞–∑–∞–Ω üìä")
        return

    if call.data == "btn_start" or call.data == "noop":
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id)
        return

# ---------- –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ----------
@bot.message_handler(func=lambda m: True)
def handle_message(msg):
    if not msg.text: return
    chat_id = msg.chat.id
    store = get_chat_store(chat_id)
    wait_action = store.get("edit_wait")

    if wait_action == "change_value":
        rid = store.get("edit_target")
        try:
            raw, note = msg.text.strip().split(" ",1)
            if raw.startswith("+"): amount = int(raw[1:])
            elif raw.startswith("-"): amount = -int(raw[1:])
            else: amount = -int(raw)
            update_record_in_chat(chat_id, rid, amount, note)
            store["edit_wait"], store["edit_target"] = None, None
            save_data(data)
            update_or_send_today_window(chat_id)
            bot.send_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å R{rid} –∏–∑–º–µ–Ω–µ–Ω–∞")
        except:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: +500 –ó–∞—Ä–ø–ª–∞—Ç–∞")
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    m = num_re.search(msg.text)
    if m:
        raw = m.group(1).replace(" ","")
        if raw.startswith("+"): amount = int(raw[1:])
        elif raw.startswith("-"): amount = -int(raw[1:])
        else: amount = -int(raw)
        note = msg.text.replace(m.group(1),"").strip()
        add_record_to_chat(chat_id, amount, note, msg.from_user.id)
        update_or_send_today_window(chat_id)

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------
def send_balance(chat_id):
    store = get_chat_store(chat_id)
    today_key = get_today_key()
    day_records = store.get("daily_records", {}).get(today_key, [])
    daily_income = sum(r["amount"] for r in day_records if r["amount"] > 0 and not r.get("deleted", False))
    daily_expense = sum(r["amount"] for r in day_records if r["amount"] < 0 and not r.get("deleted", False))
    overall_balance = store.get("balance", 0)
    text = f"üìÖ {today_key}\nüí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS\nüíµ –ü—Ä–∏—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {daily_income} ARS\nüí∏ –†–∞—Å—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {abs(daily_expense)} ARS"
    update_active_window(chat_id, text)

def send_report(chat_id):
    store = get_chat_store(chat_id)
    today_key = get_today_key()
    day_records = store.get("daily_records", {}).get(today_key, [])
    expenses = [r for r in day_records if r["amount"] < 0 and not r.get("deleted", False)]
    if not expenses:
        text = f"üìÖ {today_key}\n–ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\nüí∏ –†–∞—Å—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å: 0 ARS"
    else:
        lines = [f"üìÖ {today_key}", "üìã –†–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å:"]
        for r in expenses[-30:]:
            lines.append(f"{r['short_id']}: -{abs(r['amount'])} ‚Äî {r.get('note','')}")
        total = sum(abs(r["amount"]) for r in expenses)
        lines.append(f"\nüí∏ –†–∞—Å—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å: {total} ARS")
        text = "\n".join(lines)
    update_active_window(chat_id, text)

def send_csv(chat_id):
    try:
        with open(CSV_FILE, "rb") as f:
            bot.send_document(chat_id, f, caption="üìÇ –í–∞—à —Ñ–∞–π–ª data.csv")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CSV: {e}")

# ---------- Slash-–∫–æ–º–∞–Ω–¥—ã ----------
@bot.message_handler(commands=["start"])
def cmd_start(msg): update_or_send_today_window(msg.chat.id)

@bot.message_handler(commands=["balance"])
def cmd_balance(msg): send_balance(msg.chat.id)

@bot.message_handler(commands=["report"])
def cmd_report(msg): send_report(msg.chat.id)

@bot.message_handler(commands=["csv"])
def cmd_csv(msg): send_csv(msg.chat.id)

@bot.message_handler(commands=["reset"])
def cmd_reset(msg):
    kb = build_main_keyboard(msg.chat.id, confirm_reset=True)
    update_active_window(msg.chat.id, "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?", kb)
    store = get_chat_store(msg.chat.id)
    store["awaiting_reset_confirm"] = True
    save_data(data)

@bot.message_handler(commands=["update"])
def cmd_update(msg): update_or_send_today_window(msg.chat.id)

@bot.message_handler(commands=["info"])
def cmd_info(msg): update_or_send_today_window(msg.chat.id, show_info=True)

# ---------- Webhook / Flask ----------
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def index(): return f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è {VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

def set_webhook():
    if not APP_URL: return
    url = f"{APP_URL}/{TOKEN}"
    try:
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url=url)
        log_info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")
    except Exception as e: log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

def schedule_daily_window_creation():
    def task():
        last_day = get_today_key()
        while True:
            try:
                time.sleep(60)
                current_day = get_today_key()
                if current_day != last_day:
                    for cid in list(data.get("chats", {}).keys()):
                        try: update_or_send_today_window(int(cid))
                        except Exception as e: log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞ –Ω–æ–≤–æ–≥–æ –¥–Ω—è –¥–ª—è {cid}: {e}")
                    last_day = current_day
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
    threading.Thread(target=task, daemon=True).start()

if __name__ == "__main__":
    set_webhook()
    schedule_daily_window_creation()
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
