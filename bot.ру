import telebot
from telebot import types
import json
import os
from datetime import date

# üîπ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω —Å—é–¥–∞ (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TOKEN = os.getenv("BOT_TOKEN") or "–í–°–¢–ê–í–¨_–°–í–û–ô_–¢–û–ö–ï–ù_–°–Æ–î–ê"

bot = telebot.TeleBot(TOKEN)

DATA_FILE = "finance_data.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        finance_data = json.load(f)
else:
    finance_data = {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(finance_data, f, ensure_ascii=False, indent=2)

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
def today():
    return str(date.today())

# –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_summary(user_id):
    user_id = str(user_id)
    user_data = finance_data.get(user_id, {})
    all_time = sum([sum(d.values()) for d in user_data.values()]) if user_data else 0

    today_data = user_data.get(today(), {"income": 0, "expense": 0})
    income = today_data.get("income", 0)
    expense = today_data.get("expense", 0)

    text = (
        f"üìÖ <b>{today()}</b>\n"
        f"üí∏ –ü—Ä–∏—Ö–æ–¥ –¥–Ω—è: <b>{income:.2f}</b>\n"
        f"üí∞ –†–∞—Å—Ö–æ–¥ –¥–Ω—è: <b>{abs(expense):.2f}</b>\n"
        f"üìä –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: <b>{all_time:.2f}</b>"
    )
    return text

# –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def get_keyboard():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ –¥–Ω—è", callback_data="edit_day"))
    return kb

@bot.message_handler(commands=["start"])
def start(message):
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1000—Ö–ª–µ–± –∏–ª–∏ +500 –∑–ø), —è –ø–æ—Å—á–∏—Ç–∞—é —Ç–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã.")

@bot.message_handler(func=lambda msg: True)
def handle_message(message):
    user_id = str(message.from_user.id)
    text = message.text.strip()

    # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ
    num_str = ""
    for ch in text:
        if ch in "+-0123456789.":
            num_str += ch
        else:
            break

    try:
        number = float(num_str)
    except:
        return  # –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in finance_data:
        finance_data[user_id] = {}
    if today() not in finance_data[user_id]:
        finance_data[user_id][today()] = {"income": 0, "expense": 0}

    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
    if number >= 0:
        finance_data[user_id][today()]["income"] += number
    else:
        finance_data[user_id][today()]["expense"] += number

    save_data()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞
    summary_text = get_summary(user_id)
    sent = bot.send_message(message.chat.id, summary_text, parse_mode="HTML", reply_markup=get_keyboard())

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ)
    finance_data[user_id][today()]["last_msg"] = sent.message_id
    save_data()

    # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ
    try:
        old_id = finance_data[user_id][today()].get("prev_msg")
        if old_id:
            bot.delete_message(message.chat.id, old_id)
        finance_data[user_id][today()]["prev_msg"] = sent.message_id
        save_data()
    except:
        pass

@bot.callback_query_handler(func=lambda call: call.data == "edit_day")
def edit_day(call):
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "‚úèÔ∏è –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling(non_stop=True)
