# ============================================
# Финансовый бот — версия 9.8.6
# Полная версия (Flask + Webhook)
# ============================================

import os
import json
import csv
import logging
import re
import threading
import time
from datetime import datetime
from zoneinfo import ZoneInfo
import telebot
from flask import Flask, request
from telebot import types

# -----------------------------
# ОТСЕК 1 — Настройки
# -----------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
APP_URL = os.getenv("APP_URL", "https://yourapp.onrender.com")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.8.6"

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -----------------------------
# ОТСЕК 2 — Логирование
# -----------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[logging.FileHandler(LOG_FILE, encoding="utf-8"), logging.StreamHandler()]
)

def log_info(msg): logging.info(msg)
def log_error(msg): logging.error(msg)

# -----------------------------
# ОТСЕК 3 — Хранилище
# -----------------------------
def default_data():
    return {"chats": {}, "records": [], "next_id": 1, "overall_balance": 0, "active_messages": {}}

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            try: return json.load(f)
            except: return default_data()
    return default_data()

def save_data(d):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

data = load_data()

def get_today_key(): return datetime.now(TZ).strftime("%Y-%m-%d")

def get_chat_store(chat_id):
    cid = str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid] = {"balance": 0, "records": [], "daily_records": {}, "edit_wait": None, "edit_target": None}
    return data["chats"][cid]

# -----------------------------
# ОТСЕК 4 — CSV экспорт
# -----------------------------
def export_to_csv():
    try:
        with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
            w = csv.writer(f)
            w.writerow(["chat_id","id","timestamp","amount","note"])
            for cid, cdata in data["chats"].items():
                for rec in cdata.get("records", []):
                    w.writerow([cid, rec["id"], rec["timestamp"], rec["amount"], rec["note"]])
    except Exception as e:
        log_error(f"CSV error: {e}")

# -----------------------------
# ОТСЕК 5 — Добавление / Изменение / Удаление
# -----------------------------
def add_record(chat_id, amount, note, owner):
    store = get_chat_store(chat_id)
    rid = data["next_id"]
    rec = {"id": rid, "timestamp": datetime.now(TZ).isoformat(timespec="seconds"),
           "amount": amount, "note": note, "owner": owner}
    store["records"].append(rec)
    data["records"].append(rec)
    store["balance"] += amount
    data["overall_balance"] = sum(r["amount"] for r in data["records"])
    data["next_id"] += 1
    save_data(data); export_to_csv()

def update_record(chat_id, rid, amount, note):
    store = get_chat_store(chat_id)
    for r in store["records"]:
        if r["id"] == rid:
            store["balance"] -= r["amount"]
            r["amount"], r["note"] = amount, note
            store["balance"] += amount
            save_data(data); export_to_csv()
            return True
    return False

def delete_record(chat_id, rid):
    store = get_chat_store(chat_id)
    for r in store["records"]:
        if r["id"] == rid:
            r["note"] = "удалено"
            r["amount"] = 0
            save_data(data); export_to_csv()
            return True
    return False

# -----------------------------
# ОТСЕК 6 — Клавиатуры
# -----------------------------
def build_main_keyboard(chat_id, confirm_reset=False):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.row(types.InlineKeyboardButton("💰 Баланс", callback_data="balance"),
           types.InlineKeyboardButton("📊 Отчёт", callback_data="report"))
    kb.row(types.InlineKeyboardButton("✏️ Изменить", callback_data="edit_mode"),
           types.InlineKeyboardButton("ℹ️ Инфо", callback_data="info"))
    if confirm_reset:
        kb.row(types.InlineKeyboardButton("✅ Да", callback_data="reset_confirm"),
               types.InlineKeyboardButton("❌ Нет", callback_data="reset_cancel"))
    else:
        kb.row(types.InlineKeyboardButton("⚙️ Обнулить", callback_data="reset_request"))
    return kb

def build_edit_list(chat_id):
    store = get_chat_store(chat_id)
    kb = types.InlineKeyboardMarkup(row_width=2)
    for r in store["records"][-10:]:
        kb.row(
            types.InlineKeyboardButton(f"#{r['id']} {r['note']} ({r['amount']})", callback_data=f"noop"),
            types.InlineKeyboardButton("✏", callback_data=f"edit_{r['id']}"),
            types.InlineKeyboardButton("🗑", callback_data=f"del_{r['id']}")
        )
    kb.row(types.InlineKeyboardButton("🔙 Назад", callback_data="back_main"))
    return kb

# -----------------------------
# ОТСЕК 7 — Основное окно
# -----------------------------
def update_window(chat_id):
    store = get_chat_store(chat_id)
    today = get_today_key()
    recs = store["records"]
    inc = sum(r["amount"] for r in recs if r["amount"] > 0)
    exp = sum(abs(r["amount"]) for r in recs if r["amount"] < 0)
    text = f"📅 {today}\n💵 Приход: {inc}\n💸 Расход: {exp}\n💰 Остаток: {store['balance']} ARS"
    kb = build_main_keyboard(chat_id)
    active_id = data["active_messages"].get(str(chat_id))
    if active_id:
        try:
            bot.edit_message_text(text, chat_id, active_id, reply_markup=kb)
            return
        except: pass
    msg = bot.send_message(chat_id, text, reply_markup=kb)
    data["active_messages"][str(chat_id)] = msg.message_id
    save_data(data)

# -----------------------------
# ОТСЕК 8 — Callback обработчик
# -----------------------------
@bot.callback_query_handler(func=lambda c: True)
def callbacks(call):
    chat_id = call.message.chat.id
    data["active_messages"][str(chat_id)] = call.message.message_id

    if call.data == "balance":
        update_window(chat_id)
        bot.answer_callback_query(call.id, "Баланс обновлён ✅")

    elif call.data == "report":
        store = get_chat_store(chat_id)
        recs = [r for r in store["records"] if r["amount"] < 0]
        text = "📊 Расходы:\n" + "\n".join([f"{r['id']}: {r['note']} ({r['amount']})" for r in recs]) if recs else "Нет расходов"
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=build_main_keyboard(chat_id))
        bot.answer_callback_query(call.id)

    elif call.data == "info":
        info_text = (
            f"ℹ️ Финансовый бот — версия {VERSION}\n\n"
            "Команды:\n/start — создать окно\n"
            "💰 Баланс, 📊 Отчёт, ✏ Изменить, ⚙️ Обнулить.\n\n"
            "Добавляйте записи прямо сообщениями: +500 зарплата, -200 еда."
        )
        bot.edit_message_text(info_text, chat_id, call.message.message_id, reply_markup=build_main_keyboard(chat_id))
        bot.answer_callback_query(call.id)

    elif call.data == "edit_mode":
        kb = build_edit_list(chat_id)
        bot.edit_message_text("✏ Выберите запись:", chat_id, call.message.message_id, reply_markup=kb)
        bot.answer_callback_query(call.id)

    elif call.data.startswith("edit_"):
        rid = int(call.data.split("_")[1])
        store = get_chat_store(chat_id)
        store["edit_wait"] = "change_value"
        store["edit_target"] = rid
        bot.answer_callback_query(call.id, f"Изменение #{rid}")
        bot.send_message(chat_id, f"Введите новую сумму и заметку для записи {rid}:")

    elif call.data.startswith("del_"):
        rid = int(call.data.split("_")[1])
        bot.edit_message_reply_markup(chat_id, call.message.message_id,
                                      reply_markup=types.InlineKeyboardMarkup(row_width=2).row(
                                          types.InlineKeyboardButton("✅ Да", callback_data=f"del_confirm_{rid}"),
                                          types.InlineKeyboardButton("❌ Нет", callback_data="edit_mode")))
        bot.answer_callback_query(call.id, f"Подтвердите удаление #{rid}")

    elif call.data.startswith("del_confirm_"):
        rid = int(call.data.split("_")[2])
        delete_record(chat_id, rid)
        bot.answer_callback_query(call.id, f"Запись #{rid} удалена")
        update_window(chat_id)

    elif call.data == "reset_request":
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=build_main_keyboard(chat_id, confirm_reset=True))
        bot.answer_callback_query(call.id)

    elif call.data == "reset_confirm":
        data["chats"][str(chat_id)] = {"balance": 0, "records": []}
        save_data(data)
        update_window(chat_id)
        bot.answer_callback_query(call.id, "Данные обнулены ✅")

    elif call.data == "reset_cancel" or call.data == "back_main":
        update_window(chat_id)
        bot.answer_callback_query(call.id)

# -----------------------------
# ОТСЕК 9 — Сообщения (добавление)
# -----------------------------
num_re = re.compile(r'([+-]?\d+)')

@bot.message_handler(func=lambda m: True)
def handle_message(msg):
    if not msg.text: return
    chat_id = msg.chat.id
    store = get_chat_store(chat_id)

    if store.get("edit_wait") == "change_value":
        rid = store["edit_target"]
        parts = msg.text.strip().split(" ", 1)
        try:
            amount = int(parts[0])
            note = parts[1] if len(parts) > 1 else ""
            update_record(chat_id, rid, amount, note)
            store["edit_wait"] = None
            update_window(chat_id)
            bot.send_message(chat_id, f"✅ Запись #{rid} изменена")
        except:
            bot.send_message(chat_id, "Ошибка ввода.")
        return

    m = num_re.search(msg.text)
    if not m: return
    raw = m.group(1)
    amount = int(raw)
    note = msg.text.replace(raw, "").strip()
    add_record(chat_id, amount, note, msg.from_user.id)
    update_window(chat_id)

# -----------------------------
# ОТСЕК 10 — Flask + запуск
# -----------------------------
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    bot.process_new_updates([telebot.types.Update.de_json(request.get_data().decode("utf-8"))])
    return "ok", 200

@app.route("/", methods=["GET"])
def index():
    return f"Финансовый бот v{VERSION} работает", 200

def set_webhook():
    url = f"{APP_URL}/{TOKEN}"
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url)

if __name__ == "__main__":
    set_webhook()
    app.run(host="0.0.0.0", port=PORT)