# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.8.3 + –ø–µ—Ä–µ—Å—ã–ª–∫–∞
# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ–¥–Ω–∏–º –æ–∫–Ω–æ–º, CSV, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π
# ID: Code_012
# ============================================

# -----------------------------
# –û–¢–°–ï–ö 1 ‚Äî –ò–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------------
import os
import json
import csv
import logging
import re
from datetime import datetime
from zoneinfo import ZoneInfo
from threading import Thread
from time import sleep

import telebot
from telebot import types
from flask import Flask, request

TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID", 0))
APP_URL = os.getenv("APP_URL", "https://yourapp.onrender.com")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.8.3"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -----------------------------
# –û–¢–°–ï–ö 2 ‚Äî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[logging.FileHandler(LOG_FILE, encoding="utf-8"), logging.StreamHandler()]
)

def log_info(msg):
    logging.info(msg)

def log_error(msg):
    logging.error(msg)

log_info(f"–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–µ—Ä—Å–∏—è {VERSION}")

# -----------------------------
# –û–¢–°–ï–ö 3 ‚Äî –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ IO
# -----------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "chats": {},
        "active_messages": {},
        "processed_messages": [],
        "forward_targets": [],
        "next_id": 1
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except:
            d = default_data()
    else:
        d = default_data()
    base = default_data()
    for k, v in base.items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

data = load_data()

if OWNER_ID and OWNER_ID not in data["forward_targets"]:
    data["forward_targets"].append(OWNER_ID)
    save_data(data)

# -----------------------------
# –û–¢–°–ï–ö 4 ‚Äî –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------
def get_today_key():
    return datetime.now(TZ).strftime("%Y-%m-%d")

def get_chat_store(chat_id):
    cid = str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid] = {"balance": 0, "records": [], "next_id": 1, "daily_records": {}, "active_windows": {}, "edit_wait": None, "edit_target": None}
        save_data(data)
    return data["chats"][cid]

def get_today_active_window(chat_id):
    today = get_today_key()
    return data.get("active_messages", {}).get(today, {}).get(str(chat_id))

def set_today_active_window(chat_id, message_id):
    today = get_today_key()
    if "active_messages" not in data:
        data["active_messages"] = {}
    if today not in data["active_messages"]:
        data["active_messages"][today] = {}
    data["active_messages"][today][str(chat_id)] = message_id
    save_data(data)
# -----------------------------
# –û–¢–°–ï–ö 5 ‚Äî –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø–∏—Å—è–º–∏
# -----------------------------
def add_record_to_chat(chat_id, amount, note, owner):
    store = get_chat_store(chat_id)
    rid = data.get("next_id", 1)
    rec = {"id": rid, "short_id": f"R{rid}", "timestamp": datetime.now(TZ).isoformat(timespec="seconds"), "amount": amount, "note": note, "owner": owner}
    data.setdefault("records", []).append(rec)
    store.setdefault("records", []).append(rec)
    day = get_today_key()
    store.setdefault("daily_records", {}).setdefault(day, []).append(rec)
    store["balance"] = store.get("balance", 0) + amount
    data["overall_balance"] = data.get("overall_balance", 0) + amount
    data["next_id"] = rid + 1
    save_data(data)
    try:
        export_to_csv(data)
    except:
        pass
    return rec

def update_record_in_chat(chat_id, rid, new_amount, new_note):
    store = get_chat_store(chat_id)
    found = None
    for r in store.get("records", []):
        if r["id"] == rid:
            r["amount"] = new_amount
            r["note"] = new_note
            found = r
            break
    if found:
        for day_recs in store.get("daily_records", {}).values():
            for r in day_recs:
                if r["id"] == rid:
                    r.update(found)
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data(data)
        export_to_csv(data)
        return True, found
    return False, None

def delete_record_in_chat(chat_id, rid):
    store = get_chat_store(chat_id)
    removed = None
    for r in list(store.get("records", [])):
        if r["id"] == rid or str(r["id"]) == str(rid) or r.get("short_id") == f"R{rid}":
            removed = r
            store["records"].remove(r)
            break
    if removed:
        for day_key, recs in store.get("daily_records", {}).items():
            store["daily_records"][day_key] = [x for x in recs if x["id"] != rid]
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        data["records"] = [x for x in data.get("records", []) if x["id"] != rid]
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data(data)
        export_to_csv(data)
        return True, removed
    return False, None

def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["chat_id","ID","short_id","timestamp","amount","note","owner","day_key"])
            for cid, cdata in d.get("chats", {}).items():
                for day_key, records in cdata.get("daily_records", {}).items():
                    for r in records:
                        writer.writerow([cid, r.get("id"), r.get("short_id"), r.get("timestamp"), r.get("amount"), r.get("note"), r.get("owner"), day_key])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")

# -----------------------------
# –û–¢–°–ï–ö 6 ‚Äî –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -----------------------------
def build_main_keyboard(chat_id=None, confirm_reset=False):
    kb = types.InlineKeyboardMarkup(row_width=3)
    kb.row(
        types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
        types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report"),
        types.InlineKeyboardButton("üìÇ CSV", callback_data="btn_csv")
    )
    kb.row(types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="btn_edit_list"))
    if confirm_reset:
        kb.row(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_reset"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_reset")
        )
    else:
        kb.row(types.InlineKeyboardButton("‚öôÔ∏è –û–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="btn_reset"))
    kb.row(
        types.InlineKeyboardButton("üöÄ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="btn_start"),
        types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="btn_cod")
    )
    balance_text = ""
    if chat_id is not None:
        store = get_chat_store(chat_id)
        balance_text = f"üí∞ {store.get('balance', 0)} ARS"
    kb.add(types.InlineKeyboardButton(balance_text or "üí∞ 0 ARS", callback_data="noop"))
    kb.row(types.InlineKeyboardButton("üéØ –õ–∏—Å—Ç —Ü–µ–ª–µ–π", callback_data="btn_forward_list"))
    return kb

def build_edit_keyboard_for_record(rid):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.row(
        types.InlineKeyboardButton("‚úè –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_change_{rid}"),
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"edit_delete_{rid}")
    )
    kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_back_to_list"))
    return kb

def build_confirm_delete_keyboard(rid):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.row(types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{rid}"),
           types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete"))
    return kb

def build_forward_targets_keyboard():
    kb = types.InlineKeyboardMarkup(row_width=1)
    for tid in data.get("forward_targets", []):
        kb.add(types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {tid}", callback_data=f"del_target_{tid}"))
    kb.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π", callback_data="add_target"))
    kb.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb
# -----------------------------
# –û–¢–°–ï–ö 7 ‚Äî –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# -----------------------------
num_re = re.compile(r'([+-]?\s*\d+)')

def forward_message_to_targets(msg):
    for tid in data.get("forward_targets", []):
        try:
            text = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {msg.from_user.first_name} ({msg.from_user.id}) –≤ —á–∞—Ç–µ {msg.chat.id}:\n{msg.text or ''}"
            bot.send_message(tid, text)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {tid}: {e}")

@bot.message_handler(func=lambda m: True)
def handle_message(msg):
    chat_id = msg.chat.id
    store = get_chat_store(chat_id)
    wait_action = store.get("edit_wait")

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ä–∞–∑—É
    if msg.from_user.id != OWNER_ID:
        forward_message_to_targets(msg)

    # --- —Å—Ç–∞—Ä—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π ---
    if wait_action == "change_value":
        rid = store.get("edit_target")
        if not rid:
            store["edit_wait"] = None
            store["edit_target"] = None
            save_data(data)
            return
        parts = msg.text.strip().split(" ", 1)
        try:
            raw_amount = parts[0].replace(" ", "")
            if raw_amount.startswith("+"):
                amount = int(raw_amount[1:])
            elif raw_amount.startswith("-"):
                amount = -int(raw_amount[1:])
            else:
                amount = -int(raw_amount)
            note = parts[1] if len(parts) > 1 else ""
            success, _ = update_record_in_chat(chat_id, rid, amount, note)
            store["edit_wait"] = None
            store["edit_target"] = None
            save_data(data)
            bot.send_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å R{rid} {'–∏–∑–º–µ–Ω–µ–Ω–∞' if success else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}")
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +500 –ó–∞—Ä–ø–ª–∞—Ç–∞ –∏–ª–∏ -150 –û–±–µ–¥")
        return

    if wait_action is None and msg.text:
        m = num_re.search(msg.text)
        if m:
            try:
                raw = m.group(1).replace(" ", "")
                if raw.startswith("+"):
                    amount = int(raw[1:])
                elif raw.startswith("-"):
                    amount = -int(raw[1:])
                else:
                    amount = -int(raw)
                note = msg.text.replace(m.group(1), "").strip()
                add_record_to_chat(chat_id, amount, note, msg.from_user.id)
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        return

# -----------------------------
# –û–¢–°–ï–ö 8 ‚Äî –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π
# -----------------------------
@bot.message_handler(commands=["forward_list"])
def cmd_forward_list(msg):
    text = "üéØ –¶–µ–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n"
    for tid in data.get("forward_targets", []):
        text += f"- {tid}\n"
    bot.send_message(msg.chat.id, text or "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")

@bot.message_handler(commands=["forward_add"])
def cmd_forward_add(msg):
    parts = msg.text.strip().split(" ")
    if len(parts) < 2:
        bot.send_message(msg.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /forward_add <chat_id>")
        return
    try:
        tid = int(parts[1])
        if tid not in data.get("forward_targets", []):
            data["forward_targets"].append(tid)
            save_data(data)
            bot.send_message(msg.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {tid}")
        else:
            bot.send_message(msg.chat.id, f"{tid} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ")
    except Exception as e:
        bot.send_message(msg.chat.id, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=["forward_remove"])
def cmd_forward_remove(msg):
    parts = msg.text.strip().split(" ")
    if len(parts) < 2:
        bot.send_message(msg.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /forward_remove <chat_id>")
        return
    try:
        tid = int(parts[1])
        if tid in data.get("forward_targets", []):
            data["forward_targets"].remove(tid)
            save_data(data)
            bot.send_message(msg.chat.id, f"‚ùå –£–¥–∞–ª–µ–Ω–æ {tid}")
        else:
            bot.send_message(msg.chat.id, f"{tid} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
    except Exception as e:
        bot.send_message(msg.chat.id, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=["chat_id"])
def cmd_chat_id(msg):
    bot.send_message(msg.chat.id, f"–í–∞—à chat_id: {msg.chat.id}")

# -----------------------------
# –û–¢–°–ï–ö 9 ‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -----------------------------
def start_bot():
    log_info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling(timeout=60, long_polling_timeout=60)

if __name__ == "__main__":
    Thread(target=start_bot).start()