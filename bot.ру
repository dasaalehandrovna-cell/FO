# –ö–æ–¥ –±–æ—Ç–∞ ‚Ññ5 ‚Äî —Ñ–∞–π–ª bot.—Ä—É
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç (webhook + Flask) ‚Äî Render + UptimeRobot
# –¢—Ä–µ–±—É–µ—Ç –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏: BOT_TOKEN (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), OWNER_ID (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è), TZ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ data.json

import os
import re
import io
import csv
import json
import time
import threading
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

import telebot
from telebot import types
from flask import Flask, request

# -------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# -------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID", "8107562890")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–≤–æ–π ID
TZ_NAME = os.getenv("TZ", "America/Argentina/Buenos_Aires")
WEBHOOK_BASE = os.getenv("WEBHOOK_BASE", "https://fo-1.onrender.com")  # —Ç–≤–æ–π Render-–¥–æ–º–µ–Ω
PORT = int(os.environ.get("PORT", 5000))
DATA_FILE = "data.json"
PING_NOTIFY_DELETE_AFTER = 10  # —Å–µ–∫
DAY_CHECK_INTERVAL = 30  # —Å–µ–∫, –∫–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –¥–Ω—è
PAGE_SIZE = 8  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –º–µ–Ω—é

if not TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

try:
    TZ = ZoneInfo(TZ_NAME)
except Exception:
    TZ = ZoneInfo("UTC")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# -------------------------
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (data.json)
# {
#   "overall_balance": int,
#   "next_id": int,
#   "records": [ { "id":int, "timestamp": iso_utc, "amount": int, "note": str, "owner": str } , ... ],
#   "active_messages": { "<chat_id>": { "YYYY-MM-DD": { "chat_id": int, "message_id": int } } }
# }
# -------------------------

def default_data():
    return {"overall_balance": 0, "next_id": 1, "records": [], "active_messages": {}}

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è data.json:", e)
            return default_data()
    return default_data()

def save_data(d):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

data = load_data()

# -------------------------
# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —á–∏—Å–µ–ª/—Ñ–æ—Ä–º–∞—Ç–æ–≤
# -------------------------
NUMBER_RE = re.compile(r'([+-]?\s*[\d][\d\s\.,]*)')

def parse_first_number(text):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (num:int, sign:str, raw_match:str) –∏–ª–∏ (None,None,None)
    sign: '+' | '-' | '' (empty means treat as expense per rule)
    """
    if not text:
        return None, None, None
    m = NUMBER_RE.search(text)
    if not m:
        return None, None, None
    raw = m.group(1)
    s = raw.strip()
    if s.startswith('+'):
        sign = '+'
        part = s[1:].strip()
    elif s.startswith('-'):
        sign = '-'
        part = s[1:].strip()
    else:
        sign = ''
        part = s
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã, —Ç–æ—á–∫–∏ –∏ –∑–∞–ø—è—Ç—ã–µ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á
    digits = re.sub(r'[\s\.,]', '', part)
    dmatch = re.match(r'(\d+)', digits)
    if not dmatch:
        return None, None, None
    num = int(dmatch.group(1))
    return num, sign, raw

def apply_sign(num, sign):
    # '+' -> positive; '-' or '' -> expense (negative)
    return num if sign == '+' else -num

def fmt(n):
    return f"{abs(n):,}".replace(",", ".")

# -------------------------
# –í—Ä–µ–º—è/–¥–∞—Ç—ã
# -------------------------
def utc_now_iso():
    return datetime.utcnow().isoformat()

def local_dt_from_iso(iso_ts):
    return datetime.fromisoformat(iso_ts).astimezone(TZ)

def local_date_str_from_iso(iso_ts):
    return local_dt_from_iso(iso_ts).strftime("%Y-%m-%d")

def local_time_str_from_iso(iso_ts):
    return local_dt_from_iso(iso_ts).strftime("%H:%M")

def today_local_date_str():
    return datetime.now(tz=TZ).strftime("%Y-%m-%d")

# -------------------------
# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∑–∂–µ
# -------------------------
def delete_message_later(chat_id, message_id, delay=10):
    def worker():
        time.sleep(delay)
        try:
            bot.delete_message(chat_id, message_id)
        except Exception:
            pass
    threading.Thread(target=worker, daemon=True).start()

# -------------------------
# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–∫–Ω–∞ –¥–Ω—è
# -------------------------
def build_day_window_text(chat_id, day_date):
    # —Å–æ–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∑–∞ day_date (–ª–æ–∫–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞)
    recs = []
    for r in data["records"]:
        if str(r.get("owner")) != str(chat_id):
            continue
        if local_date_str_from_iso(r["timestamp"]) == day_date:
            recs.append(r)
    recs.sort(key=lambda x: x["timestamp"])
    header = f"üìÖ {day_date}\n"
    if not recs:
        return header + "\n(–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.)"
    lines = [header]
    last_hour = None
    day_inc = 0
    day_exp = 0
    for r in recs:
        t = local_time_str_from_iso(r["timestamp"])
        amt = r["amount"]
        sign = "+" if amt > 0 else "-"
        note = r.get("note", "")
        hour = t.split(":")[0]
        if last_hour is None:
            last_hour = hour
        elif hour != last_hour:
            lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Å–∞
            last_hour = hour
        lines.append(f"üïì {t} {sign}{fmt(amt)} {note}".rstrip())
        if amt > 0:
            day_inc += amt
        else:
            day_exp += abs(amt)
    overall = data.get("overall_balance", 0)
    lines.append("")
    lines.append(f"üìà –ü—Ä–∏—Ö–æ–¥ –¥–Ω—è: {fmt(day_inc)}")
    lines.append(f"üìâ –†–∞—Å—Ö–æ–¥ –¥–Ω—è: {fmt(day_exp)}")
    lines.append(f"üíµ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {fmt(overall)}")
    return "\n".join(lines)

# -------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -------------------------
def day_keyboard():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_menu"))
    kb.add(types.InlineKeyboardButton("–≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="export_csv"))
    return kb

def edit_menu_kb():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_modify"),
           types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="edit_delete"))
    kb.add(types.InlineKeyboardButton("üîÑ –û–±–Ω—É–ª–∏—Ç—å –≤—Å—ë", callback_data="edit_reset_all"))
    kb.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="edit_cancel"))
    return kb

def yes_no_kb(prefix):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"{prefix}_yes"),
           types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"{prefix}_no"))
    return kb

def make_records_page_kb(chat_id, day_date, page=0):
    recs = [r for r in data["records"] if str(r.get("owner"))==str(chat_id) and local_date_str_from_iso(r["timestamp"])==day_date]
    recs.sort(key=lambda x: x["timestamp"])
    start = page * PAGE_SIZE
    page_items = recs[start:start+PAGE_SIZE]
    kb = types.InlineKeyboardMarkup()
    for r in page_items:
        t = local_time_str_from_iso(r["timestamp"])
        amt = r["amount"]
        label = f"{t} {'+' if amt>0 else '-'}{fmt(amt)} {r.get('note','')}"
        kb.add(types.InlineKeyboardButton(label[:64], callback_data=f"select|{r['id']}"))
    buttons = []
    if start > 0:
        buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page|{page-1}|{day_date}"))
    if start + PAGE_SIZE < len(recs):
        buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"page|{page+1}|{day_date}"))
    if buttons:
        kb.row(*buttons)
    kb.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="edit_cancel"))
    return kb

# -------------------------
# Pending actions (–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞)
# pending[chat_id] = {"type":..., "payload": {...}}
# -------------------------
pending = {}

# -------------------------
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞
# -------------------------
def add_record(chat_id, amt_signed, note):
    rid = data.get("next_id", 1)
    rec = {
        "id": rid,
        "timestamp": utc_now_iso(),
        "amount": amt_signed,
        "note": note,
        "owner": str(chat_id)
    }
    data.setdefault("records", []).append(rec)
    data["next_id"] = rid + 1
    data["overall_balance"] = data.get("overall_balance", 0) + amt_signed
    save_data(data)
    return rec

def send_day_window_and_replace(chat_id, day_date, prefix_text=None):
    text = build_day_window_text(chat_id, day_date)
    if prefix_text:
        to_send = f"{prefix_text}\n\n{text}"
    else:
        to_send = text
    kb = day_keyboard()
    sent = bot.send_message(chat_id, to_send, reply_markup=kb)
    # —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–æ–º—É –∂–µ –î–ù–Æ
    active_chat = data.get("active_messages", {}).get(str(chat_id), {})
    prev = active_chat.get(day_date)
    if prev:
        try:
            bot.delete_message(prev["chat_id"], prev["message_id"])
        except Exception:
            pass
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
    data.setdefault("active_messages", {}).setdefault(str(chat_id), {})[day_date] = {"chat_id": chat_id, "message_id": sent.message_id}
    save_data(data)
    return sent

# -------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏)
# -------------------------
@bot.message_handler(func=lambda m: True)
def handle_message(m):
    chat_id = m.chat.id
    text = (m.text or "").strip()
    if not text:
        return

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ/–æ–±–Ω—É–ª–µ–Ω–∏–µ)
    key = str(chat_id)
    if key in pending:
        state = pending[key]
        stype = state.get("type")
        if stype == "await_new_value":
            # payload: {"rec_id": id}
            rec_id = state["payload"]["rec_id"]
            num, sign, raw = parse_first_number(text)
            if num is None:
                bot.reply_to(m, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: +1000 –∑–∞—Ä–ø–ª–∞—Ç–∞ –∏–ª–∏ -500 –ø—Ä–æ–¥—É–∫—Ç—ã.")
                return
            new_amt = apply_sign(num, sign)
            note = text[(text.find(raw)+len(raw)):].strip() if raw in text else ""
            # –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å
            for i, r in enumerate(data["records"]):
                if r["id"] == rec_id and r["owner"] == str(chat_id):
                    old_amt = r["amount"]
                    data["records"][i]["amount"] = new_amt
                    data["records"][i]["note"] = note
                    data["overall_balance"] = data.get("overall_balance", 0) - old_amt + new_amt
                    save_data(data)
                    day_date = local_date_str_from_iso(r["timestamp"])
                    send_day_window_and_replace(chat_id, day_date, prefix_text=f"‚úÖ –ó–∞–ø–∏—Å—å #{rec_id} –∏–∑–º–µ–Ω–µ–Ω–∞")
                    bot.reply_to(m, "–ì–æ—Ç–æ–≤–æ ‚Äî –∑–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∞.")
                    pending.pop(key, None)
                    return
            bot.reply_to(m, "–ù–µ –Ω–∞—à—ë–ª –∑–∞–ø–∏—Å—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
            pending.pop(key, None)
            return

        if stype == "await_delete_text_confirm":
            # —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ y/n
            if text.strip().lower() in ("y","yes","–¥–∞","–¥","‚úÖ"):
                rec_id = state["payload"]["rec_id"]
                deleted = False
                for r in list(data["records"]):
                    if r["id"] == rec_id and r["owner"] == str(chat_id):
                        data["records"].remove(r)
                        data["overall_balance"] = data.get("overall_balance", 0) - r["amount"]
                        save_data(data)
                        day_date = local_date_str_from_iso(r["timestamp"])
                        # –æ–±–Ω–æ–≤–∏—Ç—å –æ–∫–Ω–æ (–µ—Å–ª–∏ –µ—Å—Ç—å) –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
                        send_day_window_and_replace(chat_id, day_date, prefix_text=f"‚úÖ –ó–∞–ø–∏—Å—å #{rec_id} —É–¥–∞–ª–µ–Ω–∞")
                        deleted = True
                        break
                if deleted:
                    bot.reply_to(m, "–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")
                else:
                    bot.reply_to(m, "–ù–µ –Ω–∞—à—ë–ª –∑–∞–ø–∏—Å—å.")
            else:
                bot.reply_to(m, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            pending.pop(key, None)
            return

        if stype == "await_reset_text_confirm":
            if text.strip().lower() in ("y","yes","–¥–∞","–¥","‚úÖ"):
                data.clear()
                data.update(default_data())
                save_data(data)
                bot.reply_to(m, "‚ôªÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã.")
            else:
                bot.reply_to(m, "–û–±–Ω—É–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            pending.pop(key, None)
            return

    # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–≤—É—é —Å—É–º–º—É
    num, sign, raw = parse_first_number(text)
    if num is None:
        bot.reply_to(m, "‚ùó –ß–∏—Å–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–∏–º–µ—Ä: `+1000 —Ö–ª–µ–±`, `-500 –±–µ–Ω–∑–∏–Ω`, `1000` (–±–µ–∑ –∑–Ω–∞–∫–∞ ‚Äî —Ä–∞—Å—Ö–æ–¥).")
        return

    amt_signed = apply_sign(num, sign)
    note = text[(text.find(raw)+len(raw)):].strip() if raw in text else ""
    rec = add_record(chat_id, amt_signed, note)
    day_date = local_date_str_from_iso(rec["timestamp"])

    prefix = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {'+' if amt_signed>0 else '-'}{fmt(amt_signed)} {note}"
    send_day_window_and_replace(chat_id, day_date, prefix_text=prefix)

    try:
        confirm = bot.send_message(chat_id, "–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ")
        delete_message_later(chat_id, confirm.message_id, delay=5)
    except Exception:
        pass

# -------------------------
# Callback handler (inline –∫–Ω–æ–ø–∫–∏)
# -------------------------
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    data_call = call.data
    chat_id = call.message.chat.id
    user = str(chat_id)

    # –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if data_call == "edit_menu":
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, "–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=edit_menu_kb())
        return

    if data_call == "edit_cancel":
        bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–∞")
        return

    if data_call == "export_csv":
        bot.answer_callback_query(call.id)
        export_csv(chat_id)
        return

    # –ò–∑–º–µ–Ω–∏—Ç—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–ø–∏—Å—è–º–∏ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    if data_call == "edit_modify":
        bot.answer_callback_query(call.id)
        day_date = today_local_date_str()
        kb = make_records_page_kb(chat_id, day_date, page=0)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É):", reply_markup=kb)
        return

    # –£–¥–∞–ª–∏—Ç—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if data_call == "edit_delete":
        bot.answer_callback_query(call.id)
        day_date = today_local_date_str()
        kb = make_records_page_kb(chat_id, day_date, page=0)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É):", reply_markup=kb)
        return

    # –û–±–Ω—É–ª–∏—Ç—å –≤—Å—ë
    if data_call == "edit_reset_all":
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:", reply_markup=yes_no_kb("reset_all"))
        # pending handled by callbacks
        return

    # pagination page|<n>|<YYYY-MM-DD>
    if data_call.startswith("page|"):
        bot.answer_callback_query(call.id)
        parts = data_call.split("|", 2)
        page = int(parts[1])
        day_date = parts[2]
        kb = make_records_page_kb(chat_id, day_date, page=page)
        bot.send_message(chat_id, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π:", reply_markup=kb)
        return

    # select record: select|<id>
    if data_call.startswith("select|"):
        bot.answer_callback_query(call.id)
        rec_id = int(data_call.split("|",1)[1])
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"do_modify|{rec_id}"),
               types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"do_delete|{rec_id}"))
        kb.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="edit_cancel"))
        bot.send_message(chat_id, f"–ó–∞–ø–∏—Å—å #{rec_id}: –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb)
        return

    # do_modify|id => ask for new value (text input)
    if data_call.startswith("do_modify|"):
        bot.answer_callback_query(call.id)
        rec_id = int(data_call.split("|",1)[1])
        pending[user] = {"type": "await_new_value", "payload": {"rec_id": rec_id}}
        bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏ (–ø—Ä–∏–º–µ—Ä: +1000 –∑–∞—Ä–ø–ª–∞—Ç–∞ –∏–ª–∏ -500 –ø—Ä–æ–¥—É–∫—Ç—ã).")
        return

    # do_delete|id => inline confirmation
    if data_call.startswith("do_delete|"):
        bot.answer_callback_query(call.id)
        rec_id = int(data_call.split("|",1)[1])
        bot.send_message(chat_id, f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å #{rec_id}?", reply_markup=yes_no_kb(f"del|{rec_id}"))
        return

    # handle yes/no for delete confirmation del|<id>_yes/_no
    if data_call.startswith("del|"):
        bot.answer_callback_query(call.id)
        payload = data_call.split("|",1)[1]
        if payload.endswith("_yes"):
            rec_id = int(payload[:-4])
            deleted = False
            for r in list(data["records"]):
                if r["id"] == rec_id and r["owner"] == str(chat_id):
                    data["records"].remove(r)
                    data["overall_balance"] = data.get("overall_balance",0) - r["amount"]
                    save_data(data)
                    day_date = local_date_str_from_iso(r["timestamp"])
                    # –æ–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ –¥–Ω—è (—Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–Ω—É—Ç—Ä–∏ —Ç–æ–≥–æ –∂–µ –¥–Ω—è)
                    send_day_window_and_replace(chat_id, day_date, prefix_text=f"‚úÖ –ó–∞–ø–∏—Å—å #{rec_id} —É–¥–∞–ª–µ–Ω–∞")
                    deleted = True
                    break
            if deleted:
                bot.send_message(chat_id, "‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")
            else:
                bot.send_message(chat_id, "‚ùó –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            bot.send_message(chat_id, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    # reset_all_yes / reset_all_no
    if data_call.startswith("reset_all_"):
        bot.answer_callback_query(call.id)
        if data_call.endswith("_yes"):
            data.clear()
            data.update(default_data())
            save_data(data)
            bot.send_message(chat_id, "‚ôªÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã.")
        else:
            bot.send_message(chat_id, "–û–±–Ω—É–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

# -------------------------
# –≠–∫—Å–ø–æ—Ä—Ç CSV
# -------------------------
def export_csv(chat_id):
    rows = []
    for r in data.get("records", []):
        if str(r.get("owner")) != str(chat_id):
            continue
        dt_local = local_dt_from_iso(r["timestamp"])
        rows.append([dt_local.strftime("%Y-%m-%d"), dt_local.strftime("%H:%M:%S"), "+" if r["amount"]>0 else "-", fmt(r["amount"]), r.get("note","")])
    if not rows:
        bot.send_message(chat_id, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    buf = io.StringIO()
    writer = csv.writer(buf)
    writer.writerow(["date","time","type","amount","note"])
    writer.writerows(rows)
    buf.seek(0)
    bio = io.BytesIO(buf.getvalue().encode("utf-8"))
    bio.name = f"FO_export_{datetime.now(tz=TZ).strftime('%Y-%m-%d')}.csv"
    try:
        bot.send_document(chat_id, bio)
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CSV: {e}")

# -------------------------
# –ö–æ–º–∞–Ω–¥—ã: /–±–∞–ª–∞–Ω—Å /–æ—Ç—á–µ—Ç /—Å–±—Ä–æ—Å /—ç–∫—Å–ø–æ—Ä—Ç /id /–Ω–æ–≤—ã–π–¥–µ–Ω—å
# -------------------------
@bot.message_handler(commands=["–±–∞–ª–∞–Ω—Å"])
def cmd_balance(m):
    bot.reply_to(m, f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {fmt(data.get('overall_balance',0))}")

@bot.message_handler(commands=["–æ—Ç—á–µ—Ç"])
def cmd_report(m):
    chat_id = m.chat.id
    day_date = today_local_date_str()
    send_day_window_and_replace(chat_id, day_date)

@bot.message_handler(commands=["—Å–±—Ä–æ—Å"])
def cmd_reset(m):
    chat_id = m.chat.id
    bot.send_message(chat_id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:", reply_markup=yes_no_kb("reset_all"))
    # callback –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç

@bot.message_handler(commands=["—ç–∫—Å–ø–æ—Ä—Ç","export"])
def cmd_export(m):
    export_csv(m.chat.id)

@bot.message_handler(commands=["id"])
def cmd_id(m):
    bot.reply_to(m, f"ü™™ –¢–≤–æ–π Telegram ID: {m.chat.id}")

@bot.message_handler(commands=["–Ω–æ–≤—ã–π–¥–µ–Ω—å","newday"])
def cmd_newday(m):
    # —Ä—É—á–Ω–æ–π —Ç—Ä–∏–≥–≥–µ—Ä: —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ (–∏ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–ª—è —Ç–æ–≥–æ –∂–µ –¥–Ω—è ‚Äî –ø–æ –ª–æ–≥–∏–∫–µ, –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â –¥–µ–Ω—å)
    chat_id = m.chat.id
    create_new_day_for_chat(chat_id)
    bot.reply_to(m, "‚úÖ –ù–æ–≤—ã–π –¥–µ–Ω—å —Å–æ–∑–¥–∞–Ω (–µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±—ã–ª ‚Äî –æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ –∏—Ç–æ–≥).")

# -------------------------
# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
# (—É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ —Ç–æ–≥–æ –∂–µ –¥–Ω—è ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—à–ª—ã–µ –¥–Ω–∏)
# -------------------------
def create_new_day_for_chat(chat_id, date_str=None):
    if date_str is None:
        date_str = today_local_date_str()
    # delete active message for this chat for date_str? NO ‚Äî we want to create new empty day and keep previous day's final message
    # We only need to create new active message if it does not exist for date_str
    d = data
    d.setdefault("active_messages", {})
    owner = str(chat_id)
    if owner not in d["active_messages"]:
        d["active_messages"][owner] = {}
    # if there is already an active message for this date ‚Äî do nothing
    if date_str in d["active_messages"][owner] and d["active_messages"][owner][date_str].get("message_id"):
        return
    # send 'new day' notification (auto-delete)
    try:
        msg = bot.send_message(chat_id, f"üìÖ –ù–æ–≤—ã–π –¥–µ–Ω—å –Ω–∞—á–∞—Ç: {date_str}")
        delete_message_later(chat_id, msg.message_id, delay=PING_NOTIFY_DELETE_AFTER)
    except Exception:
        pass
    # send empty window for the new day and save as active
    text = f"üìÖ {date_str}\n\n(–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –µ—â—ë.)"
    try:
        sent = bot.send_message(chat_id, text, reply_markup=day_keyboard())
        data.setdefault("active_messages", {}).setdefault(owner, {})[date_str] = {"chat_id": chat_id, "message_id": sent.message_id}
        save_data(data)
    except Exception:
        data.setdefault("active_messages", {}).setdefault(owner, {})[date_str] = {"chat_id": chat_id, "message_id": None}
        save_data(data)

# -------------------------
# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–º–µ–Ω—É –¥–Ω—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å
# -------------------------
_last_checked_date = None

def day_rollover_watcher():
    global _last_checked_date
    while True:
        try:
            now_local = datetime.now(tz=TZ)
            today = now_local.strftime("%Y-%m-%d")
            if _last_checked_date is None:
                _last_checked_date = today
            if today != _last_checked_date:
                # –¥–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤, –≥–¥–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤_messages –∏–ª–∏ –≥–¥–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
                chats = set(list(data.get("active_messages", {}).keys()))
                # —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏
                for r in data.get("records", []):
                    chats.add(r.get("owner"))
                for chat in chats:
                    try:
                        create_new_day_for_chat(int(chat), date_str=today)
                    except Exception:
                        pass
                _last_checked_date = today
            # sleep
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –≤ day_rollover_watcher:", e)
        time.sleep(DAY_CHECK_INTERVAL)

# —Å—Ç–∞—Ä—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
threading.Thread(target=day_rollover_watcher, daemon=True).start()

# -------------------------
# –í–µ–±—Ö—É–∫ (Flask endpoints)
# -------------------------
@app.route("/" + TOKEN, methods=["POST"])
def receive_update():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/", methods=["GET"])
def set_webhook_and_ping():
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –∏ –ø–∏–Ω–≥ –≤–ª–∞–¥–µ–ª—å—Ü—É
    try:
        hostname = WEBHOOK_BASE
        webhook_url = f"{hostname}/{TOKEN}"
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", webhook_url)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:", e)
    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É (–∏ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ)
    try:
        owner = int(OWNER_ID)
        msg = bot.send_message(owner, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω (–≤–µ—Ä—Å–∏—è ‚Ññ5)")
        delete_message_later(owner, msg.message_id, delay=PING_NOTIFY_DELETE_AFTER)
    except Exception:
        pass
    return "OK", 200

# -------------------------
# –ó–∞–ø—É—Å–∫
# -------------------------
if __name__ == "__main__":
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    save_data(data)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (Render –≤—ã–∑–æ–≤–µ—Ç GET / –ø—Ä–∏ –¥–µ–ø–ª–æ–µ)
    try:
        hostname = WEBHOOK_BASE
        webhook_url = f"{hostname}/{TOKEN}"
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", webhook_url)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook:", e)

    # —Å—Ç–∞—Ä—Ç Flask
    app.run(host="0.0.0.0", port=PORT)
