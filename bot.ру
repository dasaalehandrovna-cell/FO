# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.9.0
# –ò–∑–º–µ–Ω–µ–Ω–∏—è: –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ, –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ
# ID: Code_001
# ============================================

import os
import json
import csv
import logging
import threading
import time
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from flask import Flask
from telebot import types

TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
APP_URL = os.getenv("APP_URL", "https://yourapp.onrender.com")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.9.0"
AUTO_DELETE_SEC = 30  # –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -----------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[logging.FileHandler(LOG_FILE, encoding="utf-8"), logging.StreamHandler()]
)

log_info = lambda msg: logging.info(msg)
log_error = lambda msg: logging.error(msg)

log_info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í–µ—Ä—Å–∏—è {VERSION}")

# -----------------------------
# –î–∞–Ω–Ω—ã–µ
# -----------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "chats": {},
        "active_messages": {},
        "next_id": 1,
        "forward_targets": []
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return default_data()
    return default_data()

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

data = load_data()

if OWNER_ID:
    try:
        oi = int(OWNER_ID)
        if oi not in data.get("forward_targets", []):
            data["forward_targets"].append(oi)
            save_data(data)
    except:
        pass

# -----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------
def get_today_key():
    return datetime.now(TZ).strftime("%Y-%m-%d")

def get_chat_store(chat_id):
    cid = str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid] = {"balance":0, "records":[], "daily_records":{}, "forward_enabled":False}
        save_data(data)
    return data["chats"][cid]

def schedule_auto_delete(chat_id, message_id, delay=AUTO_DELETE_SEC):
    def delete_later():
        time.sleep(delay)
        try:
            bot.delete_message(chat_id, message_id)
        except:
            pass
    threading.Thread(target=delete_later, daemon=True).start()

def set_today_active_window(chat_id, message_id):
    today = get_today_key()
    data.setdefault("active_messages", {}).setdefault(today, {})[str(chat_id)] = message_id
    save_data(data)

# -----------------------------
# –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø–∏—Å—è–º–∏
# -----------------------------
def add_record(chat_id, amount, note, owner):
    store = get_chat_store(chat_id)
    rid = data.get("next_id",1)
    rec = {"id":rid,"short_id":f"R{rid}","timestamp":datetime.now(TZ).isoformat(timespec="seconds"),
           "amount":amount,"note":note,"owner":owner}
    data["records"].append(rec)
    store["records"].append(rec)
    day = get_today_key()
    store.setdefault("daily_records", {}).setdefault(day, []).append(rec)
    store["balance"] += amount
    data["overall_balance"] += amount
    data["next_id"] = rid+1
    save_data(data)
    export_csv()
    # —Ñ–æ—Ä–≤–∞—Ä–¥
    if store.get("forward_enabled") and OWNER_ID:
        try:
            bot.send_message(int(OWNER_ID), f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ —á–∞—Ç–∞ {chat_id}: {rec['short_id']} {rec['amount']} ‚Äî {rec['note']}")
        except:
            pass
    return rec

def export_csv():
    try:
        with open(CSV_FILE,"w",newline='',encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["chat_id","ID","short_id","timestamp","amount","note","owner","day_key"])
            for cid, cdata in data.get("chats", {}).items():
                for day_key, recs in cdata.get("daily_records", {}).items():
                    for r in recs:
                        writer.writerow([cid,r["id"],r["short_id"],r["timestamp"],r["amount"],r["note"],r["owner"],day_key])
    except:
        pass

# -----------------------------
# –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
# -----------------------------
def update_or_send_today_window(chat_id):
    today_key = get_today_key()
    store = get_chat_store(chat_id)
    day_records = store.get("daily_records", {}).get(today_key, [])
    daily_income = sum(r["amount"] for r in day_records if r["amount"]>0)
    daily_expense = sum(r["amount"] for r in day_records if r["amount"]<0)
    overall_balance = store.get("balance",0)

    if not day_records:
        text = f"üìÖ {today_key}\n–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.\nüíµ –ü—Ä–∏—Ö–æ–¥: {daily_income}\nüí∏ –†–∞—Å—Ö–æ–¥: {abs(daily_expense)}\nüí∞ –û—Å—Ç–∞—Ç–æ–∫: {overall_balance}"
    else:
        lines = [f"üìÖ {today_key}","üìã –û–ø–µ—Ä–∞—Ü–∏–∏:"]
        for r in day_records[-50:]:
            sign = "+" if r["amount"]>0 else "-"
            lines.append(f"{r['short_id']}: {sign}{abs(r['amount'])} ‚Äî {r.get('note','')}")
        lines.append(f"\nüíµ –ü—Ä–∏—Ö–æ–¥: {daily_income}\nüí∏ –†–∞—Å—Ö–æ–¥: {abs(daily_expense)}\nüí∞ –û—Å—Ç–∞—Ç–æ–∫: {overall_balance}")
        text = "\n".join(lines)

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(f"üí∞ {overall_balance} ARS", callback_data="noop"))

    today_msgs = data.setdefault("active_messages", {}).setdefault(today_key, {})
    active_id = today_msgs.get(str(chat_id))
    if active_id:
        try:
            bot.edit_message_text(text, chat_id, active_id, reply_markup=kb)
        except:
            # –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–æ ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ
            sent = bot.send_message(chat_id,text,reply_markup=kb)
            set_today_active_window(chat_id,sent.message_id)
    else:
        sent = bot.send_message(chat_id,text,reply_markup=kb)
        set_today_active_window(chat_id,sent.message_id)

# -----------------------------
# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
# -----------------------------
@bot.message_handler(func=lambda m: True)
def handle_message(msg):
    chat_id = msg.chat.id
    user = msg.from_user
    try:
        amount = float(msg.text)
        add_record(chat_id, amount, "–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", user.username)
    except:
        pass
    update_or_send_today_window(chat_id)

# -----------------------------
# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
# -----------------------------
log_info("–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
