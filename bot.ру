# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª ‚Äî –≤–µ—Ä—Å–∏—è 9.6.1.7
# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è
# –ë–∞–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 9.6.1.6
# –û–¢–°–ï–ö 1 ‚Äî –ò–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# ============================================

import os
import json
import csv
import re
import threading
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

# -----------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# -----------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

VERSION = "9.6.1.7"
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
PORT = int(os.environ.get("PORT", 5000))

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# -----------------------------
def log_info(text):
    print(f"[INFO] {datetime.now(TZ).strftime('%H:%M:%S')} ‚Äî {text}")

def log_error(text):
    print(f"[ERROR] {datetime.now(TZ).strftime('%H:%M:%S')} ‚Äî {text}")

# -----------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
# -----------------------------
def default_data():
    return {
        "chats": {},
        "processed_messages": [],
        "forward_targets": []
    }

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            try:
                d = json.load(f)
            except Exception:
                d = default_data()
    else:
        d = default_data()
    return d

def save_data(d):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

data = load_data()

# ============================================
# –ö–æ–Ω–µ—Ü –æ—Ç—Å–µ–∫–∞ 1
# –°—Ç—Ä–æ–∫: 94
# –í–µ—Ä—Å–∏—è: 9.6.1.7
# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è
# ============================================

# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª ‚Äî –≤–µ—Ä—Å–∏—è 9.6.1.7
# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è
# –û–¢–°–ï–ö 2 ‚Äî –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —á–∞—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
# ============================================

# -----------------------------
# –†–∞–±–æ—Ç–∞ —Å —á–∞—Ç–∞–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏
# -----------------------------
def get_chat_store(chat_id):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —á–∞—Ç–∞"""
    cid = str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid] = {
            "balance": 0,
            "records": [],
            "daily_records": {},
            "active_windows": {},
            "next_id": 1
        }
        save_data(data)
    store = data["chats"][cid]
    if "daily_records" not in store:
        store["daily_records"] = {}
    if "active_windows" not in store:
        store["active_windows"] = {}
    return store

# -----------------------------
# –ö–ª—é—á —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
# -----------------------------
def get_today_key():
    return datetime.now(TZ).strftime("%Y-%m-%d")

def get_today_active_window(chat_id):
    store = get_chat_store(chat_id)
    today_key = get_today_key()
    return store.get("active_windows", {}).get(today_key)

def set_today_active_window(chat_id, message_id):
    store = get_chat_store(chat_id)
    today_key = get_today_key()
    store.setdefault("active_windows", {})[today_key] = message_id
    save_data(data)

# -----------------------------
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
# -----------------------------
def add_record_to_chat(chat_id, amount, note, owner):
    store = get_chat_store(chat_id)
    ts = datetime.now(TZ).isoformat(timespec="seconds")
    rid = store.get("next_id", 1)
    rec = {
        "id": rid,
        "short_id": f"R{rid}",
        "timestamp": ts,
        "amount": amount,
        "note": note,
        "owner": owner
    }
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–µ –∏ –¥–Ω–µ–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    store.setdefault("records", []).append(rec)
    today_key = get_today_key()
    store.setdefault("daily_records", {}).setdefault(today_key, []).append(rec)
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—á—ë—Ç—á–∏–∫
    store["balance"] = store.get("balance", 0) + amount
    store["next_id"] = rid + 1
    save_data(data)
    export_to_csv(data)

    sign = "+" if amount > 0 else ""
    log_info(f"[CHAT {chat_id}] {sign}{amount} {note}")
    return rec

# -----------------------------
# –≠–∫—Å–ø–æ—Ä—Ç CSV
# -----------------------------
def export_to_csv(d):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤–æ –≤—Å–µ —á–∞—Ç—ã –≤ —Ñ–∞–π–ª CSV"""
    with open(CSV_FILE, "w", encoding="utf-8", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(["chat_id", "record_id", "timestamp", "amount", "note", "owner"])
        for cid, store in d.get("chats", {}).items():
            for r in store.get("records", []):
                writer.writerow([cid, r["id"], r["timestamp"], r["amount"], r["note"], r["owner"]])
    log_info("üíæ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV.")


# ============================================
# –ö–æ–Ω–µ—Ü –æ—Ç—Å–µ–∫–∞ 2
# –°—Ç—Ä–æ–∫: 118
# –í–µ—Ä—Å–∏—è: 9.6.1.7
# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è
# ============================================


# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª ‚Äî –≤–µ—Ä—Å–∏—è 9.6.1.7
# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è
# –û–¢–°–ï–ö 3 ‚Äî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞ –¥–Ω—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
# ============================================

# -----------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
# -----------------------------
def build_main_keyboard(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("‚ûï –ü—Ä–∏—Ö–æ–¥", callback_data="add_income"),
        types.InlineKeyboardButton("‚ûñ –†–∞—Å—Ö–æ–¥", callback_data="add_expense")
    )
    kb.add(types.InlineKeyboardButton("üìÑ –û—Ç—á—ë—Ç", callback_data="show_report"))
    return kb

# -----------------------------
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
# -----------------------------
def update_main_window(chat_id):
    try:
        today_key = get_today_key()
        store = get_chat_store(chat_id)
        day_records = store.get("daily_records", {}).get(today_key, [])

        if not day_records:
            text = f"üìÖ {today_key}\n–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.\nüí∞ –ë–∞–ª–∞–Ω—Å: {store.get('balance', 0)} ARS"
        else:
            lines = [f"üìÖ {today_key}", "üìã –û–ø–µ—Ä–∞—Ü–∏–∏:"]
            for r in day_records[-20:]:
                sign = "+" if r["amount"] > 0 else ""
                lines.append(f"{r['short_id']}: {sign}{r['amount']} ‚Äî {r.get('note','')}")
            lines.append(f"\nüí∞ –ë–∞–ª–∞–Ω—Å: {store.get('balance', 0)} ARS")
            text = "\n".join(lines)

        active_id = get_today_active_window(chat_id)
        if active_id:
            try:
                bot.edit_message_text(
                    text,
                    chat_id,
                    active_id,
                    reply_markup=build_main_keyboard(chat_id)
                )
                return
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–Ω–∞ ({chat_id}, id={active_id}): {e}")
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ
                try:
                    store["active_windows"].pop(today_key, None)
                except Exception:
                    pass
                save_data(data)

        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
        sent = bot.send_message(chat_id, text, reply_markup=build_main_keyboard(chat_id))
        set_today_active_window(chat_id, sent.message_id)

    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ update_main_window: {e}")

# -----------------------------
# –ü–æ–∫–∞–∑ –æ—Ç—á—ë—Ç–∞ (–ø–æ –∫–Ω–æ–ø–∫–µ)
# -----------------------------
def show_report(chat_id):
    store = get_chat_store(chat_id)
    lines = [f"üìä –û—Ç—á—ë—Ç –ø–æ —á–∞—Ç—É {chat_id}", ""]
    total_income = sum(r["amount"] for r in store["records"] if r["amount"] > 0)
    total_expense = sum(r["amount"] for r in store["records"] if r["amount"] < 0)
    lines.append(f"üíµ –ü—Ä–∏—Ö–æ–¥: {total_income}")
    lines.append(f"üí∏ –†–∞—Å—Ö–æ–¥: {total_expense}")
    lines.append(f"üí∞ –ë–∞–ª–∞–Ω—Å: {store.get('balance', 0)}")
    text = "\n".join(lines)
    bot.send_message(chat_id, text)

# ============================================
# –ö–æ–Ω–µ—Ü –æ—Ç—Å–µ–∫–∞ 3
# –°—Ç—Ä–æ–∫: 129
# –í–µ—Ä—Å–∏—è: 9.6.1.7
# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è
# ============================================

# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª ‚Äî –≤–µ—Ä—Å–∏—è 9.6.1.7
# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è
# –û–¢–°–ï–ö 4 ‚Äî Flask webhook, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
# ============================================

# -----------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# -----------------------------
@bot.message_handler(func=lambda m: True, content_types=["text"])
def handle_message(message):
    chat_id = message.chat.id
    text = message.text.strip()
    mid = message.message_id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä
    if mid in data.get("processed_messages", []):
        return
    data["processed_messages"].append(mid)
    if len(data["processed_messages"]) > 10000:
        data["processed_messages"] = data["processed_messages"][-5000:]
    save_data(data)

    # –†–∞—Å—Ö–æ–¥ / –ü—Ä–∏—Ö–æ–¥
    m = re.match(r"^([+-]?\d+)\s*(.*)$", text)
    if m:
        amount = int(m.group(1))
        note = m.group(2).strip() or "-"
        add_record_to_chat(chat_id, amount, note, message.from_user.first_name)
        update_main_window(chat_id)
        return

    # –ö–æ–º–∞–Ω–¥—ã
    if text.lower() in ["/–±–∞–ª–∞–Ω—Å", "/balance"]:
        store = get_chat_store(chat_id)
        bot.send_message(chat_id, f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {store.get('balance', 0)} ARS")
    elif text.lower() in ["/–æ—Ç—á–µ—Ç", "/report"]:
        show_report(chat_id)
    elif text.lower() in ["/—Å–±—Ä–æ—Å", "/reset"]:
        data["chats"][str(chat_id)] = {
            "balance": 0,
            "records": [],
            "daily_records": {},
            "active_windows": {},
            "next_id": 1
        }
        save_data(data)
        bot.send_message(chat_id, "üßπ –î–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–º—É —á–∞—Ç—É —Å–±—Ä–æ—à–µ–Ω—ã.")
        update_main_window(chat_id)
    elif text.lower() in ["/–≤–µ—Ä—Å–∏—è", "/version"]:
        bot.send_message(chat_id, f"‚öôÔ∏è –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {VERSION}")
    else:
        bot.send_message(chat_id, "‚ùî –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: +1000 –∏–ª–∏ -500) –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")

# -----------------------------
# Callback-–∫–Ω–æ–ø–∫–∏
# -----------------------------
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    chat_id = call.message.chat.id
    data_cb = call.data

    if data_cb == "add_income":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—Ö–æ–¥: +—Å—É–º–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    elif data_cb == "add_expense":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥: -—Å—É–º–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    elif data_cb == "show_report":
        show_report(chat_id)

# -----------------------------
# Flask Webhook
# -----------------------------
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.data.decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return f"–ë–æ—Ç –§–û {VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç.", 200

# -----------------------------
# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
# -----------------------------
def schedule_daily_window_creation():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–Ω–µ–≤–Ω—ã—Ö –æ–∫–æ–Ω (—Ä–∞–∑ –≤ —Å—É—Ç–∫–∏)"""
    def task():
        while True:
            now = datetime.now(TZ)
            if now.hour == 0 and now.minute == 0:
                for cid in data.get("chats", {}).keys():
                    try:
                        update_main_window(int(cid))
                    except Exception as e:
                        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–∫–Ω–æ –¥–ª—è —á–∞—Ç–∞ {cid}: {e}")
                save_data(data)
            threading.Event().wait(60)
    thread = threading.Thread(target=task, daemon=True)
    thread.start()

# -----------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# -----------------------------
if __name__ == "__main__":
    log_info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –§–û –≤–µ—Ä—Å–∏–∏ {VERSION}")
    bot.remove_webhook()
    webhook_url = f"https://fo-1.onrender.com/{TOKEN}"
    bot.set_webhook(url=webhook_url)
    log_info(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

    schedule_daily_window_creation()
    app.run(host="0.0.0.0", port=PORT)

# ============================================
# –ö–æ–Ω–µ—Ü –æ—Ç—Å–µ–∫–∞ 4
# –°—Ç—Ä–æ–∫: 201
# –í–µ—Ä—Å–∏—è: 9.6.1.7
# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è
# ============================================
# --------------------------------------------
# –û–¢–°–ï–ö 5 ‚Äî –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –∫–Ω–æ–ø–∫–∏ (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π)
# --------------------------------------------
from telebot import types

def build_main_keyboard(chat_id=None):
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ, –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É),
    —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.
    """
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
        types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report"),
    )
    kb.add(
        types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="btn_edit"),
        types.InlineKeyboardButton("‚öôÔ∏è –°–±—Ä–æ—Å", callback_data="btn_reset"),
    )
    kb.add(
        types.InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data="btn_start"),
        types.InlineKeyboardButton("üìò –û –∫–æ–¥–µ", callback_data="btn_cod"),
    )

    # --- –Ω–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º ---
    balance_text = ""
    if chat_id is not None:
        store = get_chat_store(chat_id)
        balance_text = f"üí∞ {store.get('balance', 0)} ARS"
    kb.add(types.InlineKeyboardButton(balance_text or "üí∞ 0 ARS", callback_data="noop"))
    return kb


def build_edit_list_keyboard(chat_id):
    """
    –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ ‚úè –∏ üóë
    (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, –∫–æ–º–ø–∞–∫—Ç–Ω–æ).
    """
    store = get_chat_store(chat_id)
    kb = types.InlineKeyboardMarkup()
    records = store.get("records", [])[-20:]
    if not records:
        kb.add(types.InlineKeyboardButton("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π", callback_data="noop"))
        kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="btn_start"))
        return kb

    for r in records:
        sign = "+" if r["amount"] > 0 else ""
        label = f"{r['short_id']}: {sign}{r['amount']} ARS {r.get('note','')}"
        # –Ω–µ–±–æ–ª—å—à–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —à–∏—Ä–∏–Ω–µ
        kb.row(
            types.InlineKeyboardButton(label, callback_data=f"noop_row:{r['id']}"),
            types.InlineKeyboardButton("‚úè", callback_data=f"edit_select:{r['id']}"),
            types.InlineKeyboardButton("üóë", callback_data=f"delete_record:{r['id']}")
        )

    # –∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥" –≤ –∫–æ–Ω—Ü–µ
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="btn_start"))
    return kb

# 6--------------------------------------------
# –û–¢–°–ï–ö 6 ‚Äî –ö–æ–º–∞–Ω–¥—ã (–æ—Å–Ω–æ–≤–Ω—ã–µ)
# --------------------------------------------
@bot.message_handler(commands=["start"])
def cmd_start(msg):
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª\n\n"
        "–ö–æ–º–∞–Ω–¥—ã (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π):\n"
        "/start ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/myid ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à user ID\n"
        "/chatid ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞\n"
        "/balance ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (–¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞)\n"
        "/report ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞)\n"
        "/reset ‚Äì –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)\n"
        "/addforward <chat_id> ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)\n"
        "/removeforward <chat_id> ‚Äì —É–±—Ä–∞—Ç—å —Ü–µ–ª—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)\n"
        "/listforwards ‚Äì —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏\n"
        "/cod ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö\n"
        "/edit ‚Äì —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (—Å–ø–∏—Å–æ–∫ –∏ –≤—ã–±–æ—Ä)\n"
        "/delete <–Ω–æ–º–µ—Ä> ‚Äì —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ –Ω–æ–º–µ—Ä—É\n\n"
        "–î–ª—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫, –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π —É—á—ë—Ç.\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n+1000 –∑–∞—Ä–ø–ª–∞—Ç–∞\n-123 —Ö–ª–µ–±\n200 —Å–æ–∫\n"
    )
    bot.send_message(msg.chat.id, f"üí¨ –í–µ—Ä—Å–∏—è: {VERSION}\n\n{text}", reply_markup=build_main_keyboard())

@bot.message_handler(commands=["myid"])
def cmd_myid(msg):
    uid = msg.from_user.id
    bot.reply_to(msg, f"üÜî –í–∞—à user ID: {uid}")

@bot.message_handler(commands=["chatid"])
def cmd_chatid(msg):
    cid = msg.chat.id
    bot.reply_to(msg, f"üí¨ ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞: {cid}")

@bot.message_handler(commands=["balance"])
def cmd_balance(msg):
    store = get_chat_store(msg.chat.id)
    bot.reply_to(msg, f"üí∞ –ë–∞–ª–∞–Ω—Å —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {store.get('balance',0)} ars", reply_markup=build_main_keyboard())

@bot.message_handler(commands=["report"])
def cmd_report(msg):
    store = get_chat_store(msg.chat.id)
    recs = store.get("records", [])
    if not recs:
        bot.send_message(msg.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", reply_markup=build_main_keyboard())
        return
    text_lines = ["üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:"]
    for r in recs[-50:]:
        sign = "+" if r["amount"] > 0 else ""
        text_lines.append(f"{r['short_id']}: {sign}{r['amount']} ‚Äî {r.get('note','')}")
    bot.send_message(msg.chat.id, "\n".join(text_lines), reply_markup=build_main_keyboard())

@bot.message_handler(commands=["reset"])
def cmd_reset(msg):
    if OWNER_ID is None or str(msg.from_user.id) != str(OWNER_ID):
        bot.send_message(msg.chat.id, "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.", reply_markup=build_main_keyboard())
        return
    global data
    data = default_data()
    try:
        if OWNER_ID:
            data["forward_targets"].append(int(OWNER_ID))
    except Exception:
        pass
    save_data(data)
    export_to_csv(data)
    bot.send_message(msg.chat.id, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.", reply_markup=build_main_keyboard())
    log_info("–î–ê–ù–ù–´–ï –û–ë–ù–£–õ–ï–ù–´ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º")

@bot.message_handler(commands=["addforward"])
def cmd_addforward(msg):
    if OWNER_ID is None or str(msg.from_user.id) != str(OWNER_ID):
        return
    parts = msg.text.split()
    if len(parts) < 2:
        bot.reply_to(msg, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addforward <chat_id>")
        return
    try:
        cid = int(parts[1])
    except Exception:
        bot.reply_to(msg, "–ù–µ–≤–µ—Ä–Ω—ã–π chat_id (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ).")
        return
    if cid in data["forward_targets"]:
        bot.reply_to(msg, "–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.")
        return
    data["forward_targets"].append(cid)
    save_data(data)
    bot.reply_to(msg, f"‚úÖ –¶–µ–ª—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {cid}")

@bot.message_handler(commands=["removeforward"])
def cmd_removeforward(msg):
    if OWNER_ID is None or str(msg.from_user.id) != str(OWNER_ID):
        return
    parts = msg.text.split()
    if len(parts) < 2:
        bot.reply_to(msg, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeforward <chat_id>")
        return
    try:
        cid = int(parts[1])
    except Exception:
        bot.reply_to(msg, "–ù–µ–≤–µ—Ä–Ω—ã–π chat_id (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ).")
        return
    if cid not in data["forward_targets"]:
        bot.reply_to(msg, "–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.")
        return
    data["forward_targets"].remove(cid)
    save_data(data)
    bot.reply_to(msg, f"‚úÖ –¶–µ–ª—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω–∞: {cid}")

@bot.message_handler(commands=["listforwards"])
def cmd_listforwards(msg):
    if not data["forward_targets"]:
        bot.reply_to(msg, "–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø—É—Å—Ç.", reply_markup=build_main_keyboard())
        return
    text = "üì® –¶–µ–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n" + "\n".join(map(str, data["forward_targets"]))
    bot.reply_to(msg, text, reply_markup=build_main_keyboard())

@bot.message_handler(commands=["cod"])
def cmd_cod(msg):
    text = (
        f"üìò –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–¥–µ ‚Äî –≤–µ—Ä—Å–∏—è {VERSION}\n\n"
        "–ö—Ä–∞—Ç–∫–æ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n"
        "- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n"
        "- –ö–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ\n"
        "- –î–æ–±–∞–≤–ª–µ–Ω—ã inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n"
        "- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ\n"
        "- –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã (–±–µ–∑ —ç—Ö–∞)\n"
        "- –û—Ç–¥–µ–ª—å–Ω—ã–π —É—á—ë—Ç –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É\n"
        "- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ /edit –∏ /delete\n"
        "- –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è = –æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å\n\n"
        "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è 9.6.1.6 ‚Äî —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á—ë—Ç, —É–ª—É—á—à–µ–Ω–Ω–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
    )
    bot.send_message(msg.chat.id, text, reply_markup=build_main_keyboard())

@bot.message_handler(commands=["edit"])
def cmd_edit(msg):
    kb = build_edit_list_keyboard(msg.chat.id)
    if not kb.keyboard:
        bot.reply_to(msg, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", reply_markup=build_main_keyboard())
        return
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)

@bot.message_handler(commands=["delete"])
def cmd_delete(msg):
    parts = msg.text.split()
    if len(parts) < 2:
        bot.reply_to(msg, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete <–Ω–æ–º–µ—Ä –∏–ª–∏ R–Ω–æ–º–µ—Ä>")
        return
    token = parts[1].strip()
    if token.upper().startswith("R"):
        token = token[1:]
    try:
        rid = int(token)
    except Exception:
        bot.reply_to(msg, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏.")
        return
    ok, rec = delete_record_in_chat(msg.chat.id, rid)
    if ok:
        bot.reply_to(msg, f"‚úÖ –ó–∞–ø–∏—Å—å R{rid} —É–¥–∞–ª–µ–Ω–∞. –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {get_chat_store(msg.chat.id).get('balance',0)} ars", reply_markup=build_main_keyboard())
    else:
        bot.reply_to(msg, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=build_main_keyboard())


# --------------------------------------------
# –û–¢–°–ï–ö 7 ‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ (–≤ –æ–¥–Ω–æ–º –æ–∫–Ω–µ, —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥)
# --------------------------------------------
@bot.callback_query_handler(func=lambda c: True)
def handle_callback(call):
    try:
        data_cd = call.data
        cid = call.message.chat.id
        mid = call.message.message_id

        # --- üí∞ –ë–∞–ª–∞–Ω—Å ---
        if data_cd == "btn_balance":
            store = get_chat_store(cid)
            text = f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {store.get('balance', 0)} ARS"
            bot.edit_message_text(text, cid, mid, reply_markup=build_main_keyboard(cid))
            bot.answer_callback_query(call.id)

        # --- üìä –û—Ç—á—ë—Ç ---
        elif data_cd == "btn_report":
            recs = get_chat_store(cid).get("records", [])
            if not recs:
                text = "üìã –ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π."
            else:
                text_lines = ["üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:"]
                for r in recs[-20:]:
                    sign = "+" if r["amount"] > 0 else ""
                    text_lines.append(f"{r['short_id']}: {sign}{r['amount']} ARS ‚Äî {r.get('note','')}")
                text = "\n".join(text_lines)
            bot.edit_message_text(text, cid, mid, reply_markup=build_main_keyboard(cid))
            bot.answer_callback_query(call.id)

        # --- ‚öôÔ∏è –°–±—Ä–æ—Å ---
        elif data_cd == "btn_reset":
            if str(call.from_user.id) != str(OWNER_ID):
                bot.answer_callback_query(call.id, text="–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.")
                return
            chat_store = data["chats"].get(str(cid))
            if chat_store:
                chat_store["records"] = []
                chat_store["balance"] = 0
                chat_store["daily_records"] = {}
                chat_store["next_id"] = 1
            save_data(data)
            text = "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω—ã."
            bot.edit_message_text(text, cid, mid, reply_markup=build_main_keyboard(cid))
            bot.answer_callback_query(call.id)

        # --- ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ---
        elif data_cd == "btn_edit":
            kb = build_edit_list_keyboard(cid)
            text = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:"
            bot.edit_message_text(text, cid, mid, reply_markup=kb)
            bot.answer_callback_query(call.id)

        # --- üöÄ –°—Ç–∞—Ä—Ç ---
        elif data_cd == "btn_start":
            text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            bot.edit_message_text(text, cid, mid, reply_markup=build_main_keyboard(cid))
            bot.answer_callback_query(call.id)

        # --- üìò –û –∫–æ–¥–µ ---
        elif data_cd == "btn_cod":
            info_text = (
                "ü§ñ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.8.X (–¥–Ω–µ–≤–Ω–æ–π —É—á—ë—Ç)\n\n"
                "üìÇ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
                "‚Ä¢ –£—á—ë—Ç –ø–æ –¥–Ω—è–º (–Ω–æ–≤—ã–µ —Å—É—Ç–∫–∏ ‚Äî –Ω–æ–≤–æ–µ –æ–∫–Ω–æ)\n"
                "‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è\n"
                "‚Ä¢ –£–¥–æ–±–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π\n"
                "‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ–¥–Ω–æ–º –æ–∫–Ω–µ\n\n"
                "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω –¥–Ω–µ–≤–Ω–æ–π —É—á—ë—Ç –∏ –±–∞–ª–∞–Ω—Å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ."
            )
            bot.edit_message_text(info_text, cid, mid, reply_markup=build_main_keyboard(cid))
            bot.answer_callback_query(call.id)

        # --- ‚úè –í—ã–±–æ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
        elif data_cd.startswith("edit_select:"):
            rid = int(data_cd.split(":")[1])
            chat_state = data.setdefault("tracked_messages", {})
            chat_key = str(cid)
            user_states = chat_state.setdefault(chat_key, {})
            user_states[str(call.from_user.id)] = {
                "action": "edit_wait_value",
                "rid": rid,
                "msg_id": mid
            }
            save_data(data)
            text = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è R{rid} (–Ω–∞–ø—Ä–∏–º–µ—Ä: +500 –ø—Ä–æ–¥–∞–∂–∞)"
            bot.edit_message_text(text, cid, mid, reply_markup=build_main_keyboard(cid))
            bot.answer_callback_query(call.id)

        # --- üóë –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ---
        elif data_cd.startswith("delete_record:"):
            rid = int(data_cd.split(":")[1])
            ok, rec = delete_record_in_chat(cid, rid)
            if ok:
                text = f"‚úÖ –ó–∞–ø–∏—Å—å R{rid} —É–¥–∞–ª–µ–Ω–∞.\nüí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {get_chat_store(cid).get('balance', 0)} ARS"
            else:
                text = "‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            bot.edit_message_text(text, cid, mid, reply_markup=build_main_keyboard(cid))
            bot.answer_callback_query(call.id)

        # --- ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞) ---
        elif data_cd in ("btn_back", "noop"):
            bot.edit_message_reply_markup(cid, mid, reply_markup=build_main_keyboard(cid))
            bot.answer_callback_query(call.id)

        else:
            bot.answer_callback_query(call.id)

    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")


# --------------------------------------------
# –û–¢–°–ï–ö 8 ‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–¥–Ω–æ –æ–∫–Ω–æ –≤ –¥–µ–Ω—å)
# --------------------------------------------
@bot.message_handler(func=lambda m: True, content_types=[
    "text", "photo", "document", "voice", "video", "audio", "sticker"
])
def handle_message(msg):
    if not getattr(msg, "from_user", None) or msg.from_user.is_bot:
        return

    chat_id = msg.chat.id
    user_id = msg.from_user.id
    today_key = get_today_key()
    store = get_chat_store(chat_id)

    # --- 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_states = data.setdefault("tracked_messages", {}).get(str(chat_id), {})
    state = user_states.get(str(user_id))
    if state and state.get("action") == "edit_wait_value":
        rid = state.get("rid")
        target_msg_id = get_today_active_window(chat_id)
        lines = msg.text.splitlines() if msg.text else []
        if not lines:
            bot.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É —Å —á–∏—Å–ª–æ–º, –ø—Ä–∏–º–µ—Ä: +500 –ø—Ä–æ–¥–∞–∂–∞.",
                chat_id, target_msg_id, reply_markup=build_main_keyboard(chat_id)
            )
            return
        first_line = lines[0].strip()
        amt, token = extract_first_number(first_line)
        if amt is None:
            bot.edit_message_text(
                "–ß–∏—Å–ª–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                chat_id, target_msg_id, reply_markup=build_main_keyboard(chat_id)
            )
            return
        m = num_re.search(first_line)
        note = first_line[m.end():].strip() if m else ""
        final_amt = amt if token.lstrip().startswith("+") else -abs(amt)
        ok, updated = update_record_in_chat(chat_id, rid, final_amt, note)
        user_states.pop(str(user_id), None)
        save_data(data)
        if ok:
            update_main_window(chat_id)
        return

    # --- 2. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏
    msg_key = f"{chat_id}:{msg.message_id}"
    processed = data.setdefault("processed_messages", [])
    if msg_key in processed:
        return

    # --- 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    owner_int = int(OWNER_ID) if OWNER_ID and OWNER_ID.isdigit() else None
    is_owner_msg = (owner_int is not None and user_id == owner_int)

    # --- 4. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É—á—ë—Ç–∞
    lines = []
    if msg.content_type == "text" and msg.text:
        lines = msg.text.splitlines()
    elif msg.caption:
        lines = msg.caption.splitlines()

    # --- 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π (—É—á—ë—Ç)
    added = False
    for line in lines:
        line = line.strip()
        if not line:
            continue
        amt, token = extract_first_number(line)
        if amt is None:
            continue
        m = num_re.search(line)
        note = line[m.end():].strip() if m else ""
        final_amt = amt if token.lstrip().startswith("+") else -abs(amt)
        add_record_to_chat(chat_id, final_amt, note, user_id)
        added = True

    # --- 6. –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º
    processed.append(msg_key)
    if len(processed) > 1000:
        processed = processed[-500:]
    data["processed_messages"] = processed
    save_data(data)

    # --- 7. –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
    update_main_window(chat_id)

    # --- 8. –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if is_owner_msg:
        for target in data.get("forward_targets", []):
            try:
                t = int(target)
            except Exception:
                continue
            if t == chat_id:
                # –µ—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –ø–∏—à–µ—Ç –≤ —Ü–µ–ª—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞, –±–µ–∑ –¥—É–±–ª–µ–π
                update_main_window(owner_int)
                continue
            try:
                sent = bot.copy_message(chat_id=t, from_chat_id=chat_id, message_id=msg.message_id)
                key = f"{sent.chat.id}:{sent.message_id}"
                processed.append(key)
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ {t}: {e}")
        save_data(data)


# --------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–∫–Ω–∞
# --------------------------------------------
def update_main_window(chat_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ —á–∞—Ç–∞ –ø–æ –¥–∞–Ω–Ω—ã–º –¥–Ω—è, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤–æ–µ."""
    today_key = get_today_key()
    store = get_chat_store(chat_id)
    active_id = get_today_active_window(chat_id)

    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫–Ω–æ
    text = ""
    try:
        day_records = get_daily_records(chat_id, today_key)
        if not day_records:
            text = f"üìÖ {today_key}\n–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.\nüí∞ –ë–∞–ª–∞–Ω—Å: {store.get('balance', 0)} ARS"
        else:
            lines = [f"üìÖ {today_key}", "üìã –û–ø–µ—Ä–∞—Ü–∏–∏:"]
            for r in day_records[-20:]:
                sign = "+" if r["amount"] > 0 else ""
                lines.append(f"{r['short_id']}: {sign}{r['amount']} ‚Äî {r.get('note','')}")
            lines.append(f"\nüí∞ –ë–∞–ª–∞–Ω—Å: {store.get('balance', 0)} ARS")
            text = "\n".join(lines)

        # –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        if active_id:
            bot.edit_message_text(text, chat_id, active_id, reply_markup=build_main_keyboard(chat_id))
        else:
            # –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–µ—Ç ‚Äî –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            messages = get_chat_store(chat_id).get("records", [])
            if messages:
                # –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ
                possible_id = get_today_active_window(chat_id)
                if possible_id:
                    bot.edit_message_text(text, chat_id, possible_id, reply_markup=build_main_keyboard(chat_id))
            else:
                # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                log_info(f"–ù–µ—Ç –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–∫–Ω–∞ (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ): {e}")

# --------------------------------------------
# –û–¢–°–ï–ö 9 ‚Äî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–æ–≤–æ–≥–æ –¥–Ω—è (—Å –≤–µ—Ä—Å–∏–µ–π –∫–æ–¥–∞)
# --------------------------------------------

VERSION = "9.8.1.1"

def schedule_daily_window_creation():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: —Å–ª–µ–¥–∏—Ç –∑–∞ —Å–º–µ–Ω–æ–π —Å—É—Ç–æ–∫ –∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –≤ –∫–∞–∂–¥–æ–º —á–∞—Ç–µ."""
    def task():
        try:
            last_day = get_today_key()
            while True:
                try:
                    time.sleep(60)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                    current_day = get_today_key()
                    if current_day != last_day:
                        # –°–º–µ–Ω–∞ —Å—É—Ç–æ–∫ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤
                        for chat_id_str in list(data.get("chats", {}).keys()):
                            try:
                                chat_id = int(chat_id_str)
                            except Exception:
                                continue
                            text = (
                                f"üóì {current_day}\n"
                                f"ü§ñ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {VERSION}\n\n"
                                f"üí∞ –ë–∞–ª–∞–Ω—Å: {get_chat_store(chat_id).get('balance', 0)} ARS"
                            )
                            try:
                                sent = bot.send_message(chat_id, text, reply_markup=build_main_keyboard(chat_id))
                                set_today_active_window(chat_id, sent.message_id)
                                log_info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –¥–Ω—è {current_day} –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                            except Exception as e:
                                log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ –¥–Ω—è –¥–ª—è {chat_id}: {e}")
                        last_day = current_day
                except Exception as loop_exc:
                    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º (—á—Ç–æ–±—ã –ø–æ—Ç–æ–∫ –Ω–µ —É–º–µ—Ä)
                    log_error(f"–û—à–∏–±–∫–∞ –≤ daily loop: {loop_exc}")
                    time.sleep(5)
        except Exception as e:
            log_error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ schedule_daily_window_creation: {e}")

    thread = threading.Thread(target=task, daemon=True)
    thread.start()

# --------------------------------------------
# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
# --------------------------------------------
schedule_daily_window_creation()