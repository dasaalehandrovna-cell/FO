# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.6.1.7
# Webhook-only, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞:
# - –æ–¥–Ω–æ –æ–∫–Ω–æ –≤ –¥–µ–Ω—å, –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –æ–¥–Ω–æ–º –æ–∫–Ω–µ
# - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
# - –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
# - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞ (–ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã)
# - –µ—Å–ª–∏ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–æ ‚Äî —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤–æ–µ —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏
# - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–¥–∞–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ (–≤–µ–∑–¥–µ)
# - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π –∏ allowlist
# ============================================

import os
import json
import csv
import logging
import re
import threading
import time
from datetime import datetime
from zoneinfo import ZoneInfo
import traceback

import telebot
from flask import Flask, request
from telebot import types

# --------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# --------------------------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")  # –≤–ª–∞–¥–µ–ª–µ—Ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å—Ç—Ä–æ–∫–∞/—á–∏—Å–ª–æ)
APP_URL = os.getenv("APP_URL")  # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è webhook
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.6.1.7"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
if not APP_URL:
    raise ValueError("APP_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! (–Ω—É–∂–µ–Ω –¥–ª—è webhook)")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -----------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)

def log_info(msg):
    logging.info(msg)

def log_error(msg):
    logging.error(msg)

log_info(f"–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–µ—Ä—Å–∏—è {VERSION}")

# -----------------------------
# –î–∞–Ω–Ω—ã–µ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é / IO
# -----------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "chats": {},                # chat_id -> {balance, records, daily_records, next_id}
        "active_messages": {},      # YYYY-MM-DD -> { chat_id_str -> message_id }
        "processed_messages": [],
        "forward_targets": [],      # list of chat ids (int)
        "allowed_forwarders": [],   # list of user ids (int) allowed to message bot in private to be processed
        "tracked_messages": {},     # chat_id_str -> { user_id_str -> state dict }
        "next_id": 1
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ data.json: {e}")
            d = default_data()
    else:
        d = default_data()
    # ensure keys present
    base = default_data()
    for k, v in base.items():
        if k not in d:
            d[k] = v
    return d

def save_data():
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

data = load_data()

# –ï—Å–ª–∏ OWNER_ID –∑–∞–¥–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ forward_targets (–∫–∞–∫ —Ä–∞–Ω—å—à–µ –±—ã–ª–æ)
if OWNER_ID:
    try:
        oi = int(OWNER_ID)
        if oi not in data.get("forward_targets", []):
            data["forward_targets"].append(oi)
            save_data()
    except Exception:
        pass

# -----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–∞—Ç–∞/—á–∞—Ç)
# -----------------------------
def get_today_key():
    return datetime.now(TZ).strftime("%Y-%m-%d")

def get_chat_store(chat_id):
    cid = str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid] = {
            "balance": 0,
            "records": [],
            "next_id": 1,
            "daily_records": {}
        }
        save_data()
    return data["chats"][cid]

def set_today_active_window(chat_id, message_id):
    today = get_today_key()
    if "active_messages" not in data:
        data["active_messages"] = {}
    if today not in data["active_messages"]:
        data["active_messages"][today] = {}
    data["active_messages"][today][str(chat_id)] = message_id
    save_data()

def get_today_active_window(chat_id):
    today = get_today_key()
    return data.get("active_messages", {}).get(today, {}).get(str(chat_id))

# -----------------------------
# –≠–∫—Å–ø–æ—Ä—Ç CSV
# -----------------------------
def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["chat_id","ID","short_id","timestamp","amount","note","owner","day_key"])
            for cid, cdata in d.get("chats", {}).items():
                for day_key, records in cdata.get("daily_records", {}).items():
                    for r in records:
                        writer.writerow([cid, r.get("id"), r.get("short_id"), r.get("timestamp"),
                                         r.get("amount"), r.get("note"), r.get("owner"), day_key])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")

# -----------------------------
# –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø–∏—Å—è–º–∏
# -----------------------------
def add_record_to_chat(chat_id, amount, note, owner):
    store = get_chat_store(chat_id)
    rid = data.get("next_id", 1)
    rec = {
        "id": rid,
        "short_id": f"R{rid}",
        "timestamp": datetime.now(TZ).isoformat(timespec="seconds"),
        "amount": amount,
        "note": note,
        "owner": owner
    }
    data.setdefault("records", []).append(rec)
    store.setdefault("records", []).append(rec)
    day = get_today_key()
    store.setdefault("daily_records", {}).setdefault(day, []).append(rec)
    store["balance"] = store.get("balance", 0) + amount
    data["overall_balance"] = data.get("overall_balance", 0) + amount
    data["next_id"] = rid + 1
    save_data()
    try:
        export_to_csv(data)
    except Exception:
        pass
    return rec

def update_record_in_chat(chat_id, rid, new_amount, new_note):
    store = get_chat_store(chat_id)
    found = None
    for r in store.get("records", []):
        if r["id"] == rid:
            r["amount"] = new_amount
            r["note"] = new_note
            found = r
            break
    if found:
        for day_recs in store.get("daily_records", {}).values():
            for r in day_recs:
                if r["id"] == rid:
                    r.update(found)
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data()
        export_to_csv(data)
        return True, found
    return False, None

def delete_record_in_chat(chat_id, rid):
    store = get_chat_store(chat_id)
    removed = None
    for r in list(store.get("records", [])):
        if r["id"] == rid or str(r["id"]) == str(rid) or r.get("short_id") == f"R{rid}":
            removed = r
            store["records"].remove(r)
            break
    if removed:
        for day_key, recs in store.get("daily_records", {}).items():
            store["daily_records"][day_key] = [x for x in recs if x["id"] != rid]
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        data["records"] = [x for x in data.get("records", []) if x["id"] != rid]
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data()
        export_to_csv(data)
        return True, removed
    return False, None

def get_daily_records(chat_id, day_key=None):
    store = get_chat_store(chat_id)
    if not day_key:
        day_key = get_today_key()
    return store.get("daily_records", {}).get(day_key, [])

# -----------------------------
# –ü–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–µ–ª
# -----------------------------
num_re = re.compile(r'([+-]?\s*\d+)')

def extract_first_number(s):
    if not s:
        return None, None
    m = num_re.search(s)
    if not m:
        return None, None
    token = m.group(1)
    token_clean = token.replace(" ", "")
    try:
        amt = int(token_clean)
    except:
        return None, None
    return amt, token.strip()

# -----------------------------
# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–¥–∞–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ seconds)
# -----------------------------
def send_temporary_message(chat_id, text, reply_markup=None, seconds=5):
    try:
        sent = bot.send_message(chat_id, text, reply_markup=reply_markup)
    except Exception as e:
        log_error(f"send_temporary_message send error: {e}")
        return None

    def _del():
        try:
            bot.delete_message(chat_id, sent.message_id)
        except Exception as e:
            # –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    t = threading.Timer(seconds, _del)
    t.daemon = True
    t.start()
    return sent

# -----------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ)
# -----------------------------
def build_main_keyboard(chat_id=None, confirm_reset=False):
    kb = types.InlineKeyboardMarkup(row_width=3)
    kb.row(
        types.InlineKeyboardButton("üí∞–±–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
        types.InlineKeyboardButton("üìä–æ—Ç—á—ë—Ç", callback_data="btn_report"),
        types.InlineKeyboardButton("‚úèÔ∏è–∏–∑–º–µ–Ω–∏—Ç—å", callback_data="btn_edit")
    )
    if confirm_reset:
        kb.row(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_reset"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_reset")
        )
    else:
        kb.row(
            types.InlineKeyboardButton("‚öôÔ∏è–æ–±–Ω—É–ª–∏—Ç—å", callback_data="btn_reset"),
            types.InlineKeyboardButton("üöÄ—Å—Ç–∞—Ä—Ç", callback_data="btn_start"),
            types.InlineKeyboardButton("‚ÑπÔ∏è–æ –∫–æ–¥–µ", callback_data="btn_cod")
        )
    kb.row(
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="btn_start")
    )
    balance_text = ""
    if chat_id is not None:
        store = get_chat_store(chat_id)
        balance_text = f"üí∞ {store.get('balance', 0)} ARS"
    kb.add(types.InlineKeyboardButton(balance_text or "üí∞ 0 ARS", callback_data="noop"))
    return kb

def build_edit_row_keyboard(rec):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("üìù –ó–∞–ø–∏—Å—å", callback_data=f"showrec_{rec['id']}"),
        types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"editrec_{rec['id']}")
    )
    kb.add(
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"deleterec_{rec['id']}"),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="btn_edit")
    )
    return kb

# -----------------------------
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ (—Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–æ)
# -----------------------------
def update_or_send_today_window(chat_id):
    today_key = get_today_key()
    store = get_chat_store(chat_id)
    day_records = store.get("daily_records", {}).get(today_key, [])

    if not day_records:
        text = f"üìÖ {today_key}\n–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.\nüí∞ –ë–∞–ª–∞–Ω—Å: {store.get('balance', 0)} ARS"
    else:
        lines = [f"üìÖ {today_key}", "üìã –û–ø–µ—Ä–∞—Ü–∏–∏:"]
        for r in day_records[-50:]:
            sign = "+" if r["amount"] > 0 else ""
            lines.append(f"{r['short_id']}: {sign}{r['amount']} ‚Äî {r.get('note','')}")
        lines.append(f"\nüí∞ –ë–∞–ª–∞–Ω—Å: {store.get('balance', 0)} ARS")
        text = "\n".join(lines)

    kb = build_main_keyboard(chat_id)
    today_msgs = data.setdefault("active_messages", {}).setdefault(today_key, {})
    active_id = today_msgs.get(str(chat_id))

    if active_id:
        # –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        try:
            bot.edit_message_text(text, chat_id, active_id, reply_markup=kb)
            return
        except Exception as e:
            log_error(f"[update_or_send_today_window] —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
            # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–µ–Ω–æ)
            try:
                sent = bot.send_message(chat_id, text, reply_markup=kb)
                set_today_active_window(chat_id, sent.message_id)
                log_info(f"[update_or_send_today_window] –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                return
            except Exception as e2:
                log_error(f"[update_or_send_today_window] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {e2}")
                return

    # –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
    try:
        sent = bot.send_message(chat_id, text, reply_markup=kb)
        set_today_active_window(chat_id, sent.message_id)
        log_info(f"[update_or_send_today_window] –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}, message_id={sent.message_id}")
    except Exception as e:
        log_error(f"[update_or_send_today_window] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ –¥–ª—è chat {chat_id}: {e}")

# -----------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ (edit/delete flows, back, etc.)
# -----------------------------
@bot.callback_query_handler(func=lambda c: True)
def handle_callback(call):
    try:
        data_cd = call.data
        cid = call.message.chat.id
        mid = call.message.message_id
        uid = call.from_user.id

        def ack(text=None):
            try:
                if text:
                    bot.answer_callback_query(call.id, text)
                else:
                    bot.answer_callback_query(call.id)
            except Exception:
                pass

        # –ó–∞—â–∏—Ç–∞: —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å btn_reset, setforward –≤ UI
        if str(uid) != str(OWNER_ID):
            if data_cd in ("confirm_reset", "btn_reset", "setforward_cmd"):
                ack("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.")
                return

        # –ë–∞–ª–∞–Ω—Å (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ)
        if data_cd == "btn_balance":
            store = get_chat_store(cid)
            text = f"üí∞ –ë–∞–ª–∞–Ω—Å: {store.get('balance', 0)} ARS"
            try:
                bot.edit_message_text(text, cid, mid, reply_markup=build_main_keyboard(cid))
            except Exception:
                bot.send_message(cid, text, reply_markup=build_main_keyboard(cid))
            ack()
            return

        # –û—Ç—á—ë—Ç
        if data_cd == "btn_report":
            recs = get_daily_records(cid)
            if not recs:
                text = "üìã –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."
            else:
                lines = ["üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:"]
                for r in recs[-20:]:
                    sign = "+" if r["amount"] > 0 else ""
                    lines.append(f"{r['short_id']}: {sign}{r['amount']} ARS ‚Äî {r.get('note','')}")
                text = "\n".join(lines)
            try:
                bot.edit_message_text(text, cid, mid, reply_markup=build_main_keyboard(cid))
            except Exception:
                bot.send_message(cid, text, reply_markup=build_main_keyboard(cid))
            ack()
            return

        # –°–±—Ä–æ—Å (–∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
        if data_cd == "btn_reset":
            kb = build_main_keyboard(cid, confirm_reset=True)
            text = "‚ö†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞?"
            try:
                bot.edit_message_text(text, cid, mid, reply_markup=kb)
            except:
                bot.send_message(cid, text, reply_markup=kb)
            ack()
            return

        if data_cd == "confirm_reset":
            chat_store = data["chats"].get(str(cid))
            if chat_store:
                chat_store["records"] = []
                chat_store["balance"] = 0
                chat_store["daily_records"] = {}
                chat_store["next_id"] = 1
            save_data()
            text = "‚úÖ –î–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω—ã."
            try:
                bot.edit_message_text(text, cid, mid, reply_markup=build_main_keyboard(cid))
            except:
                bot.send_message(cid, text, reply_markup=build_main_keyboard(cid))
            ack()
            return

        if data_cd == "cancel_reset":
            try:
                bot.edit_message_text("‚ùå –û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞.", cid, mid, reply_markup=build_main_keyboard(cid))
            except:
                bot.send_message(cid, "‚ùå –û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞.", reply_markup=build_main_keyboard(cid))
            ack()
            return

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / —Å—Ç–∞—Ä—Ç
        if data_cd == "btn_start":
            try:
                update_or_send_today_window(cid)
            except Exception:
                bot.send_message(cid, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=build_main_keyboard(cid))
            ack()
            return

        # –û –∫–æ–¥–µ
        if data_cd == "btn_cod":
            info_text = (
                f"ü§ñ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è {VERSION}\n\n"
                "‚Ä¢ –£—á—ë—Ç –ø–æ –¥–Ω—è–º (–æ–¥–Ω–æ –æ–∫–Ω–æ)\n"
                "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π (–≤—ã–±–æ—Ä / —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å / —É–¥–∞–ª–∏—Ç—å)\n"
                "‚Ä¢ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º\n"
            )
            try:
                bot.edit_message_text(info_text, cid, mid, reply_markup=build_main_keyboard(cid))
            except:
                bot.send_message(cid, info_text, reply_markup=build_main_keyboard(cid))
            ack()
            return

        # noop
        if data_cd == "noop":
            ack()
            return

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        if data_cd == "btn_edit":
            recs = get_daily_records(cid)
            if not recs:
                try:
                    bot.edit_message_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", cid, mid, reply_markup=build_main_keyboard(cid))
                except:
                    bot.send_message(cid, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=build_main_keyboard(cid))
                ack()
                return
            kb = types.InlineKeyboardMarkup(row_width=2)
            for r in recs[-10:]:
                lab = f"{r['short_id']} {r['amount']}"
                kb.add(types.InlineKeyboardButton(lab, callback_data=f"selrec_{r['id']}"))
            kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="btn_start"))
            try:
                bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å:", cid, mid, reply_markup=kb)
            except:
                bot.send_message(cid, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å:", reply_markup=kb)
            ack()
            return

        # –í—ã–±—Ä–∞–ª–∏ –∑–∞–ø–∏—Å—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
        if data_cd.startswith("selrec_"):
            try:
                rec_id = int(data_cd.split("_", 1)[1])
            except:
                ack("–û—à–∏–±–∫–∞ id")
                return
            rec_obj = None
            for r in get_chat_store(cid).get("records", []):
                if r["id"] == rec_id:
                    rec_obj = r
                    break
            if not rec_obj:
                try:
                    bot.edit_message_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", cid, mid, reply_markup=build_main_keyboard(cid))
                except:
                    bot.send_message(cid, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=build_main_keyboard(cid))
                ack()
                return
            kb = build_edit_row_keyboard(rec_obj)
            txt = f"–ó–∞–ø–∏—Å—å {rec_obj.get('short_id')}: {rec_obj.get('amount')} ‚Äî {rec_obj.get('note','')}"
            try:
                bot.edit_message_text(txt, cid, mid, reply_markup=kb)
            except:
                bot.send_message(cid, txt, reply_markup=kb)
            ack()
            return

        # –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å—å
        if data_cd.startswith("showrec_"):
            try:
                rec_id = int(data_cd.split("_", 1)[1])
            except:
                ack("–û—à–∏–±–∫–∞")
                return
            rec_obj = None
            for r in get_chat_store(cid).get("records", []):
                if r["id"] == rec_id:
                    rec_obj = r
                    break
            if not rec_obj:
                ack("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            txt = f"üìù {rec_obj.get('short_id')}\n{rec_obj.get('amount')} ARS\n{rec_obj.get('note','')}\n–ê–≤—Ç–æ—Ä: {rec_obj.get('owner')}"
            try:
                bot.edit_message_text(txt, cid, mid, reply_markup=build_main_keyboard(cid))
            except:
                bot.send_message(cid, txt, reply_markup=build_main_keyboard(cid))
            ack()
            return

        # –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è)
        if data_cd.startswith("editrec_"):
            try:
                rec_id = int(data_cd.split("_", 1)[1])
            except:
                ack("–û—à–∏–±–∫–∞")
                return
            data.setdefault("tracked_messages", {}).setdefault(str(cid), {})[str(uid)] = {
                "action": "edit_wait_value",
                "rid": rec_id
            }
            save_data()
            try:
                bot.edit_message_text(f"–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ R{rec_id} (–ø—Ä–∏–º–µ—Ä: +500 –∑–∞—Ä–ø–ª–∞—Ç–∞):", cid, mid)
            except:
                bot.send_message(cid, f"–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ R{rec_id} (–ø—Ä–∏–º–µ—Ä: +500 –∑–∞—Ä–ø–ª–∞—Ç–∞):")
            ack()
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
        if data_cd.startswith("deleterec_"):
            try:
                rec_id = int(data_cd.split("_", 1)[1])
            except:
                ack("–û—à–∏–±–∫–∞")
                return
            kb = types.InlineKeyboardMarkup(row_width=2)
            kb.add(
                types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_del_{rec_id}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_del_{rec_id}")
            )
            try:
                bot.edit_message_text(f"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å R{rec_id}?", cid, mid, reply_markup=kb)
            except:
                bot.send_message(cid, f"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å R{rec_id}?", reply_markup=kb)
            ack()
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if data_cd.startswith("confirm_del_"):
            parts = data_cd.split("_")
            rec_id = None
            if len(parts) >= 3 and parts[-1].isdigit():
                rec_id = int(parts[-1])
            if rec_id is None:
                ack("–û—à–∏–±–∫–∞ id")
                return
            ok, removed = delete_record_in_chat(cid, rec_id)
            if ok:
                try:
                    bot.edit_message_text(f"‚úÖ –ó–∞–ø–∏—Å—å R{rec_id} —É–¥–∞–ª–µ–Ω–∞.", cid, mid, reply_markup=build_main_keyboard(cid))
                except:
                    bot.send_message(cid, f"‚úÖ –ó–∞–ø–∏—Å—å R{rec_id} —É–¥–∞–ª–µ–Ω–∞.", reply_markup=build_main_keyboard(cid))
                update_or_send_today_window(cid)
            else:
                try:
                    bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞).", cid, mid, reply_markup=build_main_keyboard(cid))
                except:
                    bot.send_message(cid, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞).", reply_markup=build_main_keyboard(cid))
            ack()
            return

        if data_cd.startswith("cancel_del_"):
            try:
                bot.edit_message_text("–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.", cid, mid, reply_markup=build_main_keyboard(cid))
            except:
                bot.send_message(cid, "–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=build_main_keyboard(cid))
            ack()
            return

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π (placeholder in UI)
        if data_cd == "setforward_cmd":
            ack("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setforward <chat_id> –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏.")
            return

        ack()
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ callback: {e}\n{traceback.format_exc()}")

# -----------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
# -----------------------------
@bot.message_handler(func=lambda m: True, content_types=[
    "text", "photo", "document", "voice", "video", "audio", "sticker"
])
def handle_message(msg):
    try:
        if not getattr(msg, "from_user", None) or msg.from_user.is_bot:
            return

        chat_id = msg.chat.id
        user_id = msg.from_user.id
        is_private = (msg.chat.type == "private")

        # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        chat_state = data.setdefault("tracked_messages", {})
        user_states = chat_state.get(str(chat_id), {})
        state = None
        if user_states:
            state = user_states.get(str(user_id))

        if state and state.get("action") == "edit_wait_value":
            rid = state.get("rid")
            lines = msg.text.splitlines() if msg.text else []
            if not lines:
                send_temporary_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É —Å —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: +500 –ø—Ä–æ–¥–∞–∂–∞.", reply_markup=build_main_keyboard(chat_id))
                return
            first_line = lines[0].strip()
            amt, token = extract_first_number(first_line)
            if amt is None:
                send_temporary_message(chat_id, "–ß–∏—Å–ª–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=build_main_keyboard(chat_id))
                return
            m = num_re.search(first_line)
            note = first_line[m.end():].strip() if m else ""
            final_amt = amt if token.lstrip().startswith("+") else -abs(amt)
            ok, updated = update_record_in_chat(chat_id, rid, final_amt, note)
            # remove state
            user_states.pop(str(user_id), None)
            data["tracked_messages"][str(chat_id)] = user_states
            save_data()
            if ok:
                update_or_send_today_window(chat_id)
                send_temporary_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å R{rid} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=build_main_keyboard(chat_id))
            else:
                send_temporary_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞).", reply_markup=build_main_keyboard(chat_id))
            return

        # 2) –ü—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        msg_key = f"{chat_id}:{msg.message_id}"
        processed = data.setdefault("processed_messages", [])
        if msg_key in processed:
            return

        # 3) –û–±—Ä–∞–±–æ—Ç–∫–∞ PRIVATE —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç allowed_forwarders (—É—á—ë—Ç –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞)
        if is_private:
            allowed = [str(x) for x in data.get("allowed_forwarders", [])]
            if (OWNER_ID and str(user_id) == str(OWNER_ID)) or str(user_id) in allowed:
                # treat content as potential records and forward the message to forward_targets
                lines = []
                if msg.content_type == "text" and msg.text:
                    lines = msg.text.splitlines()
                elif getattr(msg, "caption", None):
                    lines = msg.caption.splitlines()
                added = False
                for line in lines:
                    line = line.strip()
                    if not line:
                        continue
                    amt, token = extract_first_number(line)
                    if amt is None:
                        continue
                    m = num_re.search(line)
                    note = line[m.end():].strip() if m else ""
                    final_amt = amt if token.lstrip().startswith("+") else -abs(amt)
                    # record into owner's chat by default (or into forward targets)
                    targets = data.get("forward_targets", [])
                    if targets:
                        for t in targets:
                            try:
                                add_record_to_chat(int(t), final_amt, note, user_id)
                                added = True
                            except Exception as e:
                                log_error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç {t}: {e}")
                    else:
                        # no forward targets -> put in owner's chat if exists
                        if OWNER_ID:
                            try:
                                add_record_to_chat(int(OWNER_ID), final_amt, note, user_id)
                                added = True
                            except Exception as e:
                                log_error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ OWNER_ID: {e}")
                # forward original message copy to targets
                for t in data.get("forward_targets", []):
                    try:
                        bot.copy_message(chat_id=int(t), from_chat_id=chat_id, message_id=msg.message_id)
                    except Exception as e:
                        log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏–∑ –ª–∏—á–∫–∏ –≤ {t}: {e}")
                if added:
                    send_temporary_message(chat_id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∏ —É—á—Ç–µ–Ω–æ.", seconds=5)
                else:
                    send_temporary_message(chat_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ (–Ω–µ —Å–æ–¥–µ—Ä–∂–∞–ª–æ —Å—É–º–º).", seconds=5)
                processed.append(msg_key)
                if len(processed) > 2000:
                    processed = processed[-1000:]
                data["processed_messages"] = processed
                save_data()
                return
            else:
                send_temporary_message(chat_id, "–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å/—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.", seconds=5)
                return

        # 4) –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —á–∞—Ç–∞—Ö/–≥—Ä—É–ø–ø–∞—Ö –∏ –ª–∏—á–∫–µ (–µ—Å–ª–∏ –Ω–µ —Ä–µ–∂–∏–º edit)
        lines = []
        if msg.content_type == "text" and msg.text:
            lines = msg.text.splitlines()
        elif getattr(msg, "caption", None):
            lines = msg.caption.splitlines()

        added = False
        for line in lines:
            line = line.strip()
            if not line:
                continue
            amt, token = extract_first_number(line)
            if amt is None:
                continue
            m = num_re.search(line)
            note = line[m.end():].strip() if m else ""
            final_amt = amt if token.lstrip().startswith("+") else -abs(amt)
            add_record_to_chat(chat_id, final_amt, note, user_id)
            added = True

        # mark processed
        processed.append(msg_key)
        if len(processed) > 2000:
            processed = processed[-1000:]
        data["processed_messages"] = processed
        save_data()

        # –æ–±–Ω–æ–≤–ª—è–µ–º –µ–¥–∏–Ω–æ–µ –æ–∫–Ω–æ
        if added:
            update_or_send_today_window(chat_id)
            send_temporary_message(chat_id, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=build_main_keyboard(chat_id), seconds=5)

        # –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
        owner_int = int(OWNER_ID) if OWNER_ID and str(OWNER_ID).isdigit() else None
        is_owner_msg = (owner_int is not None and user_id == owner_int)
        if is_owner_msg:
            for target in data.get("forward_targets", []):
                try:
                    t = int(target)
                except:
                    continue
                if t == chat_id:
                    update_or_send_today_window(owner_int)
                    continue
                try:
                    sent = bot.copy_message(chat_id=t, from_chat_id=chat_id, message_id=msg.message_id)
                    data.setdefault("processed_messages", []).append(f"{sent.chat.id}:{sent.message_id}")
                except Exception as e:
                    log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ {t}: {e}")
            save_data()

    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ handle_message: {e}\n{traceback.format_exc()}")

# -----------------------------
# –ö–æ–º–∞–Ω–¥—ã (start, myid, chatid, groups, forwards management, allowlist)
# -----------------------------
@bot.message_handler(commands=["start"])
def cmd_start(msg):
    chat_id = msg.chat.id
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/myid ‚Äî –≤–∞—à user ID\n"
        "/chatid ‚Äî ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞\n"
        "/groups ‚Äî —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (–≥–¥–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)\n"
        "/setforward <chat_id> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ (–≤–ª–∞–¥–µ–ª–µ—Ü)\n"
        "/removeforward <chat_id> ‚Äî —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ (–≤–ª–∞–¥–µ–ª–µ—Ü)\n"
        "/listforwards ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏\n"
        "/allowforward <user_id> ‚Äî —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –≤ –ª–∏—á–∫—É\n"
        "/disallowforward <user_id> ‚Äî –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å\n"
        "/about ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É —Å —Å—É–º–º–æ–π: +1000 –∑–∞—Ä–ø–ª–∞—Ç–∞ –∏–ª–∏ -200 —Ö–ª–µ–±\n"
        "–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –æ–¥–Ω–æ–º –∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫–Ω–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞."
    )
    today_key = get_today_key()
    msg_info = data.get("active_messages", {}).get(today_key, {}).get(str(chat_id))
    try:
        if msg_info:
            bot.edit_message_text(f"üí¨ –í–µ—Ä—Å–∏—è: {VERSION}\n\n{text}", chat_id=chat_id, message_id=msg_info, reply_markup=build_main_keyboard(chat_id))
        else:
            sent = bot.send_message(chat_id, f"üí¨ –í–µ—Ä—Å–∏—è: {VERSION}\n\n{text}", reply_markup=build_main_keyboard(chat_id))
            set_today_active_window(chat_id, sent.message_id)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ /start: {e}")
        try:
            sent = bot.send_message(chat_id, f"üí¨ –í–µ—Ä—Å–∏—è: {VERSION}\n\n{text}", reply_markup=build_main_keyboard(chat_id))
            set_today_active_window(chat_id, sent.message_id)
        except Exception as e2:
            log_error(f"–û—à–∏–±–∫–∞ /start –æ—Ç–ø—Ä–∞–≤–∫–∏ fallback: {e2}")

@bot.message_handler(commands=["myid"])
def cmd_myid(msg):
    bot.reply_to(msg, f"üÜî –í–∞—à user ID: {msg.from_user.id}")

@bot.message_handler(commands=["chatid"])
def cmd_chatid(msg):
    bot.reply_to(msg, f"üí¨ ID —á–∞—Ç–∞: {msg.chat.id}")

@bot.message_handler(commands=["groups"])
def cmd_groups(msg):
    chs = list(data.get("chats", {}).keys())
    if not chs:
        bot.reply_to(msg, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.")
        return
    bot.reply_to(msg, "–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —á–∞—Ç—ã (ID):\n" + "\n".join(chs))

@bot.message_handler(commands=["setforward"])
def cmd_setforward(msg):
    parts = msg.text.split()
    if str(msg.from_user.id) != str(OWNER_ID):
        bot.reply_to(msg, "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ü–µ–ª—è–º–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.")
        return
    if len(parts) < 2:
        bot.reply_to(msg, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setforward <chat_id>")
        return
    try:
        cid = int(parts[1])
        if cid in data.get("forward_targets", []):
            bot.reply_to(msg, "–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.")
            return
        data.setdefault("forward_targets", []).append(cid)
        save_data()
        bot.reply_to(msg, f"‚úÖ –¶–µ–ª—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {cid}")
    except:
        bot.reply_to(msg, "–ù–µ–≤–µ—Ä–Ω—ã–π chat_id (—á–∏—Å–ª–æ).")

@bot.message_handler(commands=["removeforward"])
def cmd_removeforward(msg):
    parts = msg.text.split()
    if str(msg.from_user.id) != str(OWNER_ID):
        bot.reply_to(msg, "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ü–µ–ª—è–º–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.")
        return
    if len(parts) < 2:
        bot.reply_to(msg, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeforward <chat_id>")
        return
    try:
        cid = int(parts[1])
        if cid not in data.get("forward_targets", []):
            bot.reply_to(msg, "–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.")
            return
        data["forward_targets"].remove(cid)
        save_data()
        bot.reply_to(msg, f"‚úÖ –¶–µ–ª—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω–∞: {cid}")
    except:
        bot.reply_to(msg, "–ù–µ–≤–µ—Ä–Ω—ã–π chat_id (—á–∏—Å–ª–æ).")

@bot.message_handler(commands=["listforwards"])
def cmd_listforwards(msg):
    targets = data.get("forward_targets", [])
    if not targets:
        bot.reply_to(msg, "–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø—É—Å—Ç.")
        return
    bot.reply_to(msg, "üì® –¶–µ–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n" + "\n".join(map(str, targets)))

@bot.message_handler(commands=["allowforward"])
def cmd_allowforward(msg):
    if str(msg.from_user.id) != str(OWNER_ID):
        bot.reply_to(msg, "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π.")
        return
    parts = msg.text.split()
    if len(parts) < 2:
        bot.reply_to(msg, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /allowforward <user_id>")
        return
    try:
        uid = int(parts[1])
        if uid in data.get("allowed_forwarders", []):
            bot.reply_to(msg, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.")
            return
        data.setdefault("allowed_forwarders", []).append(uid)
        save_data()
        bot.reply_to(msg, f"‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å: {uid}")
    except:
        bot.reply_to(msg, "–ù–µ–≤–µ—Ä–Ω—ã–π user_id.")

@bot.message_handler(commands=["disallowforward"])
def cmd_disallowforward(msg):
    if str(msg.from_user.id) != str(OWNER_ID):
        bot.reply_to(msg, "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π.")
        return
    parts = msg.text.split()
    if len(parts) < 2:
        bot.reply_to(msg, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /disallowforward <user_id>")
        return
    try:
        uid = int(parts[1])
        if uid not in data.get("allowed_forwarders", []):
            bot.reply_to(msg, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ.")
            return
        data["allowed_forwarders"].remove(uid)
        save_data()
        bot.reply_to(msg, f"‚úÖ –£–¥–∞–ª—ë–Ω –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö: {uid}")
    except:
        bot.reply_to(msg, "–ù–µ–≤–µ—Ä–Ω—ã–π user_id.")

@bot.message_handler(commands=["about"])
def cmd_about(msg):
    bot.reply_to(msg, f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª ‚Äî –≤–µ—Ä—Å–∏—è {VERSION}\n–û–¥–Ω–æ –æ–∫–Ω–æ –≤ –¥–µ–Ω—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞.")

# -----------------------------
# Webhook endpoint & root
# -----------------------------
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook_entry():
    try:
        update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
        bot.process_new_updates([update])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ webhook_entry: {e}\n{traceback.format_exc()}")
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª ‚Äî –≤–µ—Ä—Å–∏—è {VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

# -----------------------------
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook (–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É)
# -----------------------------
def set_webhook():
    url = f"{APP_URL.rstrip('/')}/{TOKEN}"
    try:
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url=url)
        log_info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")
        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
        try:
            if OWNER_ID:
                bot.send_message(int(OWNER_ID), f"üåê Webhook –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {url}")
        except Exception as e:
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ webhook: {e}")
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}\n{traceback.format_exc()}")

# -----------------------------
# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–º–µ–Ω—ã –¥–Ω—è: –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å)
# -----------------------------
def schedule_daily_window_creation():
    def task():
        last_day = get_today_key()
        while True:
            try:
                time.sleep(60)
                current_day = get_today_key()
                if current_day != last_day:
                    # create new window for all chats (balances remain)
                    for chat_id_str in list(data.get("chats", {}).keys()):
                        try:
                            chat_id = int(chat_id_str)
                        except:
                            continue
                        try:
                            update_or_send_today_window(chat_id)
                        except Exception as e:
                            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞ –Ω–æ–≤–æ–≥–æ –¥–Ω—è –¥–ª—è {chat_id}: {e}\n{traceback.format_exc()}")
                    last_day = current_day
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –≤ daily loop: {e}\n{traceback.format_exc()}")
                time.sleep(5)
    thread = threading.Thread(target=task, daemon=True)
    thread.start()

# -----------------------------
# –ó–∞–ø—É—Å–∫
# -----------------------------
if __name__ == "__main__":
    set_webhook()
    schedule_daily_window_creation()
    log_info(f"–ë–æ—Ç –§–û –≤–µ—Ä—Å–∏–∏ {VERSION} –∑–∞–ø—É—â–µ–Ω")
    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        if OWNER_ID:
            bot.send_message(int(OWNER_ID), "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ –∑–∞–ø—É—Å–∫–µ: {e}\n{traceback.format_exc()}")
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask (webhook)
    app.run(host="0.0.0.0", port=PORT)
