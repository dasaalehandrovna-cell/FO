# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.8.7
# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –Ω–æ–≤—ã–º –ø—É–Ω–∫—Ç–æ–º "–ó–Ω–∞—á–µ–Ω–∏—è"
# ============================================

import os
import json
import logging
from datetime import datetime
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)

DATA_FILE = "finance_data.json"

# -----------------------------
# –û–¢–°–ï–ö 1 ‚Äî –£—Ç–∏–ª–∏—Ç—ã
# -----------------------------
def load_data():
    if not os.path.exists(DATA_FILE):
        return {"records": []}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def format_amount(num):
    try:
        return f"{float(num):,.0f}".replace(",", ".")
    except:
        return str(num)

def calc_balance(data):
    income = sum(float(r["amount"]) for r in data["records"] if r["type"] == "–¥–æ—Ö–æ–¥")
    expense = sum(float(r["amount"]) for r in data["records"] if r["type"] == "—Ä–∞—Å—Ö–æ–¥")
    return income - expense, income, expense

# -----------------------------
# –û–¢–°–ï–ö 2 ‚Äî –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä
# -----------------------------
def main_menu():
    buttons = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_menu")],
        [InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å", callback_data="show_all")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_menu")],
    ]
    return InlineKeyboardMarkup(buttons)

def edit_menu():
    buttons = [
        [InlineKeyboardButton("üßæ CSV", callback_data="export_csv")],
        [InlineKeyboardButton("üì§ –§–æ—Ä–≤–∞—Ä–¥", callback_data="forward")],
        [InlineKeyboardButton("üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å", callback_data="recipient")],
        [InlineKeyboardButton("üí∞ –ó–Ω–∞—á–µ–Ω–∏—è", callback_data="edit_values")],
        [InlineKeyboardButton("‚ôªÔ∏è –û–±–Ω—É–ª–∏—Ç—å", callback_data="reset_confirm")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")],
    ]
    return InlineKeyboardMarkup(buttons)

# -----------------------------
# –û–¢–°–ï–ö 3 ‚Äî –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
# -----------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    balance, income, expense = calc_balance(data)
    msg = (
        f"üíº <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω</b>\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_amount(balance)}\n"
        f"üìà –î–æ—Ö–æ–¥—ã: {format_amount(income)}\n"
        f"üìâ –†–∞—Å—Ö–æ–¥—ã: {format_amount(expense)}"
    )
    if update.message:
        await update.message.reply_html(msg, reply_markup=main_menu())
    else:
        await update.callback_query.message.edit_text(msg, reply_markup=main_menu(), parse_mode="HTML")

# -----------------------------
# –û–¢–°–ï–ö 4 ‚Äî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
# -----------------------------
async def add_entry(update: Update, context: ContextTypes.DEFAULT_TYPE, entry_type):
    context.user_data["add_type"] = entry_type
    await update.callback_query.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è {entry_type}:",
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    if "add_type" in context.user_data:
        entry_type = context.user_data.pop("add_type")
        try:
            amount = float(update.message.text.strip())
        except:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
        data["records"].append({
            "type": entry_type,
            "amount": amount,
            "time": datetime.now().strftime("%d.%m.%Y %H:%M"),
        })
        save_data(data)
        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=main_menu())
    elif "edit_record" in context.user_data:
        record_id = context.user_data.pop("edit_record")
        new_val = update.message.text.strip()
        data = load_data()
        record = data["records"][record_id]
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º: —á–∏—Å–ª–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
        try:
            record["amount"] = float(new_val)
        except:
            record["type"] = new_val
        save_data(data)
        await update.message.reply_text("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())

# -----------------------------
# –û–¢–°–ï–ö 5 ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------
async def show_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    if not data["records"]:
        await update.callback_query.message.edit_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=main_menu())
        return
    text = "<b>üìÑ –í—Å–µ –∑–∞–ø–∏—Å–∏:</b>\n\n"
    for i, r in enumerate(data["records"], 1):
        text += f"{i}. {r['type']} ‚Äî {format_amount(r['amount'])} ({r['time']})\n"
    await update.callback_query.message.edit_text(text, parse_mode="HTML", reply_markup=main_menu())

# --- –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç "–ó–Ω–∞—á–µ–Ω–∏—è" ---
async def edit_values(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    if not data["records"]:
        await update.callback_query.message.edit_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=edit_menu())
        return
    buttons = []
    for i, r in enumerate(data["records"]):
        label = f"{r['type']} ‚Äî {format_amount(r['amount'])}"
        buttons.append([InlineKeyboardButton(label, callback_data=f"editval_{i}")])
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_menu")])
    await update.callback_query.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def select_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    record_id = int(query.data.split("_")[1])
    context.user_data["edit_record"] = record_id
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n(—á–∏—Å–ª–æ = —Å—É–º–º–∞, —Ç–µ–∫—Å—Ç = –∫–∞—Ç–µ–≥–æ—Ä–∏—è)"
    )

# -----------------------------
# –û–¢–°–ï–ö 6 ‚Äî –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã
# -----------------------------
async def reset_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton("‚úÖ –î–∞, –æ–±–Ω—É–ª–∏—Ç—å", callback_data="reset_yes")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="edit_menu")],
    ]
    await update.callback_query.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏?", reply_markup=InlineKeyboardMarkup(buttons))

async def reset_yes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_data({"records": []})
    await update.callback_query.message.edit_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã.", reply_markup=main_menu())

# -----------------------------
# –û–¢–°–ï–ö 7 ‚Äî –ù–∞–≤–∏–≥–∞—Ü–∏—è
# -----------------------------
async def back_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

# -----------------------------
# –û–¢–°–ï–ö 8 ‚Äî –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
# -----------------------------
async def callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data

    if data == "add_menu":
        buttons = [
            [InlineKeyboardButton("üìà –î–æ—Ö–æ–¥", callback_data="add_income")],
            [InlineKeyboardButton("üìâ –†–∞—Å—Ö–æ–¥", callback_data="add_expense")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")],
        ]
        await q.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:", reply_markup=InlineKeyboardMarkup(buttons))

    elif data == "add_income":
        await add_entry(update, context, "–¥–æ—Ö–æ–¥")

    elif data == "add_expense":
        await add_entry(update, context, "—Ä–∞—Å—Ö–æ–¥")

    elif data == "show_all":
        await show_all(update, context)

    elif data == "edit_menu":
        await q.message.edit_text("–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=edit_menu())

    elif data == "edit_values":
        await edit_values(update, context)

    elif data.startswith("editval_"):
        await select_value(update, context)

    elif data == "reset_confirm":
        await reset_confirm(update, context)

    elif data == "reset_yes":
        await reset_yes(update, context)

    elif data == "back_main":
        await back_main(update, context)

# -----------------------------
# –û–¢–°–ï–ö 9 ‚Äî –ó–∞–ø—É—Å–∫
# -----------------------------
def main():
    TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callbacks))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()