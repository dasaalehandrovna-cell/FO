#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.8.3 + –ø–µ—Ä–µ—Å—ã–ª–∫–∞
–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è: –æ–¥–Ω–æ –æ–∫–Ω–æ, CSV, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞
ID: Code_012 (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π)
"""

import os
import json
import csv
import logging
import re
import threading
import time
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from telebot import types
from flask import Flask, request

# -----------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")  # optional
APP_URL = os.getenv("APP_URL", "")  # –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.8.3"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -----------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[logging.FileHandler(LOG_FILE, encoding="utf-8"), logging.StreamHandler()]
)

def log_info(msg):
    logging.info(msg)

def log_error(msg):
    logging.error(msg)

log_info(f"–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–µ—Ä—Å–∏—è {VERSION}")

# -----------------------------
# –î–∞–Ω–Ω—ã–µ
# -----------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "chats": {},
        "active_messages": {},   # { "YYYY-MM-DD": { "<chat_id>": message_id } }
        "processed_messages": [],
        "forward_targets": [],   # —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö chat_id –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        "tracked_messages": {},
        "next_id": 1
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {DATA_FILE}: {e}")
            d = default_data()
    else:
        d = default_data()
    base = default_data()
    for k, v in base.items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {DATA_FILE}: {e}")

data = load_data()

# –î–æ–±–∞–≤–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ forward_targets –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
if OWNER_ID:
    try:
        oi = int(OWNER_ID)
        if oi not in data.get("forward_targets", []):
            data["forward_targets"].append(oi)
            save_data(data)
    except Exception:
        pass

# -----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–∞—Ç–∞/—á–∞—Ç)
# -----------------------------
def get_today_key():
    return datetime.now(TZ).strftime("%Y-%m-%d")

def get_chat_store(chat_id):
    cid = str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid] = {
            "balance": 0,
            "records": [],
            "next_id": 1,
            "daily_records": {},
            "active_windows": {},
            "edit_wait": None,
            "edit_target": None
        }
        save_data(data)
    return data["chats"][cid]

def get_today_active_window(chat_id):
    today = get_today_key()
    return data.get("active_messages", {}).get(today, {}).get(str(chat_id))

def set_today_active_window(chat_id, message_id):
    today = get_today_key()
    if "active_messages" not in data:
        data["active_messages"] = {}
    if today not in data["active_messages"]:
        data["active_messages"][today] = {}
    data["active_messages"][today][str(chat_id)] = message_id
    save_data(data)

# -----------------------------
# –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø–∏—Å—è–º–∏ –∏ CSV (–æ—Ç—Å—é–¥–∞ ‚Äî —Å—Ç–∞—Ä—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
# -----------------------------
def add_record_to_chat(chat_id, amount, note, owner):
    store = get_chat_store(chat_id)
    rid = data.get("next_id", 1)
    rec = {
        "id": rid,
        "short_id": f"R{rid}",
        "timestamp": datetime.now(TZ).isoformat(timespec="seconds"),
        "amount": amount,
        "note": note,
        "owner": owner
    }
    data.setdefault("records", []).append(rec)
    store.setdefault("records", []).append(rec)
    day = get_today_key()
    store.setdefault("daily_records", {}).setdefault(day, []).append(rec)
    store["balance"] = store.get("balance", 0) + amount
    data["overall_balance"] = data.get("overall_balance", 0) + amount
    data["next_id"] = rid + 1
    save_data(data)
    try:
        export_to_csv(data)
    except Exception as e:
        log_error(f"export_to_csv failed: {e}")
    return rec

def update_record_in_chat(chat_id, rid, new_amount, new_note):
    store = get_chat_store(chat_id)
    found = None
    for r in store.get("records", []):
        if r["id"] == rid:
            r["amount"] = new_amount
            r["note"] = new_note
            found = r
            break
    if found:
        for day_recs in store.get("daily_records", {}).values():
            for r in day_recs:
                if r["id"] == rid:
                    r.update(found)
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data(data)
        try:
            export_to_csv(data)
        except:
            pass
        return True, found
    return False, None

def delete_record_in_chat(chat_id, rid):
    store = get_chat_store(chat_id)
    removed = None
    for r in list(store.get("records", [])):
        if r["id"] == rid or str(r["id"]) == str(rid) or r.get("short_id") == f"R{rid}":
            removed = r
            store["records"].remove(r)
            break
    if removed:
        for day_key, recs in store.get("daily_records", {}).items():
            store["daily_records"][day_key] = [x for x in recs if x["id"] != rid]
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        data["records"] = [x for x in data.get("records", []) if x["id"] != rid]
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data(data)
        try:
            export_to_csv(data)
        except:
            pass
        return True, removed
    return False, None

def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["chat_id", "ID", "short_id", "timestamp", "amount", "note", "owner", "day_key"])
            for cid, cdata in d.get("chats", {}).items():
                for day_key, records in cdata.get("daily_records", {}).items():
                    for r in records:
                        writer.writerow([cid, r.get("id"), r.get("short_id"), r.get("timestamp"), r.get("amount"), r.get("note"), r.get("owner"), day_key])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")

# -----------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -----------------------------
def build_main_keyboard(chat_id=None, confirm_reset=False):
    kb = types.InlineKeyboardMarkup(row_width=3)
    kb.row(
        types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
        types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report"),
        types.InlineKeyboardButton("üìÇ CSV", callback_data="btn_csv")
    )
    kb.row(types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="btn_edit_list"))
    if confirm_reset:
        kb.row(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_reset"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_reset")
        )
    else:
        kb.row(types.InlineKeyboardButton("‚öôÔ∏è –û–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="btn_reset"))
    kb.row(
        types.InlineKeyboardButton("üöÄ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="btn_start"),
        types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="btn_cod")
    )
    balance_text = ""
    if chat_id is not None:
        store = get_chat_store(chat_id)
        balance_text = f"üí∞ {store.get('balance', 0)} ARS"
    kb.add(types.InlineKeyboardButton(balance_text or "üí∞ 0 ARS", callback_data="noop"))
    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    kb.add(types.InlineKeyboardButton("üéØ –õ–∏—Å—Ç —Ü–µ–ª–µ–π", callback_data="btn_forward_list"))
    return kb

def build_edit_keyboard_for_record(rid):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.row(
        types.InlineKeyboardButton("‚úè –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_change_{rid}"),
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"edit_delete_{rid}")
    )
    kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_back_to_list"))
    return kb

def build_confirm_delete_keyboard(rid):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.row(types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{rid}"),
           types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete"))
    return kb

def build_forward_targets_keyboard():
    kb = types.InlineKeyboardMarkup(row_width=1)
    targets = data.get("forward_targets", [])
    if targets:
        for tid in targets:
            kb.add(types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {tid}", callback_data=f"del_target_{tid}"))
    else:
        kb.add(types.InlineKeyboardButton("–ù–µ—Ç —Ü–µ–ª–µ–π", callback_data="noop"))
    kb.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é", callback_data="add_target"))
    kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

# -----------------------------
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ –æ–∫–Ω–∞ (–∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ)
# -----------------------------
def update_or_send_today_window(chat_id, create_if_missing=True):
    today_key = get_today_key()
    store = get_chat_store(chat_id)
    day_records = store.get("daily_records", {}).get(today_key, [])

    daily_income = sum(r["amount"] for r in day_records if r["amount"] > 0)
    daily_expense = sum(r["amount"] for r in day_records if r["amount"] < 0)
    overall_balance = store.get("balance", 0)

    if not day_records:
        text = (
            f"üìÖ {today_key}\n"
            f"–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.\n"
            f"üíµ –ü—Ä–∏—Ö–æ–¥: {daily_income} ARS\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(daily_expense)} ARS\n"
            f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS"
        )
    else:
        lines = [f"üìÖ {today_key}", "üìã –û–ø–µ—Ä–∞—Ü–∏–∏:"]
        for r in day_records[-50:]:
            sign = "+" if r["amount"] > 0 else "-"
            lines.append(f"{r['short_id']}: {sign}{abs(r['amount'])} ‚Äî {r.get('note','')}")
        lines.append(
            f"\nüíµ –ü—Ä–∏—Ö–æ–¥: {daily_income} ARS\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(daily_expense)} ARS\n"
            f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS"
        )
        text = "\n".join(lines)

    kb = build_main_keyboard(chat_id)
    today_msgs = data.setdefault("active_messages", {}).setdefault(today_key, {})
    active_id = today_msgs.get(str(chat_id))

    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –µ—Å—Ç—å ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    if active_id:
        try:
            bot.edit_message_text(text, chat_id, active_id, reply_markup=kb)
        except telebot.apihelper.ApiException as e:
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ {active_id} –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        return

    if not create_if_missing:
        return

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
    try:
        sent = bot.send_message(chat_id, text, reply_markup=kb)
        today_msgs[str(chat_id)] = sent.message_id
        save_data(data)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è {chat_id}: {e}")

# -----------------------------
# Callback handler (–∫–Ω–æ–ø–∫–∏)
# -----------------------------
@bot.callback_query_handler(func=lambda c: True)
def handle_callback(call):
    try:
        chat_id = call.message.chat.id
    except Exception:
        return
    store = get_chat_store(chat_id)
    today_key = get_today_key()
    day_records = store.get("daily_records", {}).get(today_key, [])
    today_msgs = data.setdefault("active_messages", {}).setdefault(today_key, {})
    active_id = today_msgs.get(str(chat_id))

    # –ë–∞–ª–∞–Ω—Å
    if call.data == "btn_balance":
        daily_income = sum(r["amount"] for r in day_records if r["amount"] > 0)
        daily_expense = sum(r["amount"] for r in day_records if r["amount"] < 0)
        overall_balance = store.get("balance", 0)
        text = (
            f"üìÖ {today_key}\n\n"
            f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS\n"
            f"üíµ –ü—Ä–∏—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {daily_income} ARS\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {abs(daily_expense)} ARS"
        )
        if active_id:
            try:
                bot.edit_message_text(text, chat_id, active_id, reply_markup=build_main_keyboard(chat_id))
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–Ω–∞ (–ë–∞–ª–∞–Ω—Å): {e}")
        else:
            update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")
        return

    # –û—Ç—á—ë—Ç (—Ä–∞—Å—Ö–æ–¥—ã)
    if call.data == "btn_report":
        expenses = [r for r in day_records if r["amount"] < 0]
        daily_expense_total = sum(abs(r["amount"]) for r in expenses)
        if not expenses:
            text = f"üìÖ {today_key}\n–ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\nüí∏ –†–∞—Å—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å: 0 ARS"
        else:
            lines = [f"üìÖ {today_key}", "üìã –†–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å:"]
            for r in expenses[-30:]:
                lines.append(f"{r['short_id']}: -{abs(r['amount'])} ‚Äî {r.get('note','')}")
            lines.append(f"\nüí∏ –†–∞—Å—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å: {daily_expense_total} ARS")
            text = "\n".join(lines)
        if active_id:
            try:
                bot.edit_message_text(text, chat_id, active_id, reply_markup=build_main_keyboard(chat_id))
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–Ω–∞ (–û—Ç—á—ë—Ç): {e}")
        else:
            update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–û—Ç—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω üìä")
        return

    # CSV
    if call.data == "btn_csv":
        try:
            with open(CSV_FILE, "rb") as f:
                bot.send_document(chat_id, f, caption="üìÇ –í–∞—à —Ñ–∞–π–ª data.csv")
            bot.answer_callback_query(call.id, "CSV –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üìÅ")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CSV: {e}")
            bot.answer_callback_query(call.id)
        return

    # –û–±–Ω—É–ª–µ–Ω–∏–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if call.data == "btn_reset":
        if active_id:
            try:
                bot.edit_message_text("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:", chat_id, active_id,
                                      reply_markup=build_main_keyboard(chat_id, confirm_reset=True))
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞: {e}")
        else:
            update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id)
        return

    if call.data == "confirm_reset":
        store["records"] = []
        store["daily_records"] = {}
        store["balance"] = 0
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–∞—Ç–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–ø–æ owner == chat_id)
        data["records"] = [x for x in data.get("records", []) if x.get("owner") != chat_id]
        try:
            data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        except:
            data["overall_balance"] = 0
        save_data(data)
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã üßπ")
        return

    if call.data == "cancel_reset":
        if active_id:
            try:
                update_or_send_today_window(chat_id)
            except:
                pass
        bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–∞")
        return

    # –û–±–Ω–æ–≤–∏—Ç—å
    if call.data == "btn_start":
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–û–∫–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ üîÑ")
        return

    # –ò–Ω—Ñ–æ
    if call.data == "btn_cod":
        info_text = (
            f"‚ÑπÔ∏è –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è {VERSION}\n\n"
            "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –æ—Ç—á—ë—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/chat_id –∏–ª–∏ /my_chat_id - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π ID —á–∞—Ç–∞\n"
            "/forward_list –∏–ª–∏ /–ª–∏—Å—Ç_—Ü–µ–ª–µ–π - –ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏\n"
            "/forward_add <id> –∏–ª–∏ /–¥–æ–±–∞–≤–∏—Ç—å_—Ü–µ–ª—å <id> - –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏\n"
            "/forward_remove <id> –∏–ª–∏ /—É–¥–∞–ª–∏—Ç—å_—Ü–µ–ª—å <id> - –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏\n"
            "/csv - –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)\n\n"
            "üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π (–≤ —Å–æ–æ–±—â–µ–Ω–∏–∏):\n"
            "+500 –ó–∞—Ä–ø–ª–∞—Ç–∞\n"
            "-150 –û–±–µ–¥\n"
            "200 –¢–∞–∫—Å–∏  (–±–µ–∑ –∑–Ω–∞–∫–∞ = —Ä–∞—Å—Ö–æ–¥)\n\n"
            "‚úèÔ∏è –ù–∞–∂–º–∏—Ç–µ ¬´‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å—è–º–∏ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª—è—Ç—å)."
        )
        if active_id:
            try:
                bot.edit_message_text(info_text, chat_id, active_id, reply_markup=build_main_keyboard(chat_id))
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–Ω–∞ (–ò–Ω—Ñ–æ): {e}")
        else:
            try:
                sent = bot.send_message(chat_id, info_text, reply_markup=build_main_keyboard(chat_id))
                set_today_active_window(chat_id, sent.message_id)
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ: {e}")
        bot.answer_callback_query(call.id)
        return

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
    if call.data == "btn_edit_list":
        if not day_records:
            text = f"üìÖ {today_key}\n–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è."
            if active_id:
                try:
                    bot.edit_message_text(text, chat_id, active_id, reply_markup=build_main_keyboard(chat_id))
                except Exception as e:
                    log_error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–Ω–∞ (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫): {e}")
            else:
                update_or_send_today_window(chat_id)
            bot.answer_callback_query(call.id, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        lines = [f"üìÖ {today_key}", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"]
        kb = types.InlineKeyboardMarkup(row_width=1)
        for r in reversed(day_records[-20:]):
            sign = "+" if r["amount"] > 0 else "-"
            label = f"{r['short_id']}: {sign}{abs(r['amount'])} ‚Äî {r.get('note','')}"
            kb.add(types.InlineKeyboardButton(label, callback_data=f"rec_{r['id']}"))
        kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        text = "\n".join(lines)

        if active_id:
            try:
                bot.edit_message_text(text, chat_id, active_id, reply_markup=kb)
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        else:
            try:
                sent = bot.send_message(chat_id, text, reply_markup=kb)
                set_today_active_window(chat_id, sent.message_id)
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        bot.answer_callback_query(call.id)
        return

    # –í—ã–±—Ä–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
    if call.data and call.data.startswith("rec_"):
        try:
            rid = int(call.data.split("_",1)[1])
        except:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID")
            return
        rec = None
        for r in day_records:
            if r["id"] == rid:
                rec = r
                break
        if not rec:
            bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        sign = "+" if rec["amount"] > 0 else "-"
        text = f"–ó–∞–ø–∏—Å—å {rec['short_id']}\n{sign}{abs(rec['amount'])} ‚Äî {rec.get('note','')}\n–î–æ–±–∞–≤–ª–µ–Ω–∞: {rec.get('timestamp')}"
        kb = build_edit_keyboard_for_record(rid)
        if active_id:
            try:
                bot.edit_message_text(text, chat_id, active_id, reply_markup=kb)
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏: {e}")
        else:
            try:
                sent = bot.send_message(chat_id, text, reply_markup=kb)
                set_today_active_window(chat_id, sent.message_id)
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏: {e}")
        bot.answer_callback_query(call.id)
        return

    # –ù–∞–∂–∞–ª–∏ "–ò–∑–º–µ–Ω–∏—Ç—å" –Ω–∞ –∑–∞–ø–∏—Å–∏
    if call.data and call.data.startswith("edit_change_"):
        try:
            rid = int(call.data.split("_",2)[2])
        except:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID")
            return
        store["edit_wait"] = "change_value"
        store["edit_target"] = rid
        save_data(data)
        bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∏ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ R{rid} –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<—Å—É–º–º–∞> <–∑–∞–º–µ—Ç–∫–∞>\n–ü—Ä–∏–º–µ—Ä—ã:\n+500 –ó–∞—Ä–ø–ª–∞—Ç–∞\n-150 –û–±–µ–¥\n200 –¢–∞–∫—Å–∏ (–±–µ–∑ –∑–Ω–∞–∫–∞ = —Ä–∞—Å—Ö–æ–¥)")
        bot.answer_callback_query(call.id)
        return

    # –ù–∞–∂–∞–ª–∏ "–£–¥–∞–ª–∏—Ç—å" ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if call.data and call.data.startswith("edit_delete_"):
        try:
            rid = int(call.data.split("_",2)[2])
        except:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID")
            return
        if active_id:
            try:
                bot.edit_message_text(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ R{rid}:", chat_id, active_id, reply_markup=build_confirm_delete_keyboard(rid))
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        else:
            try:
                sent = bot.send_message(chat_id, f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ R{rid}:", reply_markup=build_confirm_delete_keyboard(rid))
                set_today_active_window(chat_id, sent.message_id)
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        bot.answer_callback_query(call.id)
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ
    if call.data and call.data.startswith("confirm_delete_"):
        try:
            rid = int(call.data.split("_",2)[2])
        except:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID")
            return
        success, removed = delete_record_in_chat(chat_id, rid)
        store["edit_wait"] = None
        store["edit_target"] = None
        save_data(data)
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞" if success else "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    if call.data == "cancel_delete":
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è")
        return

    # –ù–∞–∑–∞–¥ / –í–æ–∑–≤—Ä–∞—Ç
    if call.data in ("back_to_main", "edit_back_to_list", "edit_back"):
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)
    if call.data == "btn_forward_list":
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–µ–ª—è–º–∏
        text = "üéØ –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏ (–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):"
        if active_id:
            try:
                bot.edit_message_text(text, chat_id, active_id, reply_markup=build_forward_targets_keyboard())
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π: {e}")
        else:
            try:
                sent = bot.send_message(chat_id, text, reply_markup=build_forward_targets_keyboard())
                set_today_active_window(chat_id, sent.message_id)
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π: {e}")
        bot.answer_callback_query(call.id)
        return

    if call.data and call.data.startswith("del_target_"):
        try:
            tid = int(call.data.split("_",2)[2])
        except:
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID")
            return
        if tid in data.get("forward_targets", []):
            data["forward_targets"].remove(tid)
            save_data(data)
        # –æ–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, f"–¶–µ–ª—å {tid} —É–¥–∞–ª–µ–Ω–∞" )
        return

    if call.data == "add_target":
        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ ID —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤ —á–∞—Ç–µ)
        store["edit_wait"] = "add_forward"
        save_data(data)
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ chat_id –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ü–µ–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ (–ø—Ä–∏–º–µ—Ä: 123456789):")
        bot.answer_callback_query(call.id)
        return

    # noop –∏ –¥—Ä.
    if call.data == "noop":
        bot.answer_callback_query(call.id)
        return

    bot.answer_callback_query(call.id)
    return

# -----------------------------
# –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
# -----------------------------
num_re = re.compile(r'([+-]?\s*\d+)')

@bot.message_handler(func=lambda m: True, content_types=['text', 'photo', 'sticker', 'document', 'audio', 'voice', 'video'])
def handle_message(msg):
    chat_id = msg.chat.id
    store = get_chat_store(chat_id)
    wait_action = store.get("edit_wait")

    # –ù–ï –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    try:
        if getattr(msg.from_user, "is_bot", False):
            return
    except:
        pass

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ (–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è add_target)
    if wait_action == "add_forward":
        text = (msg.text or "").strip()
        try:
            tid = int(text)
            if tid not in data.get("forward_targets", []):
                data.setdefault("forward_targets", []).append(tid)
                save_data(data)
                bot.send_message(chat_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ü–µ–ª—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏: `{tid}`", parse_mode="Markdown")
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –≠—Ç–æ—Ç ID —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
        except:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π chat_id.")
        store["edit_wait"] = None
        store["edit_target"] = None
        save_data(data)
        update_or_send_today_window(chat_id)
        return

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è '–ò–∑–º–µ–Ω–∏—Ç—å')
    if wait_action == "change_value":
        rid = store.get("edit_target")
        if not rid:
            store["edit_wait"] = None
            store["edit_target"] = None
            save_data(data)
            return
        parts = (msg.text or "").strip().split(" ", 1)
        try:
            raw_amount = parts[0].replace(" ", "")
            if raw_amount.startswith("+"):
                amount = int(raw_amount[1:])
            elif raw_amount.startswith("-"):
                amount = -int(raw_amount[1:])
            else:
                amount = -int(raw_amount)
            note = parts[1] if len(parts) > 1 else ""
            success, _ = update_record_in_chat(chat_id, rid, amount, note)
            store["edit_wait"] = None
            store["edit_target"] = None
            save_data(data)
            update_or_send_today_window(chat_id)
            bot.send_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å R{rid} {'–∏–∑–º–µ–Ω–µ–Ω–∞' if success else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}")
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +500 –ó–∞—Ä–ø–ª–∞—Ç–∞ –∏–ª–∏ -150 –û–±–µ–¥ –∏–ª–∏ 200 –¢–∞–∫—Å–∏")
        return

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ targets (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç)
    try:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã). –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–∞ media.
        text = msg.text or ""
        if text and data.get("forward_targets"):
            username = getattr(msg.from_user, "username", None) or getattr(msg.from_user, "first_name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
            author_info = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} (ID {msg.from_user.id}) –≤ —á–∞—Ç–µ {msg.chat.id}:\n\n{text}"
            for target in list(data.get("forward_targets", [])):
                try:
                    if target == msg.chat.id:
                        continue  # –Ω–µ —Å–ª–∞—Ç—å –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç
                    bot.send_message(int(target), author_info)
                except Exception as e:
                    log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ {target}: {e}")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å: {e}")

    # –ï—Å–ª–∏ –Ω–∏–∫–∞–∫–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º –∞–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
    if wait_action is None:
        if not msg.text:
            return
        m = num_re.search(msg.text)
        if m:
            try:
                raw = m.group(1).replace(" ", "")
                if raw.startswith("+"):
                    amount = int(raw[1:])
                elif raw.startswith("-"):
                    amount = -int(raw[1:])
                else:
                    amount = -int(raw)
                note = msg.text.replace(m.group(1), "").strip()
                add_record_to_chat(chat_id, amount, note, msg.from_user.id)
                update_or_send_today_window(chat_id)
                # –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø. —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –æ–∫–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—Å—è
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        return

    # –ø—Ä–æ—á–∏–µ wait_action –≤–µ—Ç–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ
    return

# -----------------------------
# –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π (–∞–ª–∏–∞—Å—ã –∞–Ω–≥–ª/—Ä—É—Å)
# -----------------------------
@bot.message_handler(commands=["forward_list", "–ª–∏—Å—Ç_—Ü–µ–ª–µ–π"])
def cmd_forward_list(msg):
    targets = data.get("forward_targets", [])
    if not targets:
        bot.send_message(msg.chat.id, "üì≠ –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø—É—Å—Ç.")
        return
    text = "üìã –¶–µ–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n" + "\n".join([f"‚Ä¢ {t}" for t in targets])
    bot.send_message(msg.chat.id, text)

@bot.message_handler(commands=["forward_add", "–¥–æ–±–∞–≤–∏—Ç—å_—Ü–µ–ª—å"])
def cmd_forward_add(msg):
    parts = (msg.text or "").strip().split()
    if len(parts) < 2:
        bot.send_message(msg.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/forward_add <chat_id>\n–∏–ª–∏\n/–¥–æ–±–∞–≤–∏—Ç—å_—Ü–µ–ª—å <chat_id>")
        return
    try:
        tid = int(parts[1])
        if tid not in data.get("forward_targets", []):
            data.setdefault("forward_targets", []).append(tid)
            save_data(data)
            bot.send_message(msg.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: `{tid}`", parse_mode="Markdown")
        else:
            bot.send_message(msg.chat.id, "‚ö†Ô∏è –≠—Ç–æ—Ç ID —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
    except Exception as e:
        bot.send_message(msg.chat.id, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=["forward_remove", "—É–¥–∞–ª–∏—Ç—å_—Ü–µ–ª—å"])
def cmd_forward_remove(msg):
    parts = (msg.text or "").strip().split()
    if len(parts) < 2:
        bot.send_message(msg.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/forward_remove <chat_id>\n–∏–ª–∏\n/—É–¥–∞–ª–∏—Ç—å_—Ü–µ–ª—å <chat_id>")
        return
    try:
        tid = int(parts[1])
        if tid in data.get("forward_targets", []):
            data["forward_targets"].remove(tid)
            save_data(data)
            bot.send_message(msg.chat.id, f"üóë –£–¥–∞–ª–µ–Ω–æ: `{tid}`", parse_mode="Markdown")
        else:
            bot.send_message(msg.chat.id, "‚ö†Ô∏è –¢–∞–∫–æ–≥–æ ID –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
    except Exception as e:
        bot.send_message(msg.chat.id, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=["chat_id", "my_chat_id"])
def cmd_chat_id(msg):
    bot.send_message(msg.chat.id, f"üÜî ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{msg.chat.id}`", parse_mode="Markdown")

# -----------------------------
# Webhook / Polling –∑–∞–ø—É—Å–∫
# -----------------------------
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook_route():
    # –µ—Å–ª–∏ webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî Telegram –ø—Ä–∏—à–ª—ë—Ç update —Å—é–¥–∞
    try:
        update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
        bot.process_new_updates([update])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ webhook_route: {e}")
    return "OK", 200

@app.route("/", methods=["GET"])
def index_route():
    return f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è {VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

def set_webhook():
    if not APP_URL:
        return
    url = f"{APP_URL.rstrip('/')}/{TOKEN}"
    try:
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url=url)
        log_info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

def start_polling():
    log_info("–ó–∞–ø—É—Å–∫ polling...")
    try:
        bot.remove_webhook()
    except:
        pass
    bot.infinity_polling(timeout=60, long_polling_timeout=60)

if __name__ == "__main__":
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω APP_URL ‚Äî —Å—Ç–∞–≤–∏–º webhook –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Flask
    if APP_URL:
        set_webhook()
        log_info("–ó–∞–ø—É—Å–∫ Flask (webhook mode)")
        app.run(host="0.0.0.0", port=PORT)
    else:
        # polling mode
        log_info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (APP_URL –Ω–µ –∑–∞–¥–∞–Ω).")
        start_polling()
    elif data.startswith("confirm_delete_"):
        item = data.split("_", 2)[2]
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_yes_{item}"))
        markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_back"))
        await bot.edit_message_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å: {item}?",
            call.message.chat.id, call.message.id, reply_markup=markup
        )

    elif data.startswith("delete_yes_"):
        item = data.split("_", 2)[2]
        delete_item(item)
        await bot.edit_message_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å '{item}' —É–¥–∞–ª–µ–Ω–∞.", call.message.chat.id, call.message.id
        )
        await asyncio.sleep(2)
        await show_menu(call.message)

    elif data == "menu_back":
        await show_menu(call.message)

# -----------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å CSV –∏ –¥–∞–Ω–Ω—ã–º–∏
# -----------------------------
def add_item(item):
    data = load_data()
    data.append(item)
    save_data(data)

def delete_item(item):
    data = load_data()
    data = [i for i in data if i != item]
    save_data(data)

def load_data():
    if not os.path.exists(DATA_FILE):
        return []
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def save_targets(targets):
    with open(TARGETS_FILE, "w", encoding="utf-8") as f:
        json.dump(targets, f, ensure_ascii=False, indent=2)

def load_targets():
    if not os.path.exists(TARGETS_FILE):
        return []
    with open(TARGETS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

# -----------------------------
# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# -----------------------------
@dp.message_handler(content_types=['text', 'photo', 'document', 'video', 'audio', 'voice'])
async def forward_incoming_messages(message: types.Message):
    targets = load_targets()

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –±–æ—Ç–∞
    if message.chat.id != message.from_user.id or message.from_user.is_bot:
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã
    for target in targets:
        try:
            if message.text:
                await bot.send_message(target, f"üì© <b>–û—Ç:</b> {message.from_user.first_name}\n\n{message.text}", parse_mode="HTML")
            elif message.photo:
                await bot.send_photo(target, message.photo[-1].file_id, caption=f"üì© <b>–û—Ç:</b> {message.from_user.first_name}", parse_mode="HTML")
            elif message.document:
                await bot.send_document(target, message.document.file_id, caption=f"üì© <b>–û—Ç:</b> {message.from_user.first_name}", parse_mode="HTML")
            elif message.video:
                await bot.send_video(target, message.video.file_id, caption=f"üì© <b>–û—Ç:</b> {message.from_user.first_name}", parse_mode="HTML")
            elif message.audio:
                await bot.send_audio(target, message.audio.file_id, caption=f"üì© <b>–û—Ç:</b> {message.from_user.first_name}", parse_mode="HTML")
            elif message.voice:
                await bot.send_voice(target, message.voice.file_id, caption=f"üì© <b>–û—Ç:</b> {message.from_user.first_name}", parse_mode="HTML")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ —á–∞—Ç {target}: {e}")

# -----------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# -----------------------------
async def on_startup(_):
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)