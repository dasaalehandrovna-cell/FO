# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞
# –í–µ—Ä—Å–∏—è: 3.1
# ============================================

# -----------------------------
# –û–¢–°–ï–ö 1 ‚Äî –ò–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------------
import os, json, csv, logging, threading, time, re
from datetime import datetime
from zoneinfo import ZoneInfo
import telebot
from flask import Flask, request
from telebot import types

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ env –∏–ª–∏ –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ)
TOKEN = os.getenv("BOT_TOKEN", "")     # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ
OWNER_ID = int(os.getenv("OWNER_ID", "0") or 0)
APP_URL = os.getenv("APP_URL", "https://example-app.onrender.com")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "3.1"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ ‚Äî –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø–∞–¥–∞—Ç—å —Å –ø–æ–Ω—è—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
if not TOKEN or ":" not in TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –µ—Å—Ç—å BOT_TOKEN –∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç ':'.")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[logging.FileHandler(LOG_FILE, encoding="utf-8"), logging.StreamHandler()]
)
def log_info(msg): logging.info(msg)
def log_error(msg): logging.error(msg)

log_info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –§–û –≤–µ—Ä—Å–∏—è {VERSION}")

# -----------------------------
# –û–¢–°–ï–ö 2 ‚Äî –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏ IO
# -----------------------------
def default_data():
    return {"overall_balance":0,"records":[],"chats":{},"active_messages":{},"next_id":1}

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE,"r",encoding="utf-8") as f:
                d=json.load(f)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ data.json: {e}")
            d=default_data()
    else:
        d=default_data()
    # –¥–æ–ø–æ–ª–Ω—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
    base=default_data()
    for k,v in base.items():
        if k not in d:
            d[k]=v
    return d

def save_data(d):
    try:
        with open(DATA_FILE,"w",encoding="utf-8") as f:
            json.dump(d,f,ensure_ascii=False,indent=2)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

data = load_data()

# -----------------------------
# –û–¢–°–ï–ö 3 ‚Äî –ß–∞—Ç/–¥–∞—Ç–∞/—Ñ–æ—Ä–º–∞—Ç
# -----------------------------
def get_today_key(): return datetime.now(TZ).strftime("%Y-%m-%d")
def get_chat_store(chat_id):
    cid=str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid]={"balance":0,"records":[],"next_id":1,"daily_records":{},"active_windows":{},"edit_wait":None,"edit_target":None,"forward_target":None}
        save_data(data)
    return data["chats"][cid]

def get_today_active_window(chat_id):
    today=get_today_key()
    return data.get("active_messages",{}).get(today,{}).get(str(chat_id))

def set_today_active_window(chat_id,message_id):
    today=get_today_key()
    if "active_messages" not in data: data["active_messages"]={}
    if today not in data["active_messages"]: data["active_messages"][today]={}
    data["active_messages"][today][str(chat_id)]=message_id
    save_data(data)

def format_amount(a):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ç—ã—Å—è—á–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ –ø—Ä–æ–±–µ–ª–æ–º, –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–±–∞–≤–ª—è–µ—Ç +.
    sign = "+" if a>0 else ""
    return f"{sign}{abs(int(a)):,}".replace(",", " ")

# -----------------------------
# –û–¢–°–ï–ö 4 ‚Äî –≠–∫—Å–ø–æ—Ä—Ç CSV
# -----------------------------
def export_to_csv(d):
    try:
        with open(CSV_FILE,"w",newline='',encoding="utf-8") as f:
            writer=csv.writer(f)
            writer.writerow(["chat_id","ID","timestamp","amount","note","owner","day_key"])
            for cid,cdata in d.get("chats",{}).items():
                for day_key,records in cdata.get("daily_records",{}).items():
                    for r in records:
                        writer.writerow([cid,r.get("id"),r.get("timestamp"),r.get("amount"),r.get("note"),r.get("owner"),day_key])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")

# -----------------------------
# –û–¢–°–ï–ö 5 ‚Äî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
# -----------------------------
def add_record_to_chat(chat_id,amount,note,owner):
    store=get_chat_store(chat_id)
    rid=data.get("next_id",1)
    rec={"id":rid,"short_id":f"R{rid}","timestamp":datetime.now(TZ).isoformat(timespec="seconds"),"amount":int(amount),"note":note,"owner":owner}
    data.setdefault("records",[]).append(rec)
    store.setdefault("records",[]).append(rec)
    day=get_today_key()
    store.setdefault("daily_records",{}).setdefault(day,[]).append(rec)
    store["balance"]=sum([r["amount"] for r in store.get("records",[])])
    data["overall_balance"]=sum([r["amount"] for r in data.get("records",[])])
    data["next_id"]=rid+1
    save_data(data)
    try: export_to_csv(data)
    except: pass
    return rec

def update_record_in_chat(chat_id,rid,new_amount,new_note):
    store=get_chat_store(chat_id)
    found=None
    for r in store.get("records",[]):
        if r["id"]==rid:
            r["amount"]=int(new_amount)
            r["note"]=new_note
            found=r
            break
    if found:
        for day_recs in store.get("daily_records",{}).values():
            for r in day_recs:
                if r["id"]==rid:
                    r.update(found)
        store["balance"]=sum([x["amount"] for x in store.get("records",[])])
        data["overall_balance"]=sum([x["amount"] for x in data.get("records",[])])
        save_data(data)
        export_to_csv(data)
        return True,found
    return False,None

def delete_record_in_chat(chat_id,rid):
    store=get_chat_store(chat_id)
    removed=None
    for r in list(store.get("records",[])):
        if r["id"]==rid or str(r["id"])==str(rid) or r.get("short_id")==f"R{rid}":
            removed=r
            store["records"].remove(r)
            break
    if removed:
        for day_key,recs in store.get("daily_records",{}).items():
            store["daily_records"][day_key]=[x for x in recs if x["id"]!=rid]
        store["balance"]=sum([x["amount"] for x in store.get("records",[])])
        data["records"]=[x for x in data.get("records",[]) if x["id"]!=rid]
        data["overall_balance"]=sum([x["amount"] for x in data.get("records",[])])
        save_data(data)
        export_to_csv(data)
        return True,removed
    return False,None

# -----------------------------
# –û–¢–°–ï–ö 6 ‚Äî –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ ¬´–°—Ç–∞—Ä—Ç¬ª
# -----------------------------
def build_main_keyboard(chat_id=None, confirm_reset=False):
    kb = types.InlineKeyboardMarkup(row_width=3)
    kb.row(
        types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
        types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report"),
        types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="btn_edit")
    )
    if confirm_reset:
        kb.row(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_reset"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_reset")
        )
    else:
        kb.row(
            types.InlineKeyboardButton("‚ôªÔ∏è –û–±–Ω—É–ª–∏—Ç—å", callback_data="btn_reset"),
            types.InlineKeyboardButton("üì§ CSV", callback_data="export_csv"),
            types.InlineKeyboardButton("üì§ –ü–µ—Ä–µ—Å–ª–∞—Ç—å", callback_data="btn_forward")
        )
    kb.row(
        types.InlineKeyboardButton("‚ÑπÔ∏è", callback_data="btn_cod")
    )
    balance_text = ""
    if chat_id is not None:
        store = get_chat_store(chat_id)
        balance_text = f"üí∞ {format_amount(store.get('balance',0))} ARS"
    kb.add(types.InlineKeyboardButton(balance_text or "üí∞ 0 ARS", callback_data="noop"))
    return kb

# -----------------------------
# –û–¢–°–ï–ö 7 ‚Äî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ / –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
# -----------------------------
def update_or_send_today_window(chat_id, extra_text=None):
    today_key = get_today_key()
    store = get_chat_store(chat_id)
    day_records = store.get("daily_records", {}).get(today_key, [])

    if not day_records:
        text = f"üìÖ {today_key}\n–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.\nüí∞ –ë–∞–ª–∞–Ω—Å: {format_amount(store.get('balance',0))} ARS"
    else:
        lines = [f"üìÖ {today_key}", "üìã –û–ø–µ—Ä–∞—Ü–∏–∏:"]
        for r in day_records[-50:]:
            amount_str = format_amount(r["amount"])
            lines.append(f"{r['short_id']}: {amount_str} ‚Äî {r.get('note','')}")
        lines.append(f"\nüí∞ –ë–∞–ª–∞–Ω—Å: {format_amount(store.get('balance',0))} ARS")
        text = "\n".join(lines)

    if extra_text:
        text = f"{extra_text}\n\n{text}"

    kb = build_main_keyboard(chat_id)
    today_msgs = data.setdefault("active_messages", {}).setdefault(today_key, {})
    active_id = today_msgs.get(str(chat_id))

    if active_id:
        try:
            bot.edit_message_text(text, chat_id, active_id, reply_markup=kb)
        except Exception as e:
            # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞—Ä—ã–π message_id), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            try:
                sent = bot.send_message(chat_id, text, reply_markup=kb)
                set_today_active_window(chat_id, sent.message_id)
            except Exception as e2:
                log_error(f"[update_or_send_today_window] –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e2}")
        return

    try:
        sent = bot.send_message(chat_id, text, reply_markup=kb)
        set_today_active_window(chat_id, sent.message_id)
        log_info(f"[update_or_send_today_window] –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}, message_id={sent.message_id}")
    except Exception as e:
        log_error(f"[update_or_send_today_window] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ –¥–ª—è chat {chat_id}: {e}")

# -----------------------------
# –û–¢–°–ï–ö 8 ‚Äî –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–∞–≤–∏–ª–∞: + ‚Üí –ø—Ä–∏—Ö–æ–¥, –±–µ–∑ –∏ - ‚Üí —Ä–∞—Å—Ö–æ–¥)
# -----------------------------
def parse_line_amount(line: str):
    """
    –ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (amount:int, note:str) –∏–ª–∏ (None, None).
    –ü—Ä–∞–≤–∏–ª–æ: –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '+', —Ç–æ —ç—Ç–æ –ø—Ä–∏—Ö–æ–¥ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).
             –∏–Ω–∞—á–µ (–±–µ–∑ –∑–Ω–∞–∫–∞ –∏–ª–∏ —Å '-') ‚Äî —ç—Ç–æ —Ä–∞—Å—Ö–æ–¥ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á: –ø—Ä–æ–±–µ–ª, —Ç–æ—á–∫–∞, –∑–∞–ø—è—Ç–∞—è, –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã.
    –ë–µ—Ä—ë—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ.
    """
    if not line or not line.strip():
        return None, None
    orig = line.strip()
    # –ù–∞–π–¥—ë–º –ø–µ—Ä–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å optional sign –∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ü–∏—Ñ—Ä—ã –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    m = re.search(r"^\s*([+-]?)[\s]*([\d\s\.,‚Äô']+)", orig)
    if not m:
        return None, None
    sign_token = m.group(1)  # '+' –∏–ª–∏ '-' –∏–ª–∏ ''
    numpart = m.group(2)
    # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –≤–Ω—É—Ç—Ä–∏ —á–∏—Å–ª–∞
    cleaned = re.sub(r"[ \.,‚Äô']", "", numpart)
    if not re.match(r"^\d+$", cleaned):
        # –µ—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä ‚Äî –æ—Ç–∫–∞–∑
        return None, None
    try:
        val = int(cleaned)
    except:
        return None, None
    # –ø—Ä–∞–≤–∏–ª–æ: + => income (positive), else => expense (negative)
    if sign_token == "+":
        amount = abs(val)
    else:
        amount = -abs(val)
    note = orig[m.end():].strip()
    return amount, note

@bot.message_handler(func=lambda m: True, content_types=['text'])
def handle_message(msg):
    chat_id = msg.chat.id
    text = msg.text or ""
    store = get_chat_store(chat_id)

    # 8.1 ‚Äî –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∏–∑ –ª–∏—á–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç (–±–µ–∑ —ç—Ö–æ –≤ –ª–∏—á–∫–µ)
    if chat_id == OWNER_ID and msg.chat.type == "private":
        target_chat_id = store.get("forward_target")
        if target_chat_id:
            try:
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç (–±–µ–∑ —ç—Ö–∞ –≤ –ª–∏—á–∫–µ)
                bot.send_message(target_chat_id, f"[–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ {datetime.now(TZ).date()}]\n{text}")
            except Exception as e:
                update_or_send_today_window(chat_id, extra_text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            store["forward_target"] = None
            save_data(data)
            # –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏
    # 8.2 ‚Äî –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
    if chat_id != OWNER_ID and OWNER_ID:
        try:
            bot.send_message(OWNER_ID, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {msg.from_user.first_name} ({chat_id}):\n{text}")
        except Exception as e:
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")

    # 8.3 ‚Äî –†–µ–∂–∏–º—ã –æ–∂–∏–¥–∞–Ω–∏—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ/–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏)
    wait_action = store.get("edit_wait")

    if wait_action is None:
        # –ê–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
        any_added = False
        for line in text.splitlines():
            amount, note = parse_line_amount(line)
            if amount is not None:
                add_record_to_chat(chat_id, amount, note, msg.from_user.id)
                any_added = True
        if any_added:
            update_or_send_today_window(chat_id, extra_text="‚úÖ –ó–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        else:
            # —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –ª–∏—á–∫–µ: /—É–¥–∞–ª–∏—Ç—å_–ø–µ—Ä–µ—Å—ã–ª–∫—É
            if msg.text and msg.text.strip().lower() in ["/—É–¥–∞–ª–∏—Ç—å_–ø–µ—Ä–µ—Å—ã–ª–∫—É", "/—É–¥–∞–ª–∏—Ç—å_–ø–µ—Ä–µ—Å—ã–ª–∫—É@"+bot.get_me().username]:
                # —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ (–µ—Å–ª–∏ –±—ã–ª–∞)
                store["forward_target"] = None
                save_data(data)
                update_or_send_today_window(chat_id, extra_text="üîï –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
                return
            update_or_send_today_window(chat_id)
        return

    # –µ—Å–ª–∏ –∂–¥–µ–º ID –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    if wait_action == "change_id":
        try:
            rid = int(text.strip())
            # –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
            existing = False
            for r in store.get("records",[]):
                if r["id"]==rid:
                    existing=True; break
            if existing:
                store["edit_wait"]="change_value"
                store["edit_target"]=rid
                update_or_send_today_window(chat_id, extra_text=f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∏ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ {rid} (—Å + –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞):")
            else:
                update_or_send_today_window(chat_id, extra_text="‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π ID.")
        except:
            update_or_send_today_window(chat_id, extra_text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –µ—Å–ª–∏ –∂–¥–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if wait_action == "change_value":
        rid = store.get("edit_target")
        if not rid:
            store["edit_wait"]=None
            store["edit_target"]=None
            return
        amount, note = parse_line_amount(text)
        if amount is None:
            update_or_send_today_window(chat_id, extra_text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ + –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞ –∏–ª–∏ -/–±–µ–∑ –∑–Ω–∞–∫–∞ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞.")
            return
        success,_ = update_record_in_chat(chat_id, rid, amount, note)
        if success:
            update_or_send_today_window(chat_id, extra_text=f"‚úÖ –ó–∞–ø–∏—Å—å {rid} –∏–∑–º–µ–Ω–µ–Ω–∞")
        else:
            update_or_send_today_window(chat_id, extra_text=f"‚ùå –ó–∞–ø–∏—Å—å {rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        store["edit_wait"]=None
        store["edit_target"]=None
        return

    # —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ ID
    if wait_action == "delete_id":
        try:
            rid = int(text.strip())
            success,_ = delete_record_in_chat(chat_id, rid)
            if success:
                update_or_send_today_window(chat_id, extra_text=f"‚úÖ –ó–∞–ø–∏—Å—å {rid} —É–¥–∞–ª–µ–Ω–∞")
            else:
                update_or_send_today_window(chat_id, extra_text=f"‚ùå –ó–∞–ø–∏—Å—å {rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except:
            update_or_send_today_window(chat_id, extra_text="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        store["edit_wait"]=None
        store["edit_target"]=None
        return

    # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ target –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏–∑ –ª–∏—á–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if wait_action == "set_forward_target":
        try:
            target_chat_id = int(text.strip())
            store["forward_target"] = target_chat_id
            store["edit_wait"] = None
            save_data(data)
            update_or_send_today_window(chat_id, extra_text=f"‚úÖ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –≤ —á–∞—Ç {target_chat_id}")
        except:
            update_or_send_today_window(chat_id, extra_text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

# -----------------------------
# –û–¢–°–ï–ö 9 ‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
# -----------------------------
@bot.callback_query_handler(func=lambda call: True)
def handle_buttons(call):
    chat_id = call.message.chat.id
    store = get_chat_store(chat_id)
    data_id = call.data
    msg_id = call.message.message_id

    # noop
    if data_id == "noop":
        bot.answer_callback_query(call.id)
        return

    # –±–∞–ª–∞–Ω—Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    if data_id == "btn_balance":
        bot.answer_callback_query(call.id, f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_amount(store.get('balance',0))} ARS")
        return

    # –æ—Ç—á—ë—Ç: –ø—Ä–∏—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥/–æ–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
    if data_id == "btn_report":
        today_key = get_today_key()
        day_records = store.get("daily_records", {}).get(today_key, [])
        inc = sum(r["amount"] for r in day_records if r["amount"]>0)
        exp = sum(r["amount"] for r in day_records if r["amount"]<0)
        text = (f"üìÖ {today_key}\n"
                f"–ü—Ä–∏—Ö–æ–¥: {format_amount(inc)}\n"
                f"–†–∞—Å—Ö–æ–¥: {format_amount(abs(exp))}\n"
                f"–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {format_amount(store.get('balance',0))}")
        try:
            bot.edit_message_text(text, chat_id, msg_id, reply_markup=build_main_keyboard(chat_id))
        except:
            bot.send_message(chat_id, text, reply_markup=build_main_keyboard(chat_id))
        bot.answer_callback_query(call.id)
        return

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–ø—Ä–∞–≤–∞
    if data_id == "btn_edit":
        today_key = get_today_key()
        day_records = store.get("daily_records", {}).get(today_key, [])[-12:]
        if not day_records:
            update_or_send_today_window(chat_id, extra_text="üìã –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è.")
            bot.answer_callback_query(call.id)
            return
        lines = [f"üìã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞ {today_key}:"]
        kb = types.InlineKeyboardMarkup(row_width=2)
        for r in day_records:
            amount_str = format_amount(r["amount"])
            lines.append(f"{r['short_id']}: {amount_str} ‚Äî {r.get('note','')}")
            kb.add(
                types.InlineKeyboardButton(f"‚úèÔ∏è{r['short_id']}", callback_data=f"edit_change_{r['id']}"),
                types.InlineKeyboardButton(f"üóëÔ∏è{r['short_id']}", callback_data=f"edit_delete_{r['id']}")
            )
        kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="btn_back_info"))
        text = "\n".join(lines)
        try:
            bot.edit_message_text(text, chat_id, msg_id, reply_markup=kb)
        except Exception as e:
            try:
                sent = bot.send_message(chat_id, text, reply_markup=kb)
                set_today_active_window(chat_id, sent.message_id)
            except Exception as e2:
                log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e2}")
        bot.answer_callback_query(call.id)
        return

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É id
    if data_id.startswith("edit_change_"):
        rid = int(data_id.split("_")[-1])
        # –°—Ç–∞–≤–∏–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Å—É–º–º—ã
        store["edit_wait"] = "change_id"
        store["edit_target"] = rid
        save_data(data)
        update_or_send_today_window(chat_id, extra_text=f"‚úèÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ {rid}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É (—Å + –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞).")
        bot.answer_callback_query(call.id)
        return

    if data_id.startswith("edit_delete_"):
        rid = int(data_id.split("_")[-1])
        success,_ = delete_record_in_chat(chat_id, rid)
        if success:
            update_or_send_today_window(chat_id, extra_text=f"‚úÖ –ó–∞–ø–∏—Å—å {rid} —É–¥–∞–ª–µ–Ω–∞")
        else:
            update_or_send_today_window(chat_id, extra_text=f"‚ùå –ó–∞–ø–∏—Å—å {rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        bot.answer_callback_query(call.id)
        return

    # –∫–Ω–æ–ø–∫–∞ –æ–±–Ω—É–ª–∏—Ç—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if data_id == "btn_reset":
        kb = build_main_keyboard(chat_id, confirm_reset=True)
        try:
            bot.edit_message_reply_markup(chat_id, msg_id, reply_markup=kb)
        except:
            try:
                bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:", reply_markup=kb)
            except:
                pass
        bot.answer_callback_query(call.id)
        return

    if data_id == "confirm_reset":
        # –û–±–Ω—É–ª—è–µ–º –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        data["chats"][str(chat_id)]={"balance":0,"records":[],"next_id":1,"daily_records":{},"active_windows":{},"edit_wait":None,"edit_target":None,"forward_target":None}
        save_data(data)
        export_to_csv(data)
        update_or_send_today_window(chat_id, extra_text="‚ôªÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞")
        bot.answer_callback_query(call.id)
        return

    if data_id == "cancel_reset":
        update_or_send_today_window(chat_id, extra_text="–û—Ç–º–µ–Ω–∞ ‚úÖ")
        bot.answer_callback_query(call.id)
        return

    if data_id == "export_csv":
        try:
            export_to_csv(data)
            with open(CSV_FILE, "rb") as f:
                bot.send_document(chat_id, f, caption="üìÑ –í–∞—à CSV-—Ñ–∞–π–ª")
        except Exception as e:
            update_or_send_today_window(chat_id, extra_text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å CSV.")
        bot.answer_callback_query(call.id)
        return

    # btn_forward ‚Äî –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ ID —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏–∑ –ª–∏—á–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if data_id == "btn_forward":
        store["edit_wait"] = "set_forward_target"
        save_data(data)
        update_or_send_today_window(chat_id, extra_text="üì§ –í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞, –∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤–∞—à–µ–π –ª–∏—á–∫–∏:")
        bot.answer_callback_query(call.id)
        return

    if data_id == "btn_back_info":
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id)
        return

    if data_id == "btn_cod":
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è {VERSION}\n–ü—Ä–∞–≤–∏–ª–æ: + ‚Äî –ø—Ä–∏—Ö–æ–¥, –±–µ–∑ –∑–Ω–∞–∫–∞ –∏–ª–∏ - ‚Äî —Ä–∞—Å—Ö–æ–¥.\n–ö–æ–º–∞–Ω–¥–∞ /—É–¥–∞–ª–∏—Ç—å_–ø–µ—Ä–µ—Å—ã–ª–∫—É –æ—Ç–∫–ª—é—á–∏—Ç –ø–µ—Ä–µ—Å—ã–ª–∫—É.")
        return

# -----------------------------
# –û–¢–°–ï–ö 10 ‚Äî Flask webhook
# -----------------------------
@app.route(f"/{TOKEN}",methods=["POST"])
def webhook():
    update=telebot.types.Update.de_json(request.get_data().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK",200

@app.route("/",methods=["GET"])
def index():
    return f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª ‚Äî –≤–µ—Ä—Å–∏—è {VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç",200

# -----------------------------
# –û–¢–°–ï–ö 11 ‚Äî –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–º–µ–Ω—ã –¥–Ω—è
# -----------------------------
def schedule_daily_window_creation():
    def task():
        last_day=get_today_key()
        while True:
            try:
                time.sleep(60)
                current_day=get_today_key()
                if current_day!=last_day:
                    for chat_id_str in list(data.get("chats",{}).keys()):
                        try: chat_id=int(chat_id_str)
                        except: continue
                        try: update_or_send_today_window(chat_id)
                        except Exception as e: log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞ –Ω–æ–≤–æ–≥–æ –¥–Ω—è –¥–ª—è {chat_id}: {e}")
                    last_day=current_day
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –≤ daily loop: {e}"); time.sleep(5)
    thread=threading.Thread(target=task,daemon=True)
    thread.start()

# -----------------------------
# –û–¢–°–ï–ö 12 ‚Äî –ó–∞–ø—É—Å–∫
# -----------------------------
def set_webhook():
    url=f"{APP_URL}/{TOKEN}"
    try:
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url=url)
        log_info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

if __name__=="__main__":
    set_webhook()
    schedule_daily_window_creation()
    log_info(f"–ë–æ—Ç –§–û –≤–µ—Ä—Å–∏–∏ {VERSION} –∑–∞–ø—É—â–µ–Ω")
    if OWNER_ID:
        try:
            bot.send_message(int(OWNER_ID),f"–ë–æ—Ç –§–û –≤–µ—Ä—Å–∏–∏ {VERSION} –∑–∞–ø—É—â–µ–Ω")
        except Exception:
            pass
    app.run(host="0.0.0.0",port=PORT)