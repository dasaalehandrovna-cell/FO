# –ö–æ–¥ –±–æ—Ç–∞ ‚Ññ7
# Webhook-–±–æ—Ç (Flask). –í–µ—Ä—Å–∏—è ‚Ññ7
# –¢—Ä–µ–±—É–µ—Ç –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏: BOT_TOKEN, OWNER_ID
# requirements.txt: pyTelegramBotAPI==4.23.0, flask

import os
import json
import time
import threading
import re
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request, send_file
from telebot import types

# -------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ / –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# -------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
TZ = ZoneInfo("America/Argentina/Catamarca")  # –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
DATA_FILE = "data.json"
PORT = int(os.environ.get("PORT", 5000))

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -------------------------
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ data.json
# -------------------------
# {
#   "overall_balance": int,
#   "records": [ { "id": int, "short_id": str, "timestamp": isoUTC, "amount": int, "note": str, "owner": chat_id }, ... ],
#   "active_messages": { "YYYY-MM-DD": { "chat_id": id, "message_id": id } },
#   "next_id": int,
#   "sent_messages": [ { "chat_id": id, "message_id": id, "timestamp": iso, "purpose": str, "day": "YYYY-MM-DD" }, ... ]
# }
# -------------------------

def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "active_messages": {},    # –∫–ª—é—á–∏: YYYY-MM-DD -> {chat_id, message_id}
        "next_id": 1,
        "sent_messages": []
    }

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
            except Exception:
                data = default_data()
    else:
        data = default_data()
    # ensure fields
    for k, v in default_data().items():
        if k not in data:
            data[k] = v
    return data

def save_data(d):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

data = load_data()

# -------------------------
# –£—Ç–∏–ª–∏—Ç—ã: –ø–∞—Ä—Å–∏–Ω–≥/—Ñ–æ—Ä–º–∞—Ç
# -------------------------
NUMBER_RE = re.compile(r'([+-]?\s*[\d][\d\s\.,]*)')

def parse_first_number(text):
    if not text:
        return None, None, None
    m = NUMBER_RE.search(text)
    if not m:
        return None, None, None
    raw = m.group(1)
    s = raw.strip()
    if s.startswith('+'):
        sign = '+'
        digits = s[1:].strip()
    elif s.startswith('-'):
        sign = '-'
        digits = s[1:].strip()
    else:
        sign = ''  # –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–∫–∞ => —Ä–∞—Å—Ö–æ–¥ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ)
        digits = s
    digits_norm = re.sub(r'[\s\.,]', '', digits)
    dm = re.match(r'(\d+)', digits_norm)
    if not dm:
        return None, None, None
    return int(dm.group(1)), sign, raw

def apply_sign_and_normalize(num, sign):
    if sign == '+':
        return num
    else:
        return -num

def fmt_amount(n):
    return f"{abs(n):,}".replace(",", ".")

def make_short_id(n):
    # —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä–æ—Ç–∫–æ–≥–æ id: R{n} (–Ω–∞–ø—Ä–∏–º–µ—Ä R1)
    return f"R{n}"

def date_local_str(dt):
    return dt.astimezone(TZ).strftime("%Y-%m-%d")

def time_local_str(dt):
    return dt.astimezone(TZ).strftime("%H:%M")

# -------------------------
# –£—Ç–∏–ª–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ —É—á—ë—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# -------------------------
def record_sent_message(chat_id, message_obj, purpose="unknown", day=None):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç–∞: chat_id, message_id, timestamp, purpose, day"""
    entry = {
        "chat_id": int(chat_id),
        "message_id": int(message_obj.message_id),
        "timestamp": datetime.now(tz=ZoneInfo("UTC")).isoformat(),
        "purpose": purpose,
        "day": day or (datetime.now(tz=TZ).strftime("%Y-%m-%d"))
    }
    data.setdefault("sent_messages", []).append(entry)
    save_data(data)

def send_and_record(chat_id, text, reply_markup=None, parse_mode=None, purpose="message", day=None):
    sent = bot.send_message(int(chat_id), text, reply_markup=reply_markup, parse_mode=parse_mode)
    record_sent_message(chat_id, sent, purpose=purpose, day=day)
    return sent

def send_file_and_record(chat_id, path, caption=None, purpose="file"):
    with open(path, "rb") as f:
        sent = bot.send_document(int(chat_id), f, caption=caption)
    record_sent_message(chat_id, sent, purpose=purpose, day=datetime.now(tz=TZ).strftime("%Y-%m-%d"))
    return sent

# -------------------------
# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –¥–Ω—è (—Ç–µ–∫—Å—Ç)
# -------------------------
def build_day_window(chat_id, day_date):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ–∫–Ω–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã (YYYY-MM-DD). –ù—É–º–µ—Ä–∞—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–∫–Ω–µ —É–±—Ä–∞–ª–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º short_id."""
    recs = []
    for r in data["records"]:
        if str(r.get("owner")) != str(chat_id):
            continue
        ts = datetime.fromisoformat(r["timestamp"]).astimezone(TZ)
        if date_local_str(ts) == day_date:
            recs.append((ts, r))
    recs.sort(key=lambda x: x[0])
    if not recs:
        return "üìò –ó–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."

    lines = []
    lines.append(f"üìÖ {day_date}\n")
    last_hour = None
    day_income = 0
    day_expense = 0
    for ts, r in recs:
        hour = ts.strftime("%H")
        if last_hour is None:
            last_hour = hour
        elif hour != last_hour:
            lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Å–∞
            last_hour = hour
        amt = r["amount"]
        sign = "+" if amt > 0 else "-"
        sid = r.get("short_id") or make_short_id(r.get("id"))
        note = r.get("note", "")
        lines.append(f"{sid} | {sign}{fmt_amount(amt)} {note}".rstrip())
        if amt > 0:
            day_income += amt
        else:
            day_expense += abs(amt)

    overall = data.get("overall_balance", 0)
    lines.append("")
    lines.append(f"üìà –ü—Ä–∏—Ö–æ–¥ –¥–Ω—è: {fmt_amount(day_income)}")
    lines.append(f"üìâ –†–∞—Å—Ö–æ–¥ –¥–Ω—è: {fmt_amount(day_expense)}")
    lines.append(f"üíµ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {fmt_amount(overall)}")
    return "\n".join(lines)

# -------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -------------------------
def kb_day_main():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_menu"))
    return kb

def kb_edit_main_simple():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="edit_modify"))
    kb.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="edit_delete"))
    kb.add(types.InlineKeyboardButton("üìÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data="edit_send_file"))
    kb.add(types.InlineKeyboardButton("–û–±–Ω—É–ª–∏—Ç—å –≤—Å—ë (–≤—Å–µ—Ö)", callback_data="edit_reset_all"))
    kb.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="edit_cancel"))
    return kb

def kb_records_list(chat_id, day_date, mode):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π –∑–∞ –¥–µ–Ω—å.
    mode = 'modify' or 'delete'
    callback format: select:<mode>:<short_id>
    """
    kb = types.InlineKeyboardMarkup()
    recs = []
    for ts, r in get_day_records_for_chat(chat_id, day_date):
        sid = r.get("short_id") or make_short_id(r.get("id"))
        amt = r["amount"]
        sign = "+" if amt > 0 else "-"
        label = f"[{sid}] {sign}{fmt_amount(amt)} {r.get('note','')}"
        recs.append( (sid, label) )
    if not recs:
        kb.add(types.InlineKeyboardButton("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å", callback_data="no_op"))
        kb.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="edit_menu"))
        return kb
    for sid, label in recs:
        # –æ–±—Ä–µ–∑–∞–µ–º –º–µ—Ç–∫—É, —á—Ç–æ–±—ã –Ω–µ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π
        kb.add(types.InlineKeyboardButton(label[:60], callback_data=f"select:{mode}:{sid}"))
    kb.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="edit_menu"))
    return kb

def kb_yes_no(prefix):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–î–∞", callback_data=f"{prefix}_yes"),
           types.InlineKeyboardButton("–ù–µ—Ç", callback_data=f"{prefix}_no"))
    return kb

# -------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ: –ø–æ–∏—Å–∫/—É–¥–∞–ª–µ–Ω–∏–µ/–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π
# -------------------------
def get_day_records_for_chat(chat_id, day_date):
    recs = []
    for r in data["records"]:
        if str(r.get("owner")) != str(chat_id):
            continue
        ts = datetime.fromisoformat(r["timestamp"]).astimezone(TZ)
        if date_local_str(ts) == day_date:
            recs.append((ts, r))
    recs.sort(key=lambda x: x[0])
    return recs

def find_record_by_short_id(short_id):
    for r in data["records"]:
        if r.get("short_id") == short_id or make_short_id(r.get("id")) == short_id:
            return r
    return None

def delete_record_by_short_id(chat_id, short_id):
    r = find_record_by_short_id(short_id)
    if not r or str(r.get("owner")) != str(chat_id):
        return False
    try:
        data["records"] = [x for x in data["records"] if not (x.get("short_id") == short_id or make_short_id(x.get("id")) == short_id)]
        data["overall_balance"] = data.get("overall_balance", 0) - r["amount"]
        save_data(data)
        # –æ–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ –¥–Ω—è - –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º/–æ–±–Ω–æ–≤–∏–º
        today = date_local_str(datetime.now(tz=TZ))
        update_day_window_after_change(chat_id, today)
        return True
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:", e)
        return False

def modify_record_by_short_id(chat_id, short_id, new_text):
    r = find_record_by_short_id(short_id)
    if not r or str(r.get("owner")) != str(chat_id):
        return False
    num, sign, raw = parse_first_number(new_text)
    if num is None:
        return False
    new_amt = apply_sign_and_normalize(num, sign)
    note = new_text[(new_text.find(raw) + len(raw)):].strip() if raw in new_text else ""
    for i, rr in enumerate(data["records"]):
        rr_sid = rr.get("short_id") or make_short_id(rr.get("id"))
        if rr_sid == short_id:
            data["overall_balance"] = data.get("overall_balance", 0) - rr["amount"] + new_amt
            data["records"][i]["amount"] = new_amt
            data["records"][i]["note"] = note
            save_data(data)
            today = date_local_str(datetime.now(tz=TZ))
            update_day_window_after_change(chat_id, today)
            return True
    return False

# -------------------------
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞ –¥–Ω—è: —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
# -------------------------
def update_day_window_after_change(chat_id, day_date, purpose="day_window"):
    """
    –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–Ω—è (–µ—Å–ª–∏ –µ—Å—Ç—å), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ active_messages –∏ sent_messages.
    """
    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å
    prev = data.get("active_messages", {}).get(day_date)
    if prev and int(prev.get("chat_id")) == int(chat_id):
        try:
            bot.delete_message(prev["chat_id"], prev["message_id"])
        except Exception as e:
            # –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ –Ω–µ –ª–æ–º–∞—Ç—å
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–∫–Ω–æ:", e)
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
    text = build_day_window(chat_id, day_date)
    kb = kb_day_main()
    sent = bot.send_message(int(chat_id), text, reply_markup=kb)
    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–Ω—è
    data.setdefault("active_messages", {})[day_date] = {"chat_id": int(chat_id), "message_id": int(sent.message_id)}
    record_sent_message(chat_id, sent, purpose=purpose, day=day_date)
    save_data(data)
    return sent

# -------------------------
# –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è (–ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
# -------------------------
def delete_active_window_if_today(chat_id):
    """–ï—Å–ª–∏ –µ—Å—Ç—å active message, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è, —É–¥–∞–ª–∏—Ç—å –µ–≥–æ."""
    today = datetime.now(tz=TZ).strftime("%Y-%m-%d")
    am = data.get("active_messages", {}).get(today)
    if am and int(am.get("chat_id")) == int(chat_id):
        try:
            bot.delete_message(am["chat_id"], am["message_id"])
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –≤—Ö–æ–¥—è—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:", e)
        # —É–¥–∞–ª–∏–º –∑–∞–ø–∏—Å—å –∏–∑ active_messages ‚Äî –ø–æ—Å–∫–æ–ª—å–∫—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –º—ã —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
        data["active_messages"].pop(today, None)
        save_data(data)
        return True
    return False

# -------------------------
# –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å (—Ñ–æ–Ω–æ–≤—ã–π —Ç—Ä–µ–¥)
# -------------------------
def midnight_watcher():
    """
    –§–æ–Ω–æ–≤—ã–π —Ç—Ä–µ–¥, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–º–µ–Ω—É –¥–∞—Ç—ã –≤ TZ.
    –ü—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ (–≤–∑—è—Ç–æ –∏–∑ owners –∑–∞–ø–∏—Å–µ–π –∏/–∏–ª–∏ active_messages) —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è,
    —Å–æ—Ö—Ä–∞–Ω—è—è –æ–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫.
    """
    last_date = datetime.now(tz=TZ).strftime("%Y-%m-%d")
    while True:
        try:
            now_date = datetime.now(tz=TZ).strftime("%Y-%m-%d")
            if now_date != last_date:
                # –¥–∞—Ç–∞ —Å–º–µ–Ω–∏–ª–∞—Å—å: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞ (owners –≤ records –∏ active_messages) —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
                owners = set()
                for r in data.get("records", []):
                    owners.add(str(r.get("owner")))
                # also include owners from active_messages (if any)
                for d, am in data.get("active_messages", {}).items():
                    owners.add(str(am.get("chat_id")))
                # —Å–æ–∑–¥–∞—ë–º –æ–∫–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                for owner in owners:
                    try:
                        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –¥–Ω—è (–ø—É—Å—Ç–æ–µ, –Ω–æ —Å –æ–±—â–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º)
                        chat_id = int(owner)
                        update_day_window_after_change(chat_id, now_date, purpose="midnight_new_day")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞ –¥–ª—è {owner} –Ω–∞ –Ω–æ–≤—É—é –¥–∞—Ç—É: {e}")
                last_date = now_date
            # sleep 30s
            time.sleep(30)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –≤ midnight_watcher:", e)
            time.sleep(30)

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω thred –¥–ª—è —Å–ª–µ–∂–µ–Ω–∏—è –∑–∞ midnight
t = threading.Thread(target=midnight_watcher, daemon=True)
t.start()

# -------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞)
# -------------------------
@bot.message_handler(func=lambda m: True)
def handle_message(message):
    chat_id = message.chat.id
    text = (message.text or "").strip()

    # 1) –ü—Ä–∏ –ª—é–±–æ–º –≤—Ö–æ–¥—è—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚Äî —É–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è (–µ—Å–ª–∏ –µ—Å—Ç—å –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —á–∞—Ç—É).
    deleted = delete_active_window_if_today(chat_id)
    # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è (–∏–ª–∏ –µ—Å–ª–∏ –æ–∫–Ω–∞ –Ω–µ –±—ã–ª–æ) ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ (–æ–Ω–æ –±—É–¥–µ—Ç –ø—É—Å—Ç—ã–º –∏–ª–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏)
    today = datetime.now(tz=TZ).strftime("%Y-%m-%d")
    # —Å–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ (–Ω–æ–≤–æ–µ), —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –ø–æ—Å–ª–µ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç –≤—ã–≤–æ–¥–∏—Ç –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
    update_day_window_after_change(chat_id, today, purpose="recreated_on_user_message")

    # 2) –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–ø–∏—Å—å (–µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–æ)
    num, sign, raw = parse_first_number(text)
    if num is None:
        # –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–ª–∞–µ–º
        return

    amt_signed = apply_sign_and_normalize(num, sign)
    note = text[(text.find(raw) + len(raw)):].strip() if raw in text else ""
    rec_id = data.get("next_id", 1)
    short = make_short_id(rec_id)
    ts = datetime.now(tz=ZoneInfo("UTC")).isoformat()
    rec = {
        "id": rec_id,
        "short_id": short,
        "timestamp": ts,
        "amount": amt_signed,
        "note": note,
        "owner": str(chat_id)
    }
    data["records"].append(rec)
    data["next_id"] = rec_id + 1
    data["overall_balance"] = data.get("overall_balance", 0) + amt_signed
    save_data(data)

    # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ ‚Äî —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–∫–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Å–Ω–æ–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    # (update_day_window_after_change —Å–∞–º —É–¥–∞–ª–∏—Ç —Å—Ç–∞—Ä–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–æ–≤–æ–µ)
    update_day_window_after_change(chat_id, today, purpose="added_record")

# -------------------------
# Callback handler (inline buttons)
# -------------------------
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    data_call = call.data or ""
    chat_id = call.message.chat.id
    call_msg = call.message  # —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–Ω–æ–ø–∫–∏
    today = datetime.now(tz=TZ).strftime("%Y-%m-%d")

    # –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ callback
    try:
        bot.answer_callback_query(call.id)
    except Exception:
        pass

    # 1) –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –ù–ï –º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç –æ–∫–Ω–∞, —Ç–æ–ª—å–∫–æ reply_markup
    if data_call == "edit_menu":
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_edit_main_simple())
        except Exception as e:
            # fallback: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
            send_and_record(chat_id, "–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb_edit_main_simple(), purpose="edit_menu_fallback")
        return

    if data_call == "edit_cancel":
        # –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_day_main())
        except Exception:
            send_and_record(chat_id, build_day_window(chat_id, today), reply_markup=kb_day_main(), purpose="day_window_fallback")
        return

    # 2) –ò–∑–º–µ–Ω–∏—Ç—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–¥ —Ç–µ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∫–Ω–æ–ø–∫–∏)
    if data_call == "edit_modify":
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_records_list(chat_id, today, mode="modify"))
        except Exception as e:
            send_and_record(chat_id, "–í—ã–±–æ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=kb_records_list(chat_id, today, mode="modify"), purpose="modify_list_fallback")
        return

    # 3) –£–¥–∞–ª–∏—Ç—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–¥ —Ç–µ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∫–Ω–æ–ø–∫–∏)
    if data_call == "edit_delete":
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_records_list(chat_id, today, mode="delete"))
        except Exception:
            send_and_record(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb_records_list(chat_id, today, mode="delete"), purpose="delete_list_fallback")
        return

    # 4) –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª (data.json)
    if data_call == "edit_send_file":
        try:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π data.json
            send_file_and_record(chat_id, DATA_FILE, caption="–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è data.json", purpose="export_data")
            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–∑–∞–¥ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞)
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_edit_main_simple())
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞:", e)
            try:
                send_and_record(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.", purpose="export_error")
            except Exception:
                pass
        return

    # 5) –í—ã–±—Ä–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∏–∑ —Å–ø–∏—Å–∫–∞: format select:<mode>:<short_id>
    if data_call.startswith("select:"):
        parts = data_call.split(":", 2)
        if len(parts) != 3:
            send_and_record(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", purpose="select_error")
            return
        mode = parts[1]
        short_id = parts[2]
        if mode == "modify":
            # –ø—Ä–æ—Å–∏–º –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ; —Å–æ—Ö—Ä–∞–Ω–∏–º pending
            try:
                bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=None)
            except Exception:
                pass
            send_and_record(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {short_id} (–ø—Ä–∏–º–µ—Ä: +1000 –∑–∞—Ä–ø–ª–∞—Ç–∞).", purpose="await_modify_input")
            pending_actions[str(chat_id)] = {"type": "await_modify_input", "short_id": short_id, "origin_message_id": call_msg.message_id}
            return
        elif mode == "delete":
            # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –î–∞/–ù–µ—Ç –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏ (reply_markup)
            try:
                bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_yes_no(f"confirm_delete:{short_id}"))
            except Exception:
                send_and_record(chat_id, f"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å {short_id}?", reply_markup=kb_yes_no(f"confirm_delete:{short_id}"), purpose="delete_confirm_fallback")
            return
        else:
            send_and_record(chat_id, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞.", purpose="select_badmode")
            return

    # 6) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è: confirm_delete:<shortid>_yes/_no
    if data_call.startswith("confirm_delete:"):
        # example: confirm_delete:R5_yes or confirm_delete:R5_no
        tail = data_call[len("confirm_delete:"):]
        if tail.endswith("_yes"):
            short_id = tail[:-4]
            ok = delete_record_by_short_id(chat_id, short_id)
            if ok:
                try:
                    bot.edit_message_text(f"‚úÖ –ó–∞–ø–∏—Å—å {short_id} —É–¥–∞–ª–µ–Ω–∞.", call_msg.chat.id, call_msg.message_id)
                except Exception:
                    send_and_record(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å {short_id} —É–¥–∞–ª–µ–Ω–∞.", purpose="deleted_record")
            else:
                try:
                    bot.edit_message_text(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å {short_id}.", call_msg.chat.id, call_msg.message_id)
                except Exception:
                    send_and_record(chat_id, f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å {short_id}.", purpose="delete_failed")
        else:
            # –æ—Ç–º–µ–Ω–∞ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_edit_main_simple())
            except Exception:
                send_and_record(chat_id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb_edit_main_simple(), purpose="delete_cancelled")
        return

    # 7) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω—É–ª–µ–Ω–∏—è
    if data_call.startswith("confirm_reset_all"):
        if data_call.endswith("_yes"):
            # –æ–±–Ω—É–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            data["overall_balance"] = 0
            data["records"] = []
            data["active_messages"] = {}
            save_data(data)
            # –≤—ã–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —á–∏—Å—Ç–æ–≥–æ –æ–∫–Ω–∞
            try:
                bot.edit_message_text("‚ôªÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã. üìò –î–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å.", call_msg.chat.id, call_msg.message_id)
            except Exception:
                send_and_record(chat_id, "‚ôªÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã. üìò –î–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å.", purpose="reset_done")
        else:
            # –æ—Ç–º–µ–Ω–∞ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_edit_main_simple())
            except Exception:
                send_and_record(chat_id, "–û–±–Ω—É–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb_edit_main_simple(), purpose="reset_cancel")
        return

    # 8) –ó–∞–ø—Ä–æ—Å –æ–±–Ω—É–ª–µ–Ω–∏—è: edit_reset_all -> –ø–æ–∫–∞–∑–∞—Ç—å yes/no
    if data_call == "edit_reset_all":
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_yes_no("confirm_reset_all"))
        except Exception:
            send_and_record(chat_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤—Å–µ–≥–¥–∞? (–î–∞/–ù–µ—Ç)", reply_markup=kb_yes_no("confirm_reset_all"), purpose="reset_confirm_fallback")
        return

    # 9) no_op / back handlers
    if data_call == "no_op":
        # –≤–µ—Ä–Ω—É—Ç—å –≥–ª–∞–≤–Ω–æ–µ
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_day_main())
        except Exception:
            send_and_record(chat_id, build_day_window(chat_id, today), reply_markup=kb_day_main(), purpose="no_op_fallback")
        return

    # –ü—Ä–æ—á–∏–µ ‚Äî –ª–æ–≥
    print("Unhandled callback:", data_call)

# -------------------------
# Pending actions (–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
# -------------------------
# pending_actions[chat_id_str] = { "type": "await_modify_input"/..., "short_id": "R5", "origin_message_id": int }
pending_actions = {}

@bot.message_handler(func=lambda m: str(m.chat.id) in pending_actions)
def handle_pending_message(message):
    chat_id = message.chat.id
    txt = (message.text or "").strip()
    state = pending_actions.get(str(chat_id))
    if not state:
        return
    if state.get("type") == "await_modify_input":
        short_id = state.get("short_id")
        ok = modify_record_by_short_id(chat_id, short_id, txt)
        if ok:
            send_and_record(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å {short_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", purpose="modified_record")
        else:
            send_and_record(chat_id, f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å {short_id}. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç (–ø—Ä–∏–º–µ—Ä: +1000 —Ö–ª–µ–±).", purpose="modify_failed")
        pending_actions.pop(str(chat_id), None)
        # –ø–æ—Å–ª–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–∫–Ω–æ –¥–Ω—è –æ–±–Ω–æ–≤–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ modify_record_by_short_id -> update_day_window_after_change
    else:
        # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π pending
        pending_actions.pop(str(chat_id), None)
        send_and_record(chat_id, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è.", purpose="pending_error")

# -------------------------
# –ö–æ–º–∞–Ω–¥—ã –±—ã—Å—Ç—Ä—ã–µ: /–±–∞–ª–∞–Ω—Å /–æ—Ç—á–µ—Ç /—Å–±—Ä–æ—Å
# -------------------------
@bot.message_handler(commands=["–±–∞–ª–∞–Ω—Å"])
def cmd_balance(message):
    chat_id = message.chat.id
    overall = data.get("overall_balance", 0)
    bot.reply_to(message, f"üí∞ –¢–µ–∫—É—â–∏–π –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: {fmt_amount(overall)}")

@bot.message_handler(commands=["–æ—Ç—á–µ—Ç"])
def cmd_report(message):
    chat_id = message.chat.id
    today = datetime.now(tz=TZ).strftime("%Y-%m-%d")
    update_day_window_after_change(chat_id, today, purpose="report_cmd")

@bot.message_handler(commands=["—Å–±—Ä–æ—Å"])
def cmd_reset(message):
    chat_id = message.chat.id
    # –ø–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫–∏ –¥–∞/–Ω–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (–∫–æ–º–∞–Ω–¥–∞) ‚Äî –∑–∞—Ç–µ–º callback confirm_reset_all –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
    kb = kb_yes_no("confirm_reset_all")
    send_and_record(chat_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? (–î–∞/–ù–µ—Ç)", reply_markup=kb, purpose="reset_command")

# -------------------------
# Webhook endpoints
# -------------------------
@app.route("/" + TOKEN, methods=["POST"])
def receive_update():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/", methods=["GET"])
def set_and_ping():
    bot.remove_webhook()
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    bot.set_webhook(url=webhook_url)
    print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", webhook_url)
    if OWNER_ID:
        try:
            msg = bot.send_message(int(OWNER_ID), "‚úÖ –ë–æ—Ç ‚Ññ7: webhook –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            # –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            threading.Thread(target=lambda: (time.sleep(10), bot.delete_message(int(OWNER_ID), msg.message_id)), daemon=True).start()
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞:", e)
    return "ok", 200

# -------------------------
# –ó–∞–ø—É—Å–∫
# -------------------------
if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ‚Ññ7 (webhook)...")
    # –°–æ—Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    save_data(data)
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
    if OWNER_ID:
        try:
            msg = bot.send_message(int(OWNER_ID), "‚úÖ –ë–æ—Ç ‚Ññ7 –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            threading.Thread(target=lambda: (time.sleep(10), bot.delete_message(int(OWNER_ID), msg.message_id)), daemon=True).start()
            record_sent_message(OWNER_ID, msg, purpose="owner_start")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞:", e)
    app.run(host="0.0.0.0", port=PORT)
