# ---------- –ë–û–¢ "–§–û" v10 ----------
# Flask + webhook
# –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏–∑ v9.5 + —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ—Å—ã–ª–∫–∏
# ----------------------------------------------

import os
import json
from flask import Flask, request
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

DATA_FILE = "data.json"


# --------------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ---------------------

def load_data():
    if not os.path.exists(DATA_FILE):
        return {"entries": {}, "forward_chat_id": None, "next_id": 1}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)


def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def calculate_balance(data):
    return sum(entry["amount"] for entry in data["entries"].values())


# --------------------- –ú–ï–ù–Æ ---------------------

def main_menu():
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
        InlineKeyboardButton("üìã –û—Ç—á—ë—Ç", callback_data="report")
    )
    markup.row(
        InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit"),
        InlineKeyboardButton("‚ôªÔ∏è –°–±—Ä–æ—Å", callback_data="reset")
    )
    markup.add(InlineKeyboardButton("üîÅ –ü–µ—Ä–µ—Å—ã–ª–∫–∞", callback_data="forward_menu"))
    return markup


def forward_menu():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É", callback_data="set_forward"))
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É", callback_data="disable_forward"))
    markup.add(InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â—É—é", callback_data="check_forward"))
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    return markup


# --------------------- –û–°–ù–û–í–ù–û–ï ---------------------

@bot.message_handler(content_types=['text', 'photo', 'document', 'video', 'voice', 'audio', 'sticker'])
def handle_message(message):
    data = load_data()

    # --- –ü–ï–†–ï–°–´–õ–ö–ê ---
    if data.get("forward_chat_id"):
        try:
            bot.forward_message(
                data["forward_chat_id"],
                message.chat.id,
                message.message_id
            )
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")

    # --- –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–ò–°–ï–ô ---
    if message.content_type == "text":
        text = message.text.strip()
        if text.startswith("+") or text.startswith("-"):
            try:
                amount_str, *desc_parts = text.split()
                amount = float(amount_str.replace("+", ""))
                if text.startswith("-"):
                    amount = -amount
                desc = " ".join(desc_parts)

                entry_id = str(data["next_id"])
                data["entries"][entry_id] = {"id": entry_id, "amount": amount, "desc": desc}
                data["next_id"] += 1
                save_data(data)

                bot.send_message(message.chat.id, f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ (ID {entry_id})", reply_markup=main_menu())
            except Exception:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: +1000 —Ö–ª–µ–±", reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "üìã –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω.", reply_markup=main_menu())


# --------------------- CALLBACKS ---------------------

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    data = load_data()
    chat_id = call.message.chat.id

    # --- –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ---
    if call.data == "balance":
        balance = calculate_balance(data)
        bot.edit_message_text(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance}", chat_id, call.message.id, reply_markup=main_menu())

    elif call.data == "report":
        if not data["entries"]:
            text = "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."
        else:
            text = "\n".join(
                [f"ID {e['id']}: {'+' if e['amount'] > 0 else ''}{e['amount']} {e['desc']}" for e in data["entries"].values()]
            )
        bot.edit_message_text(f"üìã –û—Ç—á—ë—Ç:\n{text}", chat_id, call.message.id, reply_markup=main_menu())

    elif call.data == "edit":
        if not data["entries"]:
            bot.edit_message_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", chat_id, call.message.id, reply_markup=main_menu())
        else:
            markup = InlineKeyboardMarkup()
            for e in data["entries"].values():
                text = f"{e['id']}: {e['amount']} {e['desc']}"
                markup.add(InlineKeyboardButton(text, callback_data=f"edit_{e['id']}"))
            markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
            bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", chat_id, call.message.id, reply_markup=markup)

    elif call.data.startswith("edit_"):
        entry_id = call.data.split("_")[1]
        msg = bot.send_message(chat_id, f"‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ID {entry_id} (–ø—Ä–∏–º–µ—Ä: +500 —Ö–ª–µ–±):")
        bot.register_next_step_handler(msg, edit_entry, entry_id)

    elif call.data == "reset":
        data["entries"] = {}
        data["next_id"] = 1
        save_data(data)
        bot.edit_message_text("‚ôªÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.", chat_id, call.message.id, reply_markup=main_menu())

    # --- –ú–µ–Ω—é –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ---
    elif call.data == "forward_menu":
        bot.edit_message_text("üîÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π:", chat_id, call.message.id, reply_markup=forward_menu())

    elif call.data == "set_forward":
        msg = bot.send_message(chat_id, "üîß –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞, –∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ chat_id):")
        bot.register_next_step_handler(msg, set_forward_chat)

    elif call.data == "disable_forward":
        data["forward_chat_id"] = None
        save_data(data)
        bot.edit_message_text("‚ùå –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.", chat_id, call.message.id, reply_markup=main_menu())

    elif call.data == "check_forward":
        fwd = data.get("forward_chat_id")
        if fwd:
            text = f"üì® –¢–µ–∫—É—â–∏–π —á–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏: `{fwd}`"
        else:
            text = "üîï –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
        bot.edit_message_text(text, chat_id, call.message.id, parse_mode="Markdown", reply_markup=forward_menu())

    elif call.data == "back_main":
        bot.edit_message_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", chat_id, call.message.id, reply_markup=main_menu())


# --------------------- –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï ---------------------

def edit_entry(message, entry_id):
    data = load_data()
    if entry_id not in data["entries"]:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu())
        return

    try:
        amount_str, *desc_parts = message.text.split()
        amount = float(amount_str.replace("+", ""))
        if message.text.startswith("-"):
            amount = -amount
        desc = " ".join(desc_parts)
        data["entries"][entry_id] = {"id": entry_id, "amount": amount, "desc": desc}
        save_data(data)
        bot.send_message(message.chat.id, f"‚úÖ –ó–∞–ø–∏—Å—å {entry_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=main_menu())
    except Exception:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: +500 —Ö–ª–µ–±", reply_markup=main_menu())


# --------------------- –ü–ï–†–ï–°–´–õ–ö–ê ---------------------

def set_forward_chat(message):
    data = load_data()
    chat_id = message.chat.id

    if message.forward_from_chat:
        forward_chat_id = message.forward_from_chat.id
    else:
        try:
            forward_chat_id = int(message.text.strip())
        except:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π chat_id. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return

    data["forward_chat_id"] = forward_chat_id
    save_data(data)
    bot.send_message(chat_id, f"‚úÖ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ chat_id: `{forward_chat_id}`", parse_mode="Markdown", reply_markup=main_menu())


# --------------------- FLASK WEBHOOK ---------------------

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "ok"


@app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))