# -------------------------
# –ö–æ–¥ –±–æ—Ç–∞ ‚Ññ9.6.3
# Webhook-–±–æ—Ç (Flask). –í–µ—Ä—Å–∏—è ‚Ññ9.6.3
# –¢—Ä–µ–±—É–µ—Ç –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏: BOT_TOKEN, OWNER_ID
# requirements.txt: pyTelegramBotAPI==4.23.0, flask
# –§–∞–π–ª—ã: data.json (–±–∞–∑–∞), data.csv (—ç–∫—Å–ø–æ—Ä—Ç)
# -------------------------

import os
import json
import time
import threading
import re
import csv
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

# -------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
PORT = int(os.environ.get("PORT", 5000))

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -------------------------
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ data.json
# -------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],           # {id, short_id, timestamp(ISO UTC), amount, note, owner}
        "active_messages": {},   # YYYY-MM-DD -> { "chat_id": id, "message_id": id } (–ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É)
        "next_id": 1,
        "sent_messages": [],     # –∏—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
        "forward_targets": {}    # "<owner_chat_id>": "<target_chat_id_or_username>"
    }

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            try:
                d = json.load(f)
            except Exception:
                d = default_data()
    else:
        d = default_data()
    # ensure keys
    for k, v in default_data().items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

data = load_data()

# -------------------------
# –ü–∞—Ä—Å–∏–Ω–≥, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# -------------------------
NUMBER_RE = re.compile(r'([+-]?\s*[\d][\d\s\.,]*)')

def parse_first_number(text):
    if not text:
        return None, None, None
    m = NUMBER_RE.search(text)
    if not m:
        return None, None, None
    raw = m.group(1)
    s = raw.strip()
    if s.startswith('+'):
        sign = '+'
        digits = s[1:].strip()
    elif s.startswith('-'):
        sign = '-'
        digits = s[1:].strip()
    else:
        sign = ''  # –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–∫–∞ => —Ä–∞—Å—Ö–æ–¥
        digits = s
    digits_norm = re.sub(r'[\s\.,]', '', digits)
    dm = re.match(r'(\d+)', digits_norm)
    if not dm:
        return None, None, None
    return int(dm.group(1)), sign, raw

def apply_sign_and_normalize(num, sign):
    return num if sign == '+' else -num

def fmt_amount(n):
    return f"{abs(n):,}".replace(",", ".")

def make_short_id(n):
    return f"R{n}"

def date_local_str(dt):
    return dt.astimezone(TZ).strftime("%Y-%m-%d")

def time_local_str(dt):
    return dt.astimezone(TZ).strftime("%H:%M")

# -------------------------
# –û—Ç–ø—Ä–∞–≤–∫–∞ + –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# -------------------------
def record_sent_message(chat_id, message_obj, purpose="unknown", day=None):
    entry = {
        "chat_id": int(chat_id),
        "message_id": int(message_obj.message_id),
        "timestamp": datetime.now(tz=ZoneInfo("UTC")).isoformat(),
        "purpose": purpose,
        "day": day or datetime.now(tz=TZ).strftime("%Y-%m-%d")
    }
    data.setdefault("sent_messages", []).append(entry)
    save_data(data)

def send_and_record(chat_id, text, reply_markup=None, parse_mode=None, purpose="message", day=None):
    sent = bot.send_message(int(chat_id), text, reply_markup=reply_markup, parse_mode=parse_mode)
    record_sent_message(chat_id, sent, purpose=purpose, day=day)
    return sent

def send_file_and_record(chat_id, path, caption=None, purpose="file"):
    with open(path, "rb") as f:
        sent = bot.send_document(int(chat_id), f, caption=caption)
    record_sent_message(chat_id, sent, purpose=purpose, day=datetime.now(tz=TZ).strftime("%Y-%m-%d"))
    return sent

# -------------------------
# –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –° –ó–ê–î–ï–†–ñ–ö–û–ô
# -------------------------
def delayed_delete(chat_id, message_id, delay=5):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)."""
    def worker():
        time.sleep(delay)
        try:
            bot.delete_message(int(chat_id), int(message_id))
        except Exception as e:
            print(f"delayed_delete error for {chat_id}/{message_id}: {e}")
    threading.Thread(target=worker, daemon=True).start()

# -------------------------
# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –¥–Ω—è (–≤–∫–ª—é—á–∞—è –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏)
# -------------------------
def build_day_window(chat_id, day_date):
    recs = []
    for r in data["records"]:
        if str(r.get("owner")) != str(chat_id):
            continue
        ts = datetime.fromisoformat(r["timestamp"]).astimezone(TZ)
        if date_local_str(ts) == day_date:
            recs.append((ts, r))
    recs.sort(key=lambda x: x[0])
    if not recs:
        return "üìò –ó–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."

    lines = []
    lines.append(f"üìÖ {day_date}\n")
    last_hour = None
    day_income, day_expense = 0, 0
    for ts, r in recs:
        hour = ts.strftime("%H")
        if last_hour is None:
            last_hour = hour
        elif hour != last_hour:
            lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Å–∞
            last_hour = hour
        amt = r["amount"]
        sign = "+" if amt > 0 else "-"
        sid = r.get("short_id") or make_short_id(r.get("id"))
        note = r.get("note", "")
        t_local = time_local_str(ts)
        lines.append(f"üïì {t_local} | {sid} | {sign}{fmt_amount(amt)} {note}".rstrip())
        if amt > 0:
            day_income += amt
        else:
            day_expense += abs(amt)
    overall = data.get("overall_balance", 0)
    lines.append("")
    lines.append(f"üìà –ü—Ä–∏—Ö–æ–¥ –¥–Ω—è: {fmt_amount(day_income)}")
    lines.append(f"üìâ –†–∞—Å—Ö–æ–¥ –¥–Ω—è: {fmt_amount(day_expense)}")
    lines.append(f"üíµ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {fmt_amount(overall)}")
    return "\n".join(lines)

# -------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ) + –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∞
# -------------------------
def kb_day_main():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_menu"))
    return kb

def kb_edit_main(chat_id=None):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="edit_modify"))
    kb.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="edit_delete"))
    kb.add(types.InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="edit_export_csv"))
    kb.add(types.InlineKeyboardButton("–û–±–Ω—É–ª–∏—Ç—å –≤—Å—ë (–≤—Å–µ—Ö)", callback_data="edit_reset_all"))
    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –ü–µ—Ä–µ—Å—ã–ª–∫–∏ / –û—Ç–º–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    target = data.get("forward_targets", {}).get(str(chat_id)) if chat_id is not None else None
    if target:
        kb.add(types.InlineKeyboardButton("üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É", callback_data="forward_cancel"))
    else:
        kb.add(types.InlineKeyboardButton("üì§ –ü–µ—Ä–µ—Å—ã–ª–∫–∞", callback_data="forward_setup"))
    kb.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="edit_cancel"))
    return kb

def kb_forward_menu(chat_id=None):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É (–ø–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞)", callback_data="forward_setup"))
    kb.add(types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É", callback_data="forward_cancel"))
    kb.add(types.InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â—É—é", callback_data="forward_check"))
    kb.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="edit_cancel"))
    return kb

def kb_records_list(chat_id, day_date, mode):
    kb = types.InlineKeyboardMarkup()
    recs = []
    for ts, r in get_day_records_for_chat(chat_id, day_date):
        sid = r.get("short_id") or make_short_id(r.get("id"))
        amt = r["amount"]
        sign = "+" if amt > 0 else "-"
        label = f"[{sid}] {sign}{fmt_amount(amt)} {r.get('note','')}"
        recs.append((sid, label))
    if not recs:
        kb.add(types.InlineKeyboardButton("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å", callback_data="no_op"))
        kb.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="edit_menu"))
        return kb
    for sid, label in recs:
        kb.add(types.InlineKeyboardButton(label[:60], callback_data=f"select:{mode}:{sid}"))
    kb.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="edit_menu"))
    return kb

def kb_yes_no(cb_prefix):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–î–∞", callback_data=f"{cb_prefix}_yes"),
           types.InlineKeyboardButton("–ù–µ—Ç", callback_data=f"{cb_prefix}_no"))
    return kb

# -------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ: –ø–æ–∏—Å–∫, —É–¥–∞–ª–∏—Ç—å, –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å
# -------------------------
def get_day_records_for_chat(chat_id, day_date):
    recs = []
    for r in data["records"]:
        if str(r.get("owner")) != str(chat_id):
            continue
        ts = datetime.fromisoformat(r["timestamp"]).astimezone(TZ)
        if date_local_str(ts) == day_date:
            recs.append((ts, r))
    recs.sort(key=lambda x: x[0])
    return recs

def find_record_by_short_id(short_id):
    for r in data["records"]:
        if r.get("short_id") == short_id or make_short_id(r.get("id")) == short_id:
            return r
    return None

def delete_record_by_short_id(chat_id, short_id):
    r = find_record_by_short_id(short_id)
    if not r or str(r.get("owner")) != str(chat_id):
        return False
    try:
        data["records"] = [x for x in data["records"] if not (x.get("short_id") == short_id or make_short_id(x.get("id")) == short_id)]
        data["overall_balance"] = data.get("overall_balance", 0) - r["amount"]
        save_data(data)
        today = datetime.now(tz=TZ).strftime("%Y-%m-%d")
        update_day_window_after_change(chat_id, today)
        return True
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:", e)
        return False

def modify_record_by_short_id(chat_id, short_id, new_text):
    r = find_record_by_short_id(short_id)
    if not r or str(r.get("owner")) != str(chat_id):
        return False
    num, sign, raw = parse_first_number(new_text)
    if num is None:
        return False
    new_amt = apply_sign_and_normalize(num, sign)
    note = new_text[(new_text.find(raw) + len(raw)):].strip() if raw in new_text else ""
    for i, rr in enumerate(data["records"]):
        rr_sid = rr.get("short_id") or make_short_id(rr.get("id"))
        if rr_sid == short_id:
            data["overall_balance"] = data.get("overall_balance", 0) - rr["amount"] + new_amt
            data["records"][i]["amount"] = new_amt
            data["records"][i]["note"] = note
            save_data(data)
            today = datetime.now(tz=TZ).strftime("%Y-%m-%d")
            update_day_window_after_change(chat_id, today)
            return True
    return False

# -------------------------
# New: –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—á—Ç–æ–±—ã –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Å—ã–ª–∫–∞—Ö —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –æ–∫–Ω–æ)
# -------------------------
# pending_forward_state: owner_chat_id -> {"texts": [str,...], "timer": threading.Timer}
pending_forward_state = {}
pending_lock = threading.Lock()
PENDING_WAIT = 1.5  # seconds to wait after last forwarded message

def _pending_timer_handler(owner_chat_id):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ —Ç–∞–π–º–µ—Ä–∞ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –æ–∫–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–æ–∫.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∫–∞–∫ –µ—Å–ª–∏ –±—ã —ç—Ç–æ –±—ã–ª–∏ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
    - –ø–∞—Ä—Å–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º,
    - –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ data["records"],
    - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –≤—ã–∑—ã–≤–∞–µ—Ç update_day_window_after_change –æ–¥–∏–Ω —Ä–∞–∑.
    """
    global data
    with pending_lock:
        state = pending_forward_state.pop(str(owner_chat_id), None)
    if not state:
        return

    texts = state.get("texts", [])
    if not texts:
        return

    # reload data to be sure
    data = load_data()
    today = datetime.now(tz=TZ).strftime("%Y-%m-%d")
    any_added = False
    added_count = 0

    for txt in texts:
        # Each forwarded message may contain multiple lines; parse each line for transaction
        lines = [ln.strip() for ln in txt.splitlines() if ln.strip()]
        for line in lines:
            num, sign, raw = parse_first_number(line)
            if num is None:
                continue
            amt_signed = apply_sign_and_normalize(num, sign)
            note = line[(line.find(raw) + len(raw)):].strip() if raw in line else ""
            rec_id = data.get("next_id", 1)
            short = make_short_id(rec_id)
            ts = datetime.now(tz=ZoneInfo("UTC")).isoformat()
            rec = {
                "id": rec_id,
                "short_id": short,
                "timestamp": ts,
                "amount": amt_signed,
                "note": note,
                "owner": str(owner_chat_id)
            }
            data["records"].append(rec)
            data["next_id"] = rec_id + 1
            data["overall_balance"] = data.get("overall_balance", 0) + amt_signed
            any_added = True
            added_count += 1

    if any_added:
        save_data(data)
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ –û–î–ò–ù —Ä–∞–∑
        try:
            update_day_window_after_change(owner_chat_id, today, purpose="added_records_from_forwards")
            print(f"[pending_forward] –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {owner_chat_id} –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        except Exception as e:
            print(f"[pending_forward] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–∫–Ω–∞ –¥–ª—è {owner_chat_id}: {e}")
    else:
        # –µ—Å–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º –æ–∫–Ω–æ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
        try:
            update_day_window_after_change(owner_chat_id, today, purpose="forward_refresh")
            print(f"[pending_forward] –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–∫–Ω–æ –¥–ª—è {owner_chat_id} (–ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π).")
        except Exception as e:
            print(f"[pending_forward] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–∫–Ω–∞ –¥–ª—è {owner_chat_id}: {e}")

def buffer_forwarded_message(owner_chat_id, message_text):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä, –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è.
    """
    key = str(owner_chat_id)
    with pending_lock:
        state = pending_forward_state.get(key)
        if not state:
            state = {"texts": [], "timer": None}
            pending_forward_state[key] = state
        state["texts"].append(message_text)

        # cancel previous timer
        t = state.get("timer")
        if t and isinstance(t, threading.Timer):
            try:
                t.cancel()
            except Exception:
                pass
        # start new timer
        timer = threading.Timer(PENDING_WAIT, _pending_timer_handler, args=(owner_chat_id,))
        state["timer"] = timer
        timer.daemon = True
        timer.start()

# -------------------------
# New helper: validate and save forward target with test message
# (copied from 9.6.1)
# -------------------------
def validate_and_save_forward(owner_chat_id, target_raw):
    """
    –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å target –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ.
    target_raw –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π (username) –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π —á–∏—Å–ª–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok: bool, message: str)
    –õ–æ–≥–∏ –æ—à–∏–±–æ–∫ –ø–µ—á–∞—Ç–∞—é—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å.
    """
    t = str(target_raw).strip()
    # normalize: allow usernames with or without @
    if t.startswith("@"):
        target = t
    else:
        # try convert to int (chat_id like -100...)
        try:
            target = int(t)
        except Exception:
            # –≤–æ–∑–º–æ–∂–Ω–æ username –±–µ–∑ @
            target = t

    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Ä—É–∂—É)
    test_text = "üîÅ –¢–µ—Å—Ç –æ—Ç –±–æ—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏. –ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ —ç—Ç–æ ‚Äî –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ."
    try:
        bot.send_message(target, test_text)
    except Exception as e:
        print(f"[forward test] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç –≤ {repr(target)}: {e}")
        return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç –≤ {repr(target)}: {e}"
    # –µ—Å–ª–∏ –¥–æ—à–ª–æ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    data.setdefault("forward_targets", {})[str(owner_chat_id)] = str(target)
    save_data(data)
    print(f"[forward test] –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è owner {owner_chat_id} -> target {repr(target)}")
    return True, f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {repr(target)}"

# -------------------------
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞ –¥–Ω—è: (–∫–∞–∫ –≤ 9.6.1)
# -------------------------
def update_day_window_after_change(chat_id, day_date, purpose="day_window"):
    prev = data.get("active_messages", {}).get(day_date)
    text = build_day_window(chat_id, day_date)
    kb = kb_day_main()

    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–º—É –∂–µ —á–∞—Ç—É)
    if prev and int(prev.get("chat_id")) == int(chat_id):
        try:
            bot.edit_message_text(chat_id=int(chat_id), message_id=int(prev.get("message_id")), text=text, reply_markup=kb)
            # –û–±–Ω–æ–≤–∏–º –∑–∞–ø–∏—Å—å active_messages (message_id –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
            # –ó–∞–ø–∏—à–µ–º —Ñ–∞–∫—Ç "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" –≤ –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö (–∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å)
            fake_msg = types.Message.de_json({"message_id": int(prev.get("message_id"))}, bot)  # –Ω–µ–±–æ–ª—å—à–æ–π shim –¥–ª—è –∑–∞–ø–∏—Å–∏
            record_sent_message(chat_id, fake_msg, purpose=purpose, day=day_date)
            save_data(data)
            return prev  # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        except Exception as e:
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞—Ç–µ–º —É–¥–∞–ª–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ
            print(f"edit existing day window failed for {chat_id}/{prev.get('message_id')}: {e}")

    # –ï—Å–ª–∏ –Ω–µ—Ç prev –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        sent = bot.send_message(int(chat_id), text, reply_markup=kb)
        data.setdefault("active_messages", {})[day_date] = {"chat_id": int(chat_id), "message_id": int(sent.message_id)}
        record_sent_message(chat_id, sent, purpose=purpose, day=day_date)
        save_data(data)
    except Exception as e:
        print(f"Failed to send day window to {chat_id}: {e}")
        return None

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (—ç—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –æ–∫–Ω–∞, –æ—Ç–¥–µ–ª—å–Ω–∞—è –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    forward_target = data.get("forward_targets", {}).get(str(chat_id))
    if forward_target:
        try:
            tgt = int(forward_target)
            bot.forward_message(tgt, int(chat_id), sent.message_id)
        except Exception:
            try:
                bot.forward_message(forward_target, int(chat_id), sent.message_id)
            except Exception as e:
                print(f"Forward failed to {forward_target}: {e}")

    # –ü–æ—Ç–æ–º —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ (–µ—Å–ª–∏ –±—ã–ª–æ) —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    if prev and int(prev.get("chat_id")) == int(chat_id):
        delayed_delete(prev["chat_id"], prev["message_id"], delay=5)
        save_data(data)
    return sent

# -------------------------
# –ü—Ä–∏ –ª—é–±–æ–º –≤—Ö–æ–¥—è—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω)
# -------------------------
@bot.message_handler(func=lambda m: True, content_types=['text','photo','document','video','voice','audio','sticker','animation','contact','location'])
def handle_any_message(message):
    global data
    chat_id = message.chat.id
    # reload data to be sure
    data = load_data()

    # -----------------------
    # 1) –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –í–°–ï —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞)
    # -----------------------
    forward_target = data.get("forward_targets", {}).get(str(chat_id))
    if forward_target:
        try:
            try:
                tgt = int(forward_target)
                bot.forward_message(tgt, int(chat_id), message.message_id)
            except Exception:
                bot.forward_message(forward_target, int(chat_id), message.message_id)
        except Exception as e:
            # –µ—Å–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ö–æ–∑—è–∏–Ω—É (–Ω–æ –Ω–µ —Å–ø–∞–º–∏–º)
            try:
                print(f"[auto-forward] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –¥–ª—è owner {chat_id} -> target {forward_target}: {e}")
                bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            except Exception:
                pass

    # -----------------------
    # 2) –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: –±—É—Ñ–µ—Ä–∏–∑—É–µ–º, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–µ—Ä–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–æ–∫ —Å–æ–∑–¥–∞—Ç—å –æ–¥–Ω–æ –æ–∫–Ω–æ
    # -----------------------
    is_forward = getattr(message, "forward_from", None) or getattr(message, "forward_from_chat", None)
    if is_forward:
        # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –±—É—Ñ–µ—Ä–∞: –ø—Ä–∏ media –∏—Å–ø–æ–ª—å–∑—É–µ–º caption, –∏–Ω–∞—á–µ text
        buffered_text = ""
        if getattr(message, "caption", None):
            buffered_text = message.caption or ""
        elif getattr(message, "text", None):
            buffered_text = message.text or ""
        else:
            # placeholder for non-text media
            # include minimal metadata so user sees something
            src = getattr(message, "forward_from_chat", None)
            if src:
                src_s = getattr(src, "title", None) or getattr(src, "username", None) or str(getattr(src, "id", "unknown"))
                buffered_text = f"[–ú–µ–¥–∏–∞, –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ {src_s}]"
            else:
                ffrom = getattr(message, "forward_from", None)
                if ffrom:
                    buffered_text = f"[–ú–µ–¥–∏–∞, –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç {getattr(ffrom,'first_name', '')}]"
                else:
                    buffered_text = "[–ú–µ–¥–∏–∞ (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)]"

        # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏–º –º–µ—Ç–∫—É-–∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –Ω–∞—á–∞–ª–æ (—É–¥–æ–±–Ω–æ –≤ –æ—Ç—á—ë—Ç–µ)
        src_label = ""
        if getattr(message, "forward_from_chat", None):
            fc = message.forward_from_chat
            src_label = f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ —á–∞—Ç–∞: {getattr(fc, 'title', None) or getattr(fc,'username',None) or fc.id}"
        elif getattr(message, "forward_from", None):
            ff = message.forward_from
            src_label = f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç: {getattr(ff, 'first_name', '')} ({getattr(ff,'id', '')})"
        if src_label:
            full_buf = f"{src_label}\n{buffered_text}"
        else:
            full_buf = buffered_text

        # –ü–æ–º–µ—â–∞–µ–º –≤ –±—É—Ñ–µ—Ä –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        buffer_forwarded_message(chat_id, full_buf)
        # –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É (—á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–∫–Ω–∞ –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        return

    # -----------------------
    # 3) –ï—Å–ª–∏ —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (pending_actions) ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    # -----------------------
    pa = pending_actions.get(str(chat_id))
    if pa:
        t = pa.get("type")
        if t == "await_modify_input":
            short = pa["payload"]["short_id"]
            ok = modify_record_by_short_id(chat_id, short, (message.text or "").strip())
            if ok:
                send_and_record(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å {short} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", purpose="modified_record")
            else:
                send_and_record(chat_id, f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å {short}. –ü—Ä–∏–º–µ—Ä: +1000 –∑–∞—Ä–ø–ª–∞—Ç–∞", purpose="modify_failed")
            pending_actions.pop(str(chat_id), None)
            return
        if t == "await_forward_setup":
            # –û–∂–∏–¥–∞–µ–º –ª–∏–±–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å forward_from_chat / forward_from),
            # –ª–∏–±–æ —Ç–µ–∫—Å—Ç —Å chat_id –∏–ª–∏ @username, –ª–∏–±–æ "–æ—Ç–º–µ–Ω–∞"
            target = None

            # 1) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞ ‚Äî —á–∏—Ç–∞–µ–º –µ–≥–æ chat id
            if getattr(message, "forward_from_chat", None):
                try:
                    target = str(message.forward_from_chat.id)
                except Exception:
                    target = None
            elif getattr(message, "forward_from", None):
                try:
                    target = str(message.forward_from.id)
                except Exception:
                    target = None

            # 2) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –≤–≤—ë–ª —Ç–µ–∫—Å—Ç (chat_id –∏–ª–∏ @username)
            if not target and message.content_type == 'text':
                txt = (message.text or "").strip()
                if txt.lower() == "–æ—Ç–º–µ–Ω–∞":
                    send_and_record(chat_id, "–û—Ç–º–µ–Ω–µ–Ω–æ.")
                    pending_actions.pop(str(chat_id), None)
                    return
                target = txt

            if not target:
                send_and_record(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä. –û—Ç–º–µ–Ω–µ–Ω–æ.", purpose="forward_setup_failed")
                pending_actions.pop(str(chat_id), None)
                return

            # validate and save with test
            ok, msg = validate_and_save_forward(chat_id, target)
            if ok:
                send_and_record(chat_id, f"‚úÖ {msg}", purpose="forward_set")
            else:
                send_and_record(chat_id, f"‚ùå {msg}", purpose="forward_set_failed")
            pending_actions.pop(str(chat_id), None)
            return

        # –¥—Ä—É–≥–∏–µ –≤–∏–¥—ã –æ–∂–∏–¥–∞–Ω–∏–π ‚Äî —Å–±—Ä–æ—Å–∏–º
        pending_actions.pop(str(chat_id), None)

    # -----------------------
    # 4) –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –æ–∫–Ω–æ –∏ —Å–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
    # -----------------------
    deleted = delete_active_window_if_today_and_belong(chat_id)
    today = datetime.now(tz=TZ).strftime("%Y-%m-%d")

    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    if message.content_type == 'text':
        text = (message.text or "").strip()
        if not text:
            update_day_window_after_change(chat_id, today, purpose="recreated_on_message")
            return

        lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
        any_added = False
        for line in lines:
            num, sign, raw = parse_first_number(line)
            if num is None:
                continue
            amt_signed = apply_sign_and_normalize(num, sign)
            note = line[(line.find(raw) + len(raw)):].strip() if raw in line else ""
            rec_id = data.get("next_id", 1)
            short = make_short_id(rec_id)
            ts = datetime.now(tz=ZoneInfo("UTC")).isoformat()
            rec = {
                "id": rec_id,
                "short_id": short,
                "timestamp": ts,
                "amount": amt_signed,
                "note": note,
                "owner": str(chat_id)
            }
            data["records"].append(rec)
            data["next_id"] = rec_id + 1
            data["overall_balance"] = data.get("overall_balance", 0) + amt_signed
            any_added = True

        if any_added:
            save_data(data)
            update_day_window_after_change(chat_id, today, purpose="added_records")
        else:
            update_day_window_after_change(chat_id, today, purpose="recreated_on_message")
    else:
        # –î–ª—è —Ñ–∞–π–ª–æ–≤/–º–µ–¥–∏–∞: –Ω–∏—á–µ–≥–æ –≤ –∑–∞–ø–∏—Å–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º, –Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ
        update_day_window_after_change(chat_id, today, purpose="media_received")

# -------------------------
# Callback handler (inline)
# -------------------------
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    data_local = load_data()  # fresh read
    data_call = call.data or ""
    chat_id = call.message.chat.id
    call_msg = call.message
    today = datetime.now(tz=TZ).strftime("%Y-%m-%d")
    try:
        bot.answer_callback_query(call.id)
    except Exception:
        pass

    # –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ reply_markup)
    if data_call == "edit_menu":
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_edit_main(chat_id))
        except Exception:
            send_and_record(chat_id, "–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb_edit_main(chat_id), purpose="edit_menu_fallback")
        return

    if data_call == "edit_cancel":
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_day_main())
        except Exception:
            send_and_record(chat_id, build_day_window(chat_id, today), reply_markup=kb_day_main(), purpose="day_window_fallback")
        return

    # –ò–∑–º–µ–Ω–∏—Ç—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π (–∫–Ω–æ–ø–∫–∏)
    if data_call == "edit_modify":
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_records_list(chat_id, today, mode="modify"))
        except Exception:
            send_and_record(chat_id, "–í—ã–±–æ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=kb_records_list(chat_id, today, mode="modify"), purpose="modify_list_fallback")
        return

    # –£–¥–∞–ª–∏—Ç—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
    if data_call == "edit_delete":
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_records_list(chat_id, today, mode="delete"))
        except Exception:
            send_and_record(chat_id, "–í—ã–±–æ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb_records_list(chat_id, today, mode="delete"), purpose="delete_list_fallback")
        return

    # –≠–∫—Å–ø–æ—Ä—Ç CSV
    if data_call == "edit_export_csv" or data_call == "edit_export_csv_alt":
        try:
            path = export_all_to_csv(CSV_FILE)
            send_file_and_record(chat_id, path, caption="–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (CSV)", purpose="export_csv")
            try:
                bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_edit_main(chat_id))
            except Exception:
                pass
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV:", e)
            send_and_record(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV.", purpose="export_error")
        return

    # –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)
    if data_call == "forward_setup":
        # –ø–æ–ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ target chat id –∏–ª–∏ @username –≤ —á–∞—Ç; —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ pending_actions
        send_and_record(chat_id, "–ü–µ—Ä–µ—à–ª–∏ —Å—é–¥–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ chat_id –∏–ª–∏ @username). –û—Ç–ø—Ä–∞–≤—å '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã.", purpose="await_forward_input")
        pending_actions[str(chat_id)] = {"type": "await_forward_setup", "payload": {}}
        return

    # –û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    if data_call == "forward_cancel":
        ft = data.get("forward_targets", {})
        if str(chat_id) in ft:
            ft.pop(str(chat_id), None)
            data["forward_targets"] = ft
            save_data(data)
            send_and_record(chat_id, "‚úÖ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.", purpose="forward_cancelled")
        else:
            send_and_record(chat_id, "–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.", purpose="forward_cancel_noop")
        # –≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_edit_main(chat_id))
        except Exception:
            pass
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    if data_call == "forward_check":
        ft = data.get("forward_targets", {}).get(str(chat_id))
        if ft:
            send_and_record(chat_id, f"üì® –¢–µ–∫—É—â–∏–π target –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {ft}", purpose="forward_check_resp")
        else:
            send_and_record(chat_id, "üîï –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", purpose="forward_check_resp")
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_edit_main(chat_id))
        except Exception:
            pass
        return

    # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏: select:<mode>:<short_id>
    if data_call.startswith("select:"):
        parts = data_call.split(":", 2)
        if len(parts) != 3:
            send_and_record(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", purpose="select_error")
            return
        mode = parts[1]
        short_id = parts[2]
        if mode == "modify":
            try:
                bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=None)
            except Exception:
                pass
            send_and_record(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {short_id} (–ø—Ä–∏–º–µ—Ä: +1000 –∑–∞—Ä–ø–ª–∞—Ç–∞).", purpose="await_modify_input")
            pending_actions[str(chat_id)] = {"type": "await_modify_input", "payload": {"short_id": short_id}}
            return
        elif mode == "delete":
            try:
                bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_yes_no(f"confirm_delete:{short_id}"))
            except Exception:
                send_and_record(chat_id, f"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å {short_id}?", reply_markup=kb_yes_no(f"confirm_delete:{short_id}"), purpose="delete_confirm_fallback")
            return
        else:
            send_and_record(chat_id, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞.", purpose="select_badmode")
            return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è: confirm_delete:<shortid>_yes/_no
    if data_call.startswith("confirm_delete:"):
        tail = data_call[len("confirm_delete:"):]
        if tail.endswith("_yes"):
            short_id = tail[:-4]
            ok = delete_record_by_short_id(chat_id, short_id)
            if ok:
                try:
                    bot.edit_message_text(f"‚úÖ –ó–∞–ø–∏—Å—å {short_id} —É–¥–∞–ª–µ–Ω–∞.", call_msg.chat.id, call_msg.message_id)
                except Exception:
                    send_and_record(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å {short_id} —É–¥–∞–ª–µ–Ω–∞.", purpose="deleted_record")
            else:
                try:
                    bot.edit_message_text(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å {short_id}.", call_msg.chat.id, call_msg.message_id)
                except Exception:
                    send_and_record(chat_id, f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å {short_id}.", purpose="delete_failed")
        else:
            try:
                bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_edit_main(chat_id))
            except Exception:
                send_and_record(chat_id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb_edit_main(chat_id), purpose="delete_cancelled")
        return

    # –û–±–Ω—É–ª–µ–Ω–∏–µ: –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞/–Ω–µ—Ç
    if data_call == "edit_reset_all":
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_yes_no("confirm_reset_all"))
        except Exception:
            send_and_record(chat_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤—Å–µ–≥–¥–∞? (–î–∞/–ù–µ—Ç)", reply_markup=kb_yes_no("confirm_reset_all"), purpose="reset_confirm_fallback")
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω—É–ª–µ–Ω–∏—è
    if data_call.startswith("confirm_reset_all"):
        if data_call.endswith("_yes"):
            data["overall_balance"] = 0
            data["records"] = []
            data["active_messages"] = {}
            save_data(data)
            try:
                bot.edit_message_text("‚ôªÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã. üìò –î–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å.", call_msg.chat.id, call_msg.message_id)
            except Exception:
                send_and_record(chat_id, "‚ôªÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã. üìò –î–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å.", purpose="reset_done")
        else:
            try:
                bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_edit_main(chat_id))
            except Exception:
                send_and_record(chat_id, "–û–±–Ω—É–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb_edit_main(chat_id), purpose="reset_cancel")
        return

    # no_op –∏–ª–∏ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data_call in ("no_op",):
        try:
            bot.edit_message_reply_markup(call_msg.chat.id, call_msg.message_id, reply_markup=kb_day_main())
        except Exception:
            send_and_record(chat_id, build_day_window(chat_id, today), reply_markup=kb_day_main(), purpose="no_op_fallback")
        return

    # log unhandled
    print("Unhandled callback:", data_call)

# -------------------------
# –ö–æ–º–∞–Ω–¥—ã: /–±–∞–ª–∞–Ω—Å /–æ—Ç—á–µ—Ç /—Å–±—Ä–æ—Å
# -------------------------
@bot.message_handler(commands=["–±–∞–ª–∞–Ω—Å"])
def cmd_balance(message):
    chat_id = message.chat.id
    overall = data.get("overall_balance", 0)
    bot.reply_to(message, f"üí∞ –¢–µ–∫—É—â–∏–π –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: {fmt_amount(overall)}")

@bot.message_handler(commands=["–æ—Ç—á–µ—Ç"])
def cmd_report(message):
    chat_id = message.chat.id
    today = datetime.now(tz=TZ).strftime("%Y-%m-%d")
    update_day_window_after_change(chat_id, today, purpose="report_cmd")

@bot.message_handler(commands=["—Å–±—Ä–æ—Å"])
def cmd_reset(message):
    chat_id = message.chat.id
    kb = kb_yes_no("confirm_reset_all")
    send_and_record(chat_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? (–î–∞/–ù–µ—Ç)", reply_markup=kb, purpose="reset_command")

# -------------------------
# Webhook endpoints
# -------------------------
@app.route("/" + TOKEN, methods=["POST"])
def receive_update():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/", methods=["GET"])
def set_and_ping():
    bot.remove_webhook()
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    bot.set_webhook(url=webhook_url)
    print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", webhook_url)
    if OWNER_ID:
        try:
            msg = bot.send_message(int(OWNER_ID), "‚úÖ –ë–æ—Ç ‚Ññ9.6.3: webhook –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            delayed_delete(int(OWNER_ID), msg.message_id, delay=5)
            record_sent_message(OWNER_ID, msg, purpose="owner_ping")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞:", e)
    return "ok", 200

# -------------------------
# –ó–∞–ø—É—Å–∫
# -------------------------
if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ‚Ññ9.6.3 (webhook)...")
    save_data(data)
    if OWNER_ID:
        try:
            msg = bot.send_message(int(OWNER_ID), "‚úÖ –ë–æ—Ç ‚Ññ9.6.3 –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            delayed_delete(int(OWNER_ID), msg.message_id, delay=5)
            record_sent_message(OWNER_ID, msg, purpose="owner_start")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞:", e)
    app.run(host="0.0.0.0", port=PORT)

# –í–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏