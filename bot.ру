# -----------------------------
# ОТСЕК 1 — Импорты и настройки
# -----------------------------
import os
import json
import csv
import logging
import re
import threading
import time
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
APP_URL = os.getenv("APP_URL", "https://fo-1.onrender.com")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.6.1.8"

if not TOKEN:
    raise ValueError("BOT_TOKEN не установлен!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -----------------------------
# ОТСЕК 2 — Логирование
# -----------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[logging.FileHandler(LOG_FILE, encoding="utf-8"), logging.StreamHandler()]
)

def log_info(msg):
    logging.info(msg)

def log_error(msg):
    logging.error(msg)

log_info(f"Старт приложения. Версия {VERSION}")


# -----------------------------
# ОТСЕК 3 — Структура данных и IO
# -----------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "chats": {},
        "active_messages": {},
        "processed_messages": [],
        "tracked_messages": {},
        "next_id": 1,
        "forward_targets": [],
        "window_mode": "single"  # "single" или "replace"
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except:
            d = default_data()
    else:
        d = default_data()
    base = default_data()
    for k, v in base.items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"Ошибка сохранения data.json: {e}")

data = load_data()

if OWNER_ID:
    try:
        oi = int(OWNER_ID)
        if oi not in data.get("forward_targets", []):
            data["forward_targets"].append(oi)
            save_data(data)
    except:
        pass


# -----------------------------
# ОТСЕК 4 — Вспомогательные функции по чату/дате
# -----------------------------
def get_today_key():
    return datetime.now(TZ).strftime("%Y-%m-%d")

def get_chat_store(chat_id):
    cid = str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid] = {
            "balance": 0,
            "records": [],
            "next_id": 1,
            "daily_records": {},
            "active_windows": {}
        }
        save_data(data)
    return data["chats"][cid]

def get_today_active_window(chat_id):
    today = get_today_key()
    day_map = data["active_messages"].get(today, {})
    return day_map.get(str(chat_id))

def set_today_active_window(chat_id, message_id):
    today = get_today_key()
    if "active_messages" not in data:
        data["active_messages"] = {}
    if today not in data["active_messages"]:
        data["active_messages"][today] = {}
    data["active_messages"][today][str(chat_id)] = message_id
    save_data(data)

# -----------------------------
# ОТСЕК 5 — Работа с записями
# -----------------------------
num_re = re.compile(r"([+-]?\s*\d+)")

def extract_first_number(s):
    if not s:
        return None, None
    m = num_re.search(s)
    if not m:
        return None, None
    token = m.group(1)
    try:
        amt = int(token.replace(" ", ""))
    except:
        return None, None
    return amt, token.strip()

def add_record_to_chat(chat_id, amount, note, owner):
    store = get_chat_store(chat_id)
    rid = data.get("next_id", 1)
    rec = {
        "id": rid,
        "short_id": f"R{rid}",
        "timestamp": datetime.now(TZ).isoformat(timespec="seconds"),
        "amount": amount,
        "note": note,
        "owner": owner
    }
    data.setdefault("records", []).append(rec)
    store.setdefault("records", []).append(rec)
    day = get_today_key()
    store.setdefault("daily_records", {}).setdefault(day, []).append(rec)
    store["balance"] += amount
    data["overall_balance"] += amount
    data["next_id"] = rid + 1
    save_data(data)
    try:
        export_to_csv(data)
    except:
        pass
    return rec

def update_record_in_chat(chat_id, rid, new_amount, new_note):
    store = get_chat_store(chat_id)
    found = None
    for r in store.get("records", []):
        if r["id"] == rid:
            diff = new_amount - r["amount"]
            r["amount"] = new_amount
            r["note"] = new_note
            found = r
            break
    if found:
        for day_recs in store.get("daily_records", {}).values():
            for r in day_recs:
                if r["id"] == rid:
                    r.update(found)
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data(data)
        export_to_csv(data)
        return True, found
    return False, None

def delete_record_in_chat(chat_id, rid):
    store = get_chat_store(chat_id)
    removed = None
    for r in list(store.get("records", [])):
        if r["id"] == rid:
            removed = r
            store["records"].remove(r)
            break
    if removed:
        for day_key, recs in store.get("daily_records", {}).items():
            store["daily_records"][day_key] = [x for x in recs if x["id"] != rid]
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        data["records"] = [x for x in data.get("records", []) if x["id"] != rid]
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data(data)
        export_to_csv(data)
        return True, removed
    return False, None

def get_daily_records(chat_id, day_key=None):
    store = get_chat_store(chat_id)
    if not day_key:
        day_key = get_today_key()
    return store.get("daily_records", {}).get(day_key, [])

def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["chat_id","ID","short_id","timestamp","amount","note","owner","day_key"])
            for cid, cdata in d.get("chats", {}).items():
                for day_key, records in cdata.get("daily_records", {}).items():
                    for r in records:
                        writer.writerow([cid, r.get("id"), r.get("short_id"), r.get("timestamp"),
                                         r.get("amount"), r.get("note"), r.get("owner"), day_key])
    except Exception as e:
        log_error(f"Ошибка экспорта CSV: {e}")


# -----------------------------
# ОТСЕК 6 — Inline клавиатура и кнопки
# -----------------------------
def get_main_keyboard(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("Добавить запись", callback_data="add_record"))
    kb.add(types.InlineKeyboardButton("Показать баланс", callback_data="show_balance"))
    kb.add(types.InlineKeyboardButton("Редактировать запись", callback_data="edit_record"))
    kb.add(types.InlineKeyboardButton("Удалить запись", callback_data="delete_record"))
    kb.add(types.InlineKeyboardButton("Переключить окно", callback_data="switch_window"))
    return kb

# -----------------------------
# ОТСЕК 7 — Обработка callback
# -----------------------------
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    data_in = call.data
    if data_in == "show_balance":
        store = get_chat_store(chat_id)
        bot.answer_callback_query(call.id, f"Баланс: {store.get('balance', 0)}")
    elif data_in == "switch_window":
        current = data.get("window_mode", "single")
        data["window_mode"] = "replace" if current == "single" else "single"
        save_data(data)
        bot.answer_callback_query(call.id, f"Режим окон изменен: {data['window_mode']}")
    elif data_in.startswith("add_record"):
        bot.send_message(chat_id, "Отправьте сумму и описание, например: +1000 хлеб")
    # редактирование и удаление будем обрабатывать как текстовые команды

# -----------------------------
# ОТСЕК 8 — Обработка текстовых сообщений
# -----------------------------
@bot.message_handler(func=lambda m: True)
def handle_message(msg):
    chat_id = msg.chat.id
    text = msg.text.strip()
    from_user = msg.from_user.username or str(msg.from_user.id)

    # Проверяем пересылку
    if text.startswith("/forward "):
        target_text = text[len("/forward "):].strip()
        forward_all_messages(target_text, chat_id)
        return

    amount, token = extract_first_number(text)
    if amount is not None:
        note = text.replace(token, "").strip()
        rec = add_record_to_chat(chat_id, amount, note, from_user)
        # одно окно/замена
        mode = data.get("window_mode", "single")
        if mode == "replace":
            active = get_today_active_window(chat_id)
            if active:
                try:
                    bot.edit_message_text(f"Запись: {rec['amount']} — {rec['note']}",
                                          chat_id=chat_id, message_id=active)
                    return
                except:
                    pass
        # обычная отправка
        m = bot.send_message(chat_id,
                             f"Запись добавлена: {rec['amount']} — {rec['note']}",
                             reply_markup=get_main_keyboard(chat_id))
        set_today_active_window(chat_id, m.message_id)
    else:
        bot.send_message(chat_id, "Не распознано число. Введите, например: +1000 хлеб",
                         reply_markup=get_main_keyboard(chat_id))


# -----------------------------
# ОТСЕК 9 — Пересылка сообщений
# -----------------------------
def forward_all_messages(text, chat_id):
    targets = data.get("forward_targets", [])
    for t in targets:
        try:
            bot.send_message(t, f"Переслано из {chat_id}: {text}")
        except Exception as e:
            log_error(f"Ошибка пересылки в {t}: {e}")



# -----------------------------
# ОТСЕК 10 — Flask webhook
# -----------------------------
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "", 200

@app.route("/", methods=["GET"])
def index():
    return f"Бот ФО активен. Версия {VERSION}"


# -----------------------------
# ОТСЕК 11 — Установка webhook
# -----------------------------
def setup_webhook():
    try:
        bot.remove_webhook()
        time.sleep(1)
        bot.set_webhook(url=f"{APP_URL}/{TOKEN}")
        log_info(f"Webhook установлен: {APP_URL}/{TOKEN}")
    except Exception as e:
        log_error(f"Ошибка установки webhook: {e}")


# -----------------------------
# ОТСЕК 12 — Автозапуск
# -----------------------------
def main():
    setup_webhook()
    log_info("Бот готов к работе")

if __name__ == "__main__":
    main()
    app.run(host="0.0.0.0", port=PORT)
















