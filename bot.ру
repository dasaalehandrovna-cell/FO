# –ö–æ–¥ –±–æ—Ç–∞ ‚Ññ5
# Webhook-–±–æ—Ç (–Ω–∞ Render). –í–µ—Ä—Å–∏—è ‚Ññ5 ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–µ ID, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–æ–º –∂–µ –æ–∫–Ω–µ, –≤—ã–±–æ—Ä –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
# –¢—Ä–µ–±—É–µ—Ç –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏: BOT_TOKEN, OWNER_ID
# requirements.txt: pyTelegramBotAPI==4.23.0, flask

import os
import json
import time
import threading
import re
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

# -------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")  # —Å—Ç—Ä–æ–∫–∞
TZ = ZoneInfo("America/Argentina/Catamarca")  # –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
DATA_FILE = "data.json"
PORT = int(os.environ.get("PORT", 5000))

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not OWNER_ID:
    print("‚ö†Ô∏è OWNER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# -------------------------
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ö—Ä–∞–Ω—è–µ–º–∞—è –≤ data.json
# {
#   "overall_balance": int,
#   "records": [ { "id": int, "short_id": str, "timestamp": iso, "amount": int, "note": str, "owner": chat_id } , ... ],
#   "active_messages": { "YYYY-MM-DD": { "chat_id": id, "message_id": id } },
#   "next_id": int
# }
# -------------------------

def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "active_messages": {},
        "next_id": 1
    }

# -------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞/–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ + –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ short_id –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
# -------------------------
def to_base36(n: int) -> str:
    # –∫–æ—Ä–æ—Ç–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ id
    if n < 0:
        n = -n
    digits = "0123456789abcdefghijklmnopqrstuvwxyz"
    if n == 0:
        return "0"
    s = ""
    while n > 0:
        n, rem = divmod(n, 36)
        s = digits[rem] + s
    return s

def load_data():
    data = default_data()
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
            except Exception:
                data = default_data()
    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ next_id –∏ short_id –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
    if "next_id" not in data:
        # –≤—ã—á–∏—Å–ª–∏–º max id + 1
        maxid = 0
        for r in data.get("records", []):
            try:
                maxid = max(maxid, int(r.get("id", 0)))
            except Exception:
                pass
        data["next_id"] = maxid + 1
    # –ø—Ä–∏—Å–≤–æ–∏–º short_id –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    changed = False
    for r in data.get("records", []):
        if "short_id" not in r or not r["short_id"]:
            # –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –Ω–∞ id (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –Ω–∞ sequential next_id
            base = r.get("id") or data["next_id"]
            r["short_id"] = to_base36(int(base))
            changed = True
    if changed:
        save_data(data)
    return data

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

# -------------------------
# –£—Ç–∏–ª–∏—Ç—ã: –ø–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–µ–ª –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–∞–∫ –≤ ‚Ññ4)
# -------------------------
NUMBER_RE = re.compile(r'([+-]?\s*[\d][\d\s\.,]*)')

def parse_first_number(text):
    if not text:
        return None, None, None
    m = NUMBER_RE.search(text)
    if not m:
        return None, None, None
    raw = m.group(1)
    s = raw.strip()
    sign = None
    if s.startswith('+'):
        sign = '+'
        digits_part = s[1:].strip()
    elif s.startswith('-'):
        sign = '-'
        digits_part = s[1:].strip()
    else:
        sign = ''
        digits_part = s
    digits_norm = re.sub(r'[\s\.,]', '', digits_part)
    digits_norm = re.match(r'(\d+)', digits_norm)
    if not digits_norm:
        return None, None, None
    num = int(digits_norm.group(1))
    return num, sign, raw

def apply_sign_and_normalize(num, sign):
    if sign == '+':
        return num
    else:
        return -num

def format_amount_with_dots(n):
    s = f"{abs(n):,}"
    s = s.replace(",", ".")
    return s

# -------------------------
# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –¥–Ω—è (–≤–∫–ª—é—á–∞–µ–º short_id –≤ –≤—ã–≤–æ–¥)
# -------------------------
def date_str_local(dt):
    return dt.astimezone(TZ).strftime("%Y-%m-%d")

def time_str_local(dt):
    return dt.astimezone(TZ).strftime("%H:%M")

def build_day_window(chat_id, day_date):
    recs = []
    for r in data["records"]:
        ts = datetime.fromisoformat(r["timestamp"]).astimezone(TZ)
        if date_str_local(ts) == day_date and str(r.get("owner")) == str(chat_id):
            recs.append( (ts, r) )
    recs.sort(key=lambda x: x[0])
    if not recs:
        return "üìò –ó–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."

    lines = []
    header = f"üìÖ {day_date}\n"
    lines.append(header)
    last_hour = None
    day_income = 0
    day_expense = 0
    for ts, r in recs:
        hour = ts.strftime("%H")
        if last_hour is None:
            last_hour = hour
        elif hour != last_hour:
            lines.append("")
            last_hour = hour
        amt = r["amount"]
        amt_fmt = format_amount_with_dots(amt)
        sign = "+" if amt > 0 else "-"
        note = r.get("note", "")
        sid = r.get("short_id", "")
        # –≤–∫–ª—é—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç–∏
        lines.append(f"üïì {time_str_local(ts)} [{sid}] {sign}{amt_fmt} {note}".rstrip())
        if amt > 0:
            day_income += amt
        else:
            day_expense += abs(amt)
    overall = data.get("overall_balance", 0)
    lines.append("")
    lines.append(f"üìà –ü—Ä–∏—Ö–æ–¥ –¥–Ω—è: {format_amount_with_dots(day_income)}")
    lines.append(f"üìâ –†–∞—Å—Ö–æ–¥ –¥–Ω—è: {format_amount_with_dots(day_expense)}")
    lines.append(f"üíµ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {format_amount_with_dots(overall)}")
    return "\n".join(lines)

# -------------------------
# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
# -------------------------
def delete_message_later(chat_id, message_id, delay=10):
    def worker():
        time.sleep(delay)
        try:
            bot.delete_message(chat_id, message_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ {chat_id}: {e}")
    threading.Thread(target=worker, daemon=True).start()

# -------------------------
# –í—Å–ø–æ–º–æ–≥. —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ –ø–∞–º—è—Ç–∏)
# -------------------------
# pending_actions[chat_id] = { "type": "await_modify_input"/"await_reset_confirm"/... , "payload": {...} }
pending_actions = {}

# -------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ short_id
# -------------------------
def find_record_by_short_id(short_id):
    for r in data["records"]:
        if r.get("short_id") == short_id:
            return r
    return None

def delete_record_by_short_id(chat_id, short_id):
    r = find_record_by_short_id(short_id)
    if not r or str(r.get("owner")) != str(chat_id):
        return False
    try:
        data["records"] = [x for x in data["records"] if x["short_id"] != short_id]
        data["overall_balance"] = data.get("overall_balance", 0) - r["amount"]
        save_data(data)
        # –æ–±–Ω–æ–≤–∏–º –æ–∫–Ω–æ –¥–Ω—è
        today = date_str_local(datetime.now(tz=TZ))
        update_day_window_after_change(chat_id, today)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ short_id: {e}")
        return False

def modify_record_by_short_id(chat_id, short_id, new_text):
    r = find_record_by_short_id(short_id)
    if not r or str(r.get("owner")) != str(chat_id):
        return False
    num, sign, raw = parse_first_number(new_text)
    if num is None:
        return False
    new_amt = apply_sign_and_normalize(num, sign)
    note = new_text[ (new_text.find(raw) + len(raw)) : ].strip() if raw in new_text else ""
    for i, rr in enumerate(data["records"]):
        if rr["short_id"] == short_id:
            data["overall_balance"] = data.get("overall_balance", 0) - rr["amount"] + new_amt
            data["records"][i]["amount"] = new_amt
            data["records"][i]["note"] = note
            save_data(data)
            today = date_str_local(datetime.now(tz=TZ))
            update_day_window_after_change(chat_id, today)
            return True
    return False

# -------------------------
# –ö–Ω–æ–ø–∫–∏ / –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã)
# -------------------------
def make_day_keyboard():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_menu"))
    return kb

def make_edit_main_keyboard():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="start_choose:modify"))
    kb.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="start_choose:delete"))
    kb.add(types.InlineKeyboardButton("–û–±–Ω—É–ª–∏—Ç—å –≤—Å—ë (–≤—Å–µ—Ö)", callback_data="edit_reset_all"))
    kb.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="edit_cancel"))
    return kb

def make_yes_no(cb_prefix):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–î–∞", callback_data=f"{cb_prefix}_yes"),
           types.InlineKeyboardButton("–ù–µ—Ç", callback_data=f"{cb_prefix}_no"))
    return kb

def make_records_list_keyboard(chat_id, day_date, mode):
    # mode: 'modify' or 'delete'
    kb = types.InlineKeyboardMarkup()
    recs = get_day_records_for_chat(chat_id, day_date)
    if not recs:
        kb.add(types.InlineKeyboardButton("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å", callback_data="no_op"))
        kb.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="edit_menu"))
        return kb
    # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –Ω–∞ –∑–∞–ø–∏—Å—å: label "[sid] ¬±amount note"
    for idx, (ts, r) in enumerate(recs, start=1):
        sid = r.get("short_id", "")
        amt = r["amount"]
        sign = "+" if amt>0 else "-"
        label = f"{idx}) [{sid}] {sign}{format_amount_with_dots(amt)} {r.get('note','')}"
        cb = f"select_rec:{mode}:{sid}"
        # –æ–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω—É –º–µ—Ç–∫–∏ –¥–æ 64 –±–∞–π—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (telegram –∫–Ω–æ–ø–∫–∏ –¥–ª–∏–Ω–Ω—ã–µ, –Ω–æ –≤—Å—ë –∂–µ)
        kb.add(types.InlineKeyboardButton(label[:60], callback_data=cb))
    kb.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="edit_menu"))
    return kb

# -------------------------
# Webhook endpoints
# -------------------------
@app.route("/" + TOKEN, methods=["POST"])
def receive_update():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/", methods=["GET"])
def set_and_ping():
    bot.remove_webhook()
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    bot.set_webhook(url=webhook_url)
    print(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

    if OWNER_ID:
        try:
            msg = bot.send_message(int(OWNER_ID), "‚úÖ –Ø –∂–∏–≤ ‚Ññ5 (–ø–∏–Ω–≥ –æ—Ç Render –∏–ª–∏ UptimeRobot)")
            delete_message_later(int(OWNER_ID), msg.message_id, delay=10)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞: {e}")
    return "Webhook active", 200

# -------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π)
# -------------------------
@bot.message_handler(func=lambda m: True)
def handle_message(message):
    chat_id = message.chat.id
    text = (message.text or "").strip()
    pa = pending_actions.get(str(chat_id))
    if pa:
        t = pa.get("type")
        if t == "await_modify_input":
            payload = pa.get("payload", {})
            short_id = payload.get("record_short_id")
            # –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
            ok = modify_record_by_short_id(chat_id, short_id, text)
            if ok:
                bot.send_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å [{short_id}] –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            else:
                bot.send_message(chat_id, f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å [{short_id}]. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç (+1000 —Ö–ª–µ–±).")
            pending_actions.pop(str(chat_id), None)
            return
        elif t == "await_reset_confirm":
            if text.strip().lower() in ("y","yes","–¥–∞","–¥"):
                data["overall_balance"] = 0
                data["records"] = []
                data["active_messages"] = {}
                save_data(data)
                bot.send_message(chat_id, "‚ôªÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã.")
            else:
                bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω—ã.")
            pending_actions.pop(str(chat_id), None)
            return
        # –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å...
    # –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–∞—Ä—Å–∏–º –∑–∞–ø–∏—Å—å (–∫–∞–∫ –ø—Ä–µ–∂–¥–µ)
    num, sign, raw = parse_first_number(text)
    if num is None:
        bot.reply_to(message, "‚ùó –Ø –Ω–µ –Ω–∞—à—ë–ª —á–∏—Å–ª–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü—Ä–∏–º–µ—Ä: `+1000 —Ö–ª–µ–±` –∏–ª–∏ `-500 –±–µ–Ω–∑–∏–Ω` –∏–ª–∏ `1000 —Ö–ª–µ–±` (–±–µ–∑ –∑–Ω–∞–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–∞—Å—Ö–æ–¥).")
        return

    amt_signed = apply_sign_and_normalize(num, sign)
    note = text[ (text.find(raw) + len(raw)) : ].strip() if raw in text else ""
    rec_id = data.get("next_id", 1)
    short_id = to_base36(rec_id)
    ts = datetime.now(tz=ZoneInfo("UTC")).isoformat()
    rec = {
        "id": rec_id,
        "short_id": short_id,
        "timestamp": ts,
        "amount": amt_signed,
        "note": note,
        "owner": str(chat_id)
    }
    data["records"].append(rec)
    data["next_id"] = rec_id + 1
    data["overall_balance"] = data.get("overall_balance", 0) + amt_signed
    save_data(data)

    local_day = date_str_local(datetime.fromisoformat(ts))
    day_text = build_day_window(chat_id, local_day)
    kb = make_day_keyboard()
    sent = bot.send_message(chat_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {format_amount_with_dots(amt_signed) if amt_signed!=0 else '0'}\n{note}\n\n{day_text}", reply_markup=kb, parse_mode="Markdown")
    am = data.get("active_messages", {})
    prev = am.get(local_day)
    if prev:
        try:
            bot.delete_message(prev["chat_id"], prev["message_id"])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–∫–Ω–æ –¥–Ω—è: {e}")
    data["active_messages"][local_day] = {"chat_id": chat_id, "message_id": sent.message_id}
    save_data(data)

# -------------------------
# Callback query handler (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –≤ —Ç–æ–º –∂–µ –æ–∫–Ω–µ)
# -------------------------
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    call_data = call.data or ""
    chat_id = call.message.chat.id
    user = str(chat_id)

    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞—â–∏—Ç–∞: –æ—Ç–≤–µ—Ç—ã –Ω–∞ callback –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å—Å—è
    try:
        bot.answer_callback_query(call.id)
    except Exception:
        pass

    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤ —Ç–æ–º –∂–µ –æ–∫–Ω–µ)
    if call_data == "edit_menu":
        # –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–æ–≤–æ–µ
        try:
            bot.edit_message_text("–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", chat_id, call.message.message_id, reply_markup=make_edit_main_keyboard())
        except Exception as e:
            # –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (fallback)
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ edit_menu: {e}")
            bot.send_message(chat_id, "–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=make_edit_main_keyboard())
        return

    if call_data == "edit_cancel":
        # –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º –æ–∫–Ω–æ –Ω–∞–∑–∞–¥ ‚Äî –ø–æ–∫–∞–∂–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ –¥–Ω—è –∑–∞–Ω–æ–≤–æ
        now = datetime.now(tz=TZ)
        day_date = date_str_local(now)
        day_text = build_day_window(chat_id, day_date)
        try:
            bot.edit_message_text(day_text, chat_id, call.message.message_id, reply_markup=make_day_keyboard())
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å –æ–∫–Ω–æ –¥–Ω—è –ø—Ä–∏ edit_cancel: {e}")
            bot.send_message(chat_id, day_text, reply_markup=make_day_keyboard())
        return

    if call_data.startswith("start_choose:"):
        mode = call_data.split(":",1)[1]  # 'modify' –∏–ª–∏ 'delete'
        # —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏ –≤—Å—Ç–∞–≤–∏–º –∫–Ω–æ–ø–∫–∏ –≤ —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        now = datetime.now(tz=TZ)
        day_date = date_str_local(now)
        title = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:" if mode=="modify" else "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        kb = make_records_list_keyboard(chat_id, day_date, mode)
        try:
            bot.edit_message_text(title, chat_id, call.message.message_id, reply_markup=kb)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ start_choose: {e}")
            bot.send_message(chat_id, title, reply_markup=kb)
        return

    # –í—ã–±–æ—Ä –∑–∞–ø–∏—Å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞: select_rec:mode:shortid
    if call_data.startswith("select_rec:"):
        parts = call_data.split(":",2)
        if len(parts) < 3:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
            return
        mode = parts[1]
        short_id = parts[2]
        if mode == "modify":
            # –í —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ; —Å–æ—Ö—Ä–∞–Ω–∏–º pending_actions
            try:
                bot.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ [{short_id}]. –ü—Ä–∏–º–µ—Ä: +1000 –∑–∞—Ä–ø–ª–∞—Ç–∞\n\n(–í–≤–æ–¥–∏—Ç–µ –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç; –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è.)", chat_id, call.message.message_id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="edit_menu")))
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ select_rec modify: {e}")
                bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ [{short_id}]. –ü—Ä–∏–º–µ—Ä: +1000 –∑–∞—Ä–ø–ª–∞—Ç–∞")
            pending_actions[user] = {"type": "await_modify_input", "payload": {"record_short_id": short_id}}
            return
        elif mode == "delete":
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–¥–∞/–Ω–µ—Ç)
            kb = make_yes_no(f"confirm_delete:{short_id}")
            try:
                bot.edit_message_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å [{short_id}] ?", chat_id, call.message.message_id, reply_markup=kb)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ select_rec delete: {e}")
                bot.send_message(chat_id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å [{short_id}] ?", reply_markup=kb)
            return
        else:
            bot.send_message(chat_id, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ä–µ–∂–∏–º.")
            return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è: confirm_delete:<shortid>_yes/no
    if call_data.startswith("confirm_delete:"):
        # format: confirm_delete:<shortid>_yes  OR confirm_delete:<shortid>_no
        tail = call_data[len("confirm_delete:"):]
        if tail.endswith("_yes"):
            short_id = tail[:-4]
            ok = delete_record_by_short_id(chat_id, short_id)
            if ok:
                try:
                    bot.edit_message_text(f"‚úÖ –ó–∞–ø–∏—Å—å [{short_id}] —É–¥–∞–ª–µ–Ω–∞.", chat_id, call.message.message_id)
                except Exception:
                    bot.send_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å [{short_id}] —É–¥–∞–ª–µ–Ω–∞.")
            else:
                try:
                    bot.edit_message_text(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å [{short_id}].", chat_id, call.message.message_id)
                except Exception:
                    bot.send_message(chat_id, f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å [{short_id}].")
        else:
            # –æ—Ç–º–µ–Ω–∞
            try:
                bot.edit_message_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", chat_id, call.message.message_id, reply_markup=make_edit_main_keyboard())
            except Exception:
                bot.send_message(chat_id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=make_edit_main_keyboard())
        return

    # –û–±–Ω—É–ª–µ–Ω–∏–µ (–≤ —Ç–æ–º –∂–µ –æ–∫–Ω–µ)
    if call_data == "edit_reset_all":
        kb = make_yes_no("confirm_reset_all")
        try:
            bot.edit_message_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤—Å–µ–≥–¥–∞? (–î–∞/–ù–µ—Ç)", chat_id, call.message.message_id, reply_markup=kb)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ edit_reset_all: {e}")
            bot.send_message(chat_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤—Å–µ–≥–¥–∞? (–î–∞/–ù–µ—Ç)", reply_markup=kb)
        pending_actions[user] = {"type": "await_reset_confirm", "payload": {}}
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω—É–ª–µ–Ω–∏—è
    if call_data.startswith("confirm_reset_all"):
        if call_data.endswith("_yes"):
            data["overall_balance"] = 0
            data["records"] = []
            data["active_messages"] = {}
            save_data(data)
            try:
                bot.edit_message_text("‚ôªÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã.", chat_id, call.message.message_id)
            except Exception:
                bot.send_message(chat_id, "‚ôªÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã.")
        else:
            try:
                bot.edit_message_text("–û–±–Ω—É–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", chat_id, call.message.message_id, reply_markup=make_edit_main_keyboard())
            except Exception:
                bot.send_message(chat_id, "–û–±–Ω—É–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=make_edit_main_keyboard())
        pending_actions.pop(user, None)
        return

    # if no_op or unknown ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if call_data in ("no_op",):
        try:
            bot.edit_message_text(build_day_window(chat_id, date_str_local(datetime.now(tz=TZ))), chat_id, call.message.message_id, reply_markup=make_day_keyboard())
        except Exception:
            bot.send_message(chat_id, build_day_window(chat_id, date_str_local(datetime.now(tz=TZ))), reply_markup=make_day_keyboard())
        return

    # fallback
    print(f"Unhandled callback: {call_data}")

# -------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –¥–Ω—è
# -------------------------
def get_day_records_for_chat(chat_id, day_date):
    recs = []
    for r in data["records"]:
        if str(r.get("owner")) != str(chat_id):
            continue
        ts = datetime.fromisoformat(r["timestamp"]).astimezone(TZ)
        if date_str_local(ts) == day_date:
            recs.append((ts, r))
    recs.sort(key=lambda x: x[0])
    return recs

# -------------------------
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞ –¥–Ω—è (–ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ‚Äî —Ç–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ, –∫–∞–∫ —Ä–∞–Ω—å—à–µ
# -------------------------
def update_day_window_after_change(chat_id, day_date):
    day_text = build_day_window(chat_id, day_date)
    kb = make_day_keyboard()
    try:
        sent = bot.send_message(chat_id, day_text, reply_markup=kb)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–Ω—è: {e}")
        return
    prev = data.get("active_messages", {}).get(day_date)
    if prev:
        try:
            bot.delete_message(prev["chat_id"], prev["message_id"])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–∫–Ω–æ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
    data["active_messages"][day_date] = {"chat_id": chat_id, "message_id": sent.message_id}
    save_data(data)

# -------------------------
# –ö–æ–º–∞–Ω–¥—ã –±—ã—Å—Ç—Ä—ã–µ: /–±–∞–ª–∞–Ω—Å /–æ—Ç—á–µ—Ç /—Å–±—Ä–æ—Å
# -------------------------
@bot.message_handler(commands=["–±–∞–ª–∞–Ω—Å"])
def cmd_balance(message):
    chat_id = message.chat.id
    overall = data.get("overall_balance", 0)
    bot.reply_to(message, f"üí∞ –¢–µ–∫—É—â–∏–π –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: {format_amount_with_dots(overall)}")

@bot.message_handler(commands=["–æ—Ç—á–µ—Ç"])
def cmd_report(message):
    chat_id = message.chat.id
    now = datetime.now(tz=TZ)
    day_date = date_str_local(now)
    day_text = build_day_window(chat_id, day_date)
    sent = bot.send_message(chat_id, day_text, reply_markup=make_day_keyboard())
    prev = data.get("active_messages", {}).get(day_date)
    if prev:
        try:
            bot.delete_message(prev["chat_id"], prev["message_id"])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–∫–Ω–æ –ø—Ä–∏ /–æ—Ç—á–µ—Ç: {e}")
    data["active_messages"][day_date] = {"chat_id": chat_id, "message_id": sent.message_id}
    save_data(data)

@bot.message_handler(commands=["—Å–±—Ä–æ—Å"])
def cmd_reset(message):
    chat_id = message.chat.id
    kb = make_yes_no("confirm_reset_all")
    # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.send_message(chat_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? (–î–∞/–ù–µ—Ç)", reply_markup=kb)
    pending_actions[str(chat_id)] = {"type": "await_reset_confirm", "payload": {}}

# -------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# -------------------------
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç ‚Ññ5 –∑–∞–ø—É—â–µ–Ω (webhook).")
    if OWNER_ID:
        try:
            msg = bot.send_message(int(OWNER_ID), "‚úÖ –ë–æ—Ç ‚Ññ5 –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (–≤–µ—Ä—Å–∏—è ‚Ññ5)")
            delete_message_later(int(OWNER_ID), msg.message_id, delay=10)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞: {e}")
    save_data(data)
    app.run(host="0.0.0.0", port=PORT)
