# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.6.1.7
# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è (–≥–∏–±—Ä–∏–¥ 9.6.1.6 + –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞)
# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∫–æ–º–∞–Ω–¥—ã –ª–∞—Ç–∏–Ω–∏—Ü–µ–π
# ============================================

# -----------------------------
# –û–¢–°–ï–ö 1 ‚Äî –ò–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------------
import os
import json
import csv
import logging
import re
import threading
import time
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

# --------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# --------------------------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
APP_URL = os.getenv("APP_URL", "https://fo-1.onrender.com")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.6.1.7"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -----------------------------
# –û–¢–°–ï–ö 2 ‚Äî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)

def log_info(msg):
    logging.info(msg)

def log_error(msg):
    logging.error(msg)

log_info(f"–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–µ—Ä—Å–∏—è {VERSION}")

# -----------------------------
# –û–¢–°–ï–ö 3 ‚Äî –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
# -----------------------------
def default_data():
    return {
        "chats": {},
        "forward_targets": [],
        "tracked_messages": {},
        "processed_messages": []
    }

def get_today_key():
    return datetime.now(TZ).strftime("%Y-%m-%d")

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ data.json: {e}")
            d = default_data()
    else:
        d = default_data()
    for k, v in default_data().items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

def get_chat_store(chat_id):
    cid = str(chat_id)
    store = data["chats"].setdefault(cid, {
        "balance": 0,
        "records": [],
        "next_id": 1,
        "daily_records": {},
        "active_windows": {}
    })
    return store

def get_today_active_window(chat_id):
    store = get_chat_store(chat_id)
    today_key = get_today_key()
    return store.get("active_windows", {}).get(today_key)

def set_today_active_window(chat_id, message_id):
    store = get_chat_store(chat_id)
    today_key = get_today_key()
    store["active_windows"][today_key] = message_id
    save_data(data)

def add_record_to_chat(chat_id, amount, note, owner):
    store = get_chat_store(chat_id)
    rid = store.get("next_id", 1)
    today_key = get_today_key()
    record = {
        "id": rid,
        "short_id": f"R{rid}",
        "timestamp": datetime.now(TZ).isoformat(timespec="seconds"),
        "amount": amount,
        "note": note,
        "owner": owner
    }
    store.setdefault("records", []).append(record)
    store["daily_records"].setdefault(today_key, []).append(record)
    store["balance"] += amount
    store["next_id"] = rid + 1
    save_data(data)
    export_to_csv(data)
    return record

def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["chat_id","ID","short_id","timestamp","amount","note","owner","day_key"])
            for cid, cdata in d.get("chats", {}).items():
                for day_key, records in cdata.get("daily_records", {}).items():
                    for r in records:
                        writer.writerow([cid, r.get("id"), r.get("short_id"), r.get("timestamp"),
                                         r.get("amount"), r.get("note"), r.get("owner"), day_key])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")

data = load_data()
if OWNER_ID:
    try:
        owner_int = int(OWNER_ID)
    except:
        owner_int = None
    if owner_int and owner_int not in data["forward_targets"]:
        data["forward_targets"].append(owner_int)
        save_data(data)

# -----------------------------
# –û–¢–°–ï–ö 4 ‚Äî –ü–æ–º–æ—â–Ω–∏–∫–∏ –∏ –∫–Ω–æ–ø–∫–∏
# -----------------------------
num_re = re.compile(r'([+-]?\s*\d+)')
def extract_first_number(s):
    if not s:
        return None, None
    m = num_re.search(s)
    if not m:
        return None, None
    token = m.group(1)
    token_clean = token.replace(" ", "")
    try:
        amt = int(token_clean)
    except:
        return None, None
    return amt, token.strip()

def build_main_keyboard(chat_id=None):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
        types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report")
    )
    kb.add(
        types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="btn_edit"),
        types.InlineKeyboardButton("‚öôÔ∏è –°–±—Ä–æ—Å", callback_data="btn_reset")
    )
    balance_text = ""
    if chat_id:
        store = get_chat_store(chat_id)
        balance_text = f"üí∞ {store.get('balance',0)} ARS"
    kb.add(types.InlineKeyboardButton(balance_text or "üí∞ 0 ARS", callback_data="noop"))
    return kb

def build_edit_list_keyboard(chat_id):
    store = get_chat_store(chat_id)
    kb = types.InlineKeyboardMarkup()
    records = store.get("records", [])[-20:]
    if not records:
        kb.add(types.InlineKeyboardButton("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π", callback_data="noop"))
        kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="btn_start"))
        return kb
    for r in records:
        sign = "+" if r["amount"] > 0 else ""
        label = f"{r['short_id']}: {sign}{r['amount']} ARS {r.get('note','')}"
        kb.row(
            types.InlineKeyboardButton(label, callback_data=f"noop_row:{r['id']}"),
            types.InlineKeyboardButton("‚úè", callback_data=f"edit_select:{r['id']}"),
            types.InlineKeyboardButton("üóë", callback_data=f"delete_record:{r['id']}")
        )
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="btn_start"))
    return kb

# -----------------------------
# –û–¢–°–ï–ö 5 ‚Äî –ö–æ–º–∞–Ω–¥—ã
# -----------------------------
@bot.message_handler(commands=["start"])
def cmd_start(msg):
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª!\n\n"
        "üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
        "/myid ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à ID\n"
        "/chatid ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞\n"
        "/balance ‚Äî —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        "/report ‚Äî –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/reset ‚Äî –æ–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–≤–ª–∞–¥–µ–ª–µ—Ü)\n\n"
        "üì§ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
        "/addforward ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏\n"
        "/removeforward ‚Äî —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏\n"
        "/listforwards ‚Äî —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "+500 –ø—Ä–æ–¥–∞–∂–∞\n"
        "-200 –ø—Ä–æ–¥—É–∫—Ç—ã\n\n"
        "–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ–¥–Ω–æ–º –æ–∫–Ω–µ üëá"
    )
    bot.send_message(msg.chat.id, text, reply_markup=build_main_keyboard(msg.chat.id))

@bot.message_handler(commands=["myid"])
def cmd_myid(msg):
    bot.send_message(msg.chat.id, f"–í–∞—à ID: {msg.from_user.id}")

@bot.message_handler(commands=["chatid"])
def cmd_chatid(msg):
    bot.send_message(msg.chat.id, f"ID —á–∞—Ç–∞: {msg.chat.id}")

@bot.message_handler(commands=["balance"])
def cmd_balance(msg):
    store = get_chat_store(msg.chat.id)
    bot.send_message(msg.chat.id, f"üí∞ –ë–∞–ª–∞–Ω—Å: {store.get('balance',0)} ARS", reply_markup=build_main_keyboard(msg.chat.id))

@bot.message_handler(commands=["report"])
def cmd_report(msg):
    records = get_today_records(msg.chat.id)
    if not records:
        bot.send_message(msg.chat.id, "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.", reply_markup=build_main_keyboard(msg.chat.id))
        return
    text = "üìä –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n"
    for r in records[-20:]:
        sign = "+" if r["amount"] > 0 else ""
        text += f"{r['short_id']}: {sign}{r['amount']} ARS {r['note']}\n"
    bot.send_message(msg.chat.id, text, reply_markup=build_main_keyboard(msg.chat.id))

@bot.message_handler(commands=["reset"])
def cmd_reset(msg):
    if str(msg.from_user.id) != str(OWNER_ID):
        bot.send_message(msg.chat.id, "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return
    global data
    data = default_data()
    save_data(data)
    bot.send_message(msg.chat.id, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.", reply_markup=build_main_keyboard(msg.chat.id))

# -----------------------------
# –û–¢–°–ï–ö 6 ‚Äî –ü—Ä–∏—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥ (–æ–¥–Ω–æ –æ–∫–Ω–æ)
# -----------------------------
@bot.message_handler(func=lambda m: True)
def handle_message(msg):
    amt, token = extract_first_number(msg.text)
    if amt is None:
        bot.send_message(msg.chat.id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏.", reply_markup=build_main_keyboard(msg.chat.id))
        return
    note = msg.text.replace(token, "").strip()
    add_record_to_chat(msg.chat.id, amt, note, msg.from_user.id)
    update_or_send_today_window(msg.chat.id)

def get_today_records(chat_id):
    store = get_chat_store(chat_id)
    return store.get("daily_records", {}).get(get_today_key(), [])

def update_or_send_today_window(chat_id):
    today_key = get_today_key()
    active_msg_id = get_today_active_window(chat_id)
    records = get_today_records(chat_id)
    text = f"üìÖ –û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ {today_key}:\n"
    for r in records[-20:]:
        sign = "+" if r["amount"] > 0 else ""
        text += f"{r['short_id']}: {sign}{r['amount']} ARS {r['note']}\n"
    try:
        if active_msg_id:
            bot.edit_message_text(text, chat_id=chat_id, message_id=active_msg_id, reply_markup=build_main_keyboard(chat_id))
        else:
            sent = bot.send_message(chat_id, text, reply_markup=build_main_keyboard(chat_id))
            set_today_active_window(chat_id, sent.message_id)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞: {e}")
        sent = bot.send_message(chat_id, text, reply_markup=build_main_keyboard(chat_id))
        set_today_active_window(chat_id, sent.message_id)

# -----------------------------
# –û–¢–°–ï–ö 7 ‚Äî Callback –∫–Ω–æ–ø–∫–∏
# -----------------------------
@bot.callback_query_handler(func=lambda c: True)
def cb_handler(call):
    chat_id = call.message.chat.id
    data_cb = call.data
    if data_cb == "btn_balance":
        cmd_balance(call.message)
    elif data_cb == "btn_report":
        cmd_report(call.message)
    elif data_cb == "btn_reset":
        cmd_reset(call.message)
    elif data_cb == "btn_edit":
        kb = build_edit_list_keyboard(chat_id)
        try:
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=kb)
        except:
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–∫–Ω–æ.", reply_markup=kb)
    elif data_cb.startswith("delete_record:"):
        rid = int(data_cb.split(":")[1])
        success, rec = delete_record_in_chat(chat_id, rid)
        if success:
            bot.answer_callback_query(call.id, "‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")
            update_or_send_today_window(chat_id)
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å")
    else:
        bot.answer_callback_query(call.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")

# -----------------------------
# –û–¢–°–ï–ö 8 ‚Äî Flask webhook
# -----------------------------
@app.route("/" + TOKEN, methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª ‚Äî –≤–µ—Ä—Å–∏—è {VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

def set_webhook():
    url = f"{APP_URL}/{TOKEN}"
    bot.remove_webhook()
    time.sleep(0.5)
    bot.set_webhook(url=url)
    log_info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")

if __name__ == "__main__":
    set_webhook()
    app.run(host="0.0.0.0", port=PORT)

# ============================================
# –ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
# –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: 418
# –í–µ—Ä—Å–∏—è: 9.6.1.7
# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è
# ============================================