# === –ö–û–î ‚Ññ9.6 ===
# Telegram-–±–æ—Ç "–§–û" (Flask + webhook)
# –í–µ—Ä—Å–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)

import os
import json
import time
import threading
from datetime import datetime, date
from flask import Flask, request
import telebot
from telebot import types

app = Flask(__name__)
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

DATA_FILE = "data.json"
CSV_FILE = "data.csv"
STATE_FILE = "state.json"

# ---------- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π ----------
def load_state():
    if os.path.exists(STATE_FILE):
        with open(STATE_FILE, "r") as f:
            return json.load(f)
    return {"last_message_id": None, "last_message_date": None}

def save_state(state):
    with open(STATE_FILE, "w") as f:
        json.dump(state, f)

state = load_state()

# ---------- –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ----------
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {"balance": 0, "records": []}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

def export_to_csv(data):
    with open(CSV_FILE, "w", encoding="utf-8") as f:
        f.write("–î–∞—Ç–∞,–í—Ä–µ–º—è,–¢–∏–ø,–°—É–º–º–∞,–û–ø–∏—Å–∞–Ω–∏–µ,–ë–∞–ª–∞–Ω—Å\n")
        for r in data["records"]:
            f.write(f"{r['date']},{r['time']},{r['type']},{r['amount']},{r['desc']},{r['balance']}\n")

# ---------- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ —É—á—ë—Ç–∞ ----------
def format_report(data):
    today = date.today().strftime("%d.%m.%Y")
    text = f"üìä <b>–£—á—ë—Ç –∑–∞ {today}</b>\n\n"
    for r in data["records"]:
        text += f"{r['time']} ‚Äî {r['type']} {r['amount']} ({r['desc']})\n"
    text += f"\nüí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {data['balance']}"
    return text

def send_new_report(chat_id, data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä–æ–µ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)."""
    global state
    text = format_report(data)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit"))
    markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data="reset"))
    markup.add(types.InlineKeyboardButton("–≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="export_csv"))
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ—Å—ã–ª–∫–∞", callback_data="forward_setup"))

    msg = bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=markup)

    last_message_id = state.get("last_message_id")
    state["last_message_id"] = msg.message_id
    state["last_message_date"] = date.today().isoformat()
    save_state(state)

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    if last_message_id:
        threading.Timer(5.0, lambda: safe_delete(chat_id, last_message_id)).start()

def safe_delete(chat_id, msg_id):
    try:
        bot.delete_message(chat_id, msg_id)
    except Exception:
        pass

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ----------
@bot.message_handler(content_types=["text"])
def handle_message(message):
    chat_id = message.chat.id
    data = load_data()
    text = message.text.strip()

    if text.startswith("+") or text.startswith("-"):
        try:
            sign = 1 if text.startswith("+") else -1
            parts = text[1:].strip().split(maxsplit=1)
            amount = int(parts[0])
            desc = parts[1] if len(parts) > 1 else ""
            data["balance"] += amount * sign

            record = {
                "date": date.today().strftime("%d.%m.%Y"),
                "time": datetime.now().strftime("%H:%M:%S"),
                "type": "–ü—Ä–∏—Ö–æ–¥" if sign == 1 else "–†–∞—Å—Ö–æ–¥",
                "amount": amount,
                "desc": desc,
                "balance": data["balance"],
            }
            data["records"].append(record)
            save_data(data)
            export_to_csv(data)
            send_new_report(chat_id, data)
        except Exception:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å –æ–∫–Ω–æ
        send_new_report(chat_id, data)

# ---------- –ö–Ω–æ–ø–∫–∏ ----------
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    chat_id = call.message.chat.id
    data = load_data()

    if call.data == "reset":
        confirm_markup = types.InlineKeyboardMarkup()
        confirm_markup.add(types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_reset"))
        confirm_markup.add(types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel"))
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=confirm_markup)

    elif call.data == "confirm_reset":
        save_data({"balance": 0, "records": []})
        export_to_csv({"balance": 0, "records": []})
        send_new_report(chat_id, {"balance": 0, "records": []})

    elif call.data == "cancel":
        send_new_report(chat_id, data)

    elif call.data == "export_csv":
        if os.path.exists(CSV_FILE):
            bot.send_document(chat_id, open(CSV_FILE, "rb"))

    elif call.data == "forward_setup":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ ID —á–∞—Ç–∞", callback_data="forward_enter"))
        markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)

    elif call.data == "forward_enter":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–ª–∏ '–æ—Ç–º–µ–Ω–∞').")
        bot.register_next_step_handler(call.message, process_forward_chat_id)

def process_forward_chat_id(message):
    chat_id = message.chat.id
    text = message.text.strip()
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        data = load_data()
        send_new_report(chat_id, data)
    else:
        try:
            forward_id = int(text)
            with open("forward_chat.json", "w") as f:
                json.dump({"chat_id": forward_id}, f)
            bot.send_message(chat_id, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –≤ —á–∞—Ç ID: {forward_id}")
        except ValueError:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# ---------- Flask Webhook ----------
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/")
def index():
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{request.host}/{BOT_TOKEN}")
    return "Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 200


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)