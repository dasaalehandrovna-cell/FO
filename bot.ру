# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.6.1.6
# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∫–æ–º–∞–Ω–¥—ã –ª–∞—Ç–∏–Ω–∏—Ü–µ–π.
# –û–¢–°–ï–ö–ò –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö.
# ============================================



# -----------------------------
# –û–¢–°–ï–ö 1 ‚Äî –ò–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------------
import os
import json
import csv              # ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω —è–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç CSV
import logging
import requests
import re
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

# --------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# --------------------------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")  # —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ
APP_URL = os.getenv("APP_URL", "https://fo-1.onrender.com")  # URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è webhook
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.6.1.7"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

log_info = logging.info
log_error = logging.error

# --------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# --------------------------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")  # —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ
APP_URL = os.getenv("APP_URL", "https://fo-1.onrender.com")  # URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è webhook
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.6.1.6"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# --------------------------------------------
# –û–¢–°–ï–ö 2 ‚Äî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# --------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)

def log_info(msg):
    logging.info(msg)

def log_error(msg):
    logging.error(msg)

log_info(f"–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–µ—Ä—Å–∏—è {VERSION}")

# --------------------------------------------
# –û–¢–°–ï–ö 3 ‚Äî –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º
# --------------------------------------------
def default_data():
    return {
        "chats": {},  # chat_id -> { balance, records:[], next_id }
        "forward_targets": [],  # —Å–ø–∏—Å–æ–∫ chat_id (int)
        "tracked_messages": {},  # –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: chat_id -> {user_id: state}
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ data.json: {e}")
            d = default_data()
    else:
        d = default_data()
    # Ensure keys
    for k, v in default_data().items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["chat_id","ID","short_id","timestamp","amount","note","owner"])
            for cid, cdata in d.get("chats", {}).items():
                for r in cdata.get("records", []):
                    writer.writerow([cid, r.get("id"), r.get("short_id"), r.get("timestamp"), r.get("amount"), r.get("note"), r.get("owner")])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")

data = load_data()

# –µ—Å–ª–∏ OWNER_ID –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ ‚Äî —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ forward_targets
if OWNER_ID:
    try:
        owner_int = int(OWNER_ID)
    except Exception:
        owner_int = None
    if owner_int is not None and owner_int not in data["forward_targets"]:
        data["forward_targets"].append(owner_int)
        save_data(data)


# --------------------------------------------
# –û–¢–°–ï–ö 4 ‚Äî –ö–æ–º–∞–Ω–¥—ã
# --------------------------------------------
@bot.message_handler(commands=["start"])
def cmd_start(msg):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫–∂–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üöÄ –°—Ç–∞—Ä—Ç.
    """
    text = (
        f"üöÄ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω (–≤–µ—Ä—Å–∏—è {VERSION})\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/balance ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/report ‚Äì –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
        "/edit ‚Äì —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å\n"
        "/reset ‚Äì —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)\n"
        "/cod ‚Äì –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n\n"
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞:\n"
        "+1000 –ø—Ä–æ–¥–∞–∂–∞  –∏–ª–∏  -500 –µ–¥–∞"
    )
    bot.send_message(msg.chat.id, text, reply_markup=build_main_keyboard())


@bot.message_handler(commands=["cod"])
def cmd_cod(msg):
    """
    –ö–æ–º–∞–Ω–¥–∞ /cod ‚Äî –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –∏ –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏–π.
    """
    description = (
        f"üìò –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è {VERSION}\n"
        "--------------------------------------\n"
        "üîπ –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π\n"
        "üîπ –ö–Ω–æ–ø–æ—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
        "üîπ –û—Ç–¥–µ–ª—å–Ω—ã–π —É—á—ë—Ç –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É\n"
        "üîπ –£–¥–æ–±–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /addforward (–ø–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —á–∞—Ç –¥–æ–±–∞–≤–∏—Ç—Å—è)\n"
        "üîπ –£—á—ë—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–∞—Å—á—ë—Ç–∞—Ö\n"
        "üîπ –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π üöÄ –°—Ç–∞—Ä—Ç\n"
        "üîπ –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ª–æ–≥–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥–∞\n"
        "--------------------------------------\n"
        "üìÇ –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥ Render Webhook.\n"
    )
    bot.send_message(msg.chat.id, description, reply_markup=build_main_keyboard())

# --------------------------------------------
# –û–¢–°–ï–ö 5 ‚Äî –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –∫–Ω–æ–ø–∫–∏
# --------------------------------------------
from telebot import types

def build_main_keyboard():
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:
    - –ë–∞–ª–∞–Ω—Å
    - –û—Ç—á—ë—Ç
    - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    - –°–±—Ä–æ—Å
    - –°—Ç–∞—Ä—Ç
    - –û –∫–æ–¥–µ
    """
    kb = types.InlineKeyboardMarkup()
    kb.row(
        types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
        types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report")
    )
    kb.row(
        types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="btn_edit"),
        types.InlineKeyboardButton("‚öôÔ∏è –°–±—Ä–æ—Å", callback_data="btn_reset")
    )
    # –∑–∞–º–µ–Ω–µ–Ω–æ: –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏ ¬´–ü–µ—Ä–µ—Å—ã–ª–∫–∞¬ª ‚Äî ¬´–°—Ç–∞—Ä—Ç¬ª
    kb.row(
        types.InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data="btn_start"),
        types.InlineKeyboardButton("üìò –û –∫–æ–¥–µ", callback_data="btn_cod")
    )
    return kb


def build_edit_list_keyboard(chat_id):
    """
    –°–æ–∑–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ /edit –∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
    """
    store = get_chat_store(chat_id)
    kb = types.InlineKeyboardMarkup()
    records = store.get("records", [])[-20:]
    if not records:
        kb.add(types.InlineKeyboardButton("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π", callback_data="noop"))
        return kb

    for r in records:
        text = f"{r['short_id']}: {r['amount']} ‚Äî {r.get('note','')}"
        # –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ: ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ üóë –£–¥–∞–ª–∏—Ç—å
        row = [
            types.InlineKeyboardButton("‚úèÔ∏è", callback_data=f"edit_select:{r['id']}"),
            types.InlineKeyboardButton("üóë", callback_data=f"delete_record:{r['id']}")
        ]
        kb.add(types.InlineKeyboardButton(text, callback_data=f"noop_row:{r['id']}"))
        kb.row(*row)
    return kb

# --------------------------------------------
# –û–¢–°–ï–ö 6 ‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
# --------------------------------------------

@bot.message_handler(commands=["addforward"])
def cmd_addforward(msg):
    """
    ‚úÖ –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞,
    –∏ –±–æ—Ç —Å–∞–º –¥–æ–±–∞–≤–∏—Ç —ç—Ç–æ—Ç chat_id –≤ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.
    –¢–∞–∫–∂–µ –æ—Å—Ç–∞—ë—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ä—É—á–Ω—É—é –≤–≤–µ—Å—Ç–∏ ID.
    """
    if OWNER_ID is None or str(msg.from_user.id) != str(OWNER_ID):
        bot.reply_to(msg, "–ö–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü.")
        return

    # –≤–∞—Ä–∏–∞–Ω—Ç —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
    parts = msg.text.split()
    if len(parts) > 1:
        try:
            cid = int(parts[1])
        except Exception:
            bot.reply_to(msg, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º).")
            return
        if cid in data["forward_targets"]:
            bot.reply_to(msg, "–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.")
            return
        data["forward_targets"].append(cid)
        save_data(data)
        bot.reply_to(msg, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —á–∞—Ç –≤ –ø–µ—Ä–µ—Å—ã–ª–∫—É: {cid}")
        log_info(f"FORWARD ADD (manual): {cid}")
        return

    # –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ ‚Äî –∂–¥—ë–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.reply_to(msg, "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–µ—Ä–µ—Å—ã–ª–∫—É.")


@bot.message_handler(func=lambda m: m.forward_from_chat is not None or m.forward_from is not None)
def handle_forwarded_for_addforward(msg):
    """
    –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç —á–∞—Ç –≤ –ø–µ—Ä–µ—Å—ã–ª–∫—É.
    –ï—Å–ª–∏ –æ–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—É–º–º—É ‚Äî —É—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
    """
    # --- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ —á–∞—Ç–∞
    if str(msg.from_user.id) == str(OWNER_ID) and msg.forward_from_chat:
        chat_id = msg.forward_from_chat.id
        if chat_id not in data["forward_targets"]:
            data["forward_targets"].append(chat_id)
            save_data(data)
            bot.reply_to(msg, f"‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {chat_id}")
            log_info(f"FORWARD ADD (via forward): {chat_id}")
            return

    # --- –£—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–≤ –ª–∏—á–∫–µ –±–æ—Ç–∞)
    if msg.text:
        amount, note = parse_transaction(msg.text)
        if amount is not None:
            rec = add_record(amount, note, msg.from_user.id)
            bot.reply_to(msg, f"‚úÖ –£—á—Ç–µ–Ω–æ (–∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ): {amount} {note}\n–ë–∞–ª–∞–Ω—Å: {data.get('overall_balance',0)} ‚ÇΩ")


# --------------------------------------------
# –û–¢–°–ï–ö 7 ‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ (–∫–Ω–æ–ø–∫–∏)
# --------------------------------------------
@bot.callback_query_handler(func=lambda c: True)
def handle_callback(call):
    try:
        data_cd = call.data

        # --- –ö–Ω–æ–ø–∫–∞ üí∞ –ë–∞–ª–∞–Ω—Å
        if data_cd == "btn_balance":
            store = get_chat_store(call.message.chat.id)
            bot.answer_callback_query(call.id, text=f"–ë–∞–ª–∞–Ω—Å: {store.get('balance',0)} ‚ÇΩ")
            bot.send_message(call.message.chat.id, f"üí∞ –ë–∞–ª–∞–Ω—Å —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {store.get('balance',0)} ‚ÇΩ", reply_markup=build_main_keyboard())

        # --- –ö–Ω–æ–ø–∫–∞ üìä –û—Ç—á—ë—Ç
        elif data_cd == "btn_report":
            cmd_report(call.message)
            bot.answer_callback_query(call.id)

        # --- –ö–Ω–æ–ø–∫–∞ ‚öôÔ∏è –°–±—Ä–æ—Å
        elif data_cd == "btn_reset":
            if str(call.from_user.id) != str(OWNER_ID):
                bot.answer_callback_query(call.id, text="–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.")
                return
            bot.send_message(call.message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –û—Ç–ø—Ä–∞–≤—å—Ç–µ /reset –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=build_main_keyboard())
            bot.answer_callback_query(call.id)

        # --- –ö–Ω–æ–ø–∫–∞ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        elif data_cd == "btn_edit":
            kb = build_edit_list_keyboard(call.message.chat.id)
            if not kb.keyboard or len(kb.keyboard) == 0:
                bot.send_message(call.message.chat.id, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", reply_markup=build_main_keyboard())
                bot.answer_callback_query(call.id)
                return
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
            bot.answer_callback_query(call.id)

        # --- –ö–Ω–æ–ø–∫–∞ üöÄ –°—Ç–∞—Ä—Ç
        elif data_cd == "btn_start":
            cmd_start(call.message)
            bot.answer_callback_query(call.id)

        # --- –ö–Ω–æ–ø–∫–∞ üìò –û –∫–æ–¥–µ
        elif data_cd == "btn_cod":
            bot.answer_callback_query(call.id)
            cmd_cod(call.message)

        # --- –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)
        elif data_cd.startswith("edit_select:"):
            rid = int(data_cd.split(":")[1])
            chat_state = data.setdefault("tracked_messages", {})
            chat_key = str(call.message.chat.id)
            user_states = chat_state.setdefault(chat_key, {})
            user_states[str(call.from_user.id)] = {"action": "edit_wait_value", "rid": rid}
            save_data(data)
            bot.send_message(
                call.message.chat.id,
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è R{rid} (–Ω–∞–ø—Ä–∏–º–µ—Ä: +500 –ø—Ä–æ–¥–∞–∂–∞)\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üóë –£–¥–∞–ª–∏—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=build_main_keyboard()
            )
            bot.answer_callback_query(call.id)

        # --- –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
        elif data_cd.startswith("delete_record:"):
            rid = int(data_cd.split(":")[1])
            ok, rec = delete_record_in_chat(call.message.chat.id, rid)
            if ok:
                bot.send_message(call.message.chat.id, f"‚úÖ –ó–∞–ø–∏—Å—å R{rid} —É–¥–∞–ª–µ–Ω–∞. –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {get_chat_store(call.message.chat.id).get('balance',0)} ‚ÇΩ", reply_markup=build_main_keyboard())
                bot.answer_callback_query(call.id, text=f"R{rid} —É–¥–∞–ª–µ–Ω–∞.")
            else:
                bot.answer_callback_query(call.id, text="–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        else:
            bot.answer_callback_query(call.id)

    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")

# --------------------------------------------
# –û–¢–°–ï–ö 8 ‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞
# --------------------------------------------
@bot.message_handler(func=lambda m: True, content_types=["text", "photo", "document", "voice", "video", "audio", "sticker"])
def handle_message(msg):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤ –∏ –±–µ–∑ from_user
    if not getattr(msg, "from_user", None):
        return
    if msg.from_user.is_bot:
        return

    # --- 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∞–Ω–∞–ª–æ–≥ /edit)
    chat_key = str(msg.chat.id)
    user_states = data.setdefault("tracked_messages", {}).get(chat_key, {})
    state = user_states.get(str(msg.from_user.id))
    if state and state.get("action") == "edit_wait_value":
        rid = state.get("rid")
        lines = msg.text.splitlines() if msg.content_type == "text" and msg.text else []
        if not lines:
            bot.reply_to(msg, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É —Å —á–∏—Å–ª–æ–º, –ø—Ä–∏–º–µ—Ä: +500 –ø—Ä–æ–¥–∞–∂–∞.", reply_markup=build_main_keyboard())
            return
        first_line = lines[0].strip()
        amt, token = extract_first_number(first_line)
        if amt is None:
            bot.reply_to(msg, "–ß–∏—Å–ª–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.", reply_markup=build_main_keyboard())
            return
        m = num_re.search(first_line)
        note = first_line[m.end():].strip() if m else ""
        raw_token = token
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫ —Å—É–º–º—ã
        if raw_token.lstrip().startswith("+"):
            final_amt = amt
        elif raw_token.lstrip().startswith("-"):
            final_amt = amt
        else:
            final_amt = -abs(amt)
        ok, updated = update_record_in_chat(msg.chat.id, rid, final_amt, note)
        user_states.pop(str(msg.from_user.id), None)
        save_data(data)
        if ok:
            bot.reply_to(msg, f"‚úÖ –ó–∞–ø–∏—Å—å R{rid} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {updated['amount']} ‚Äî {updated.get('note','')}\n–ë–∞–ª–∞–Ω—Å: {get_chat_store(msg.chat.id).get('balance',0)} ‚ÇΩ", reply_markup=build_main_keyboard())
        else:
            bot.reply_to(msg, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=build_main_keyboard())
        return

    # --- 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    is_owner_msg = False
    if OWNER_ID:
        try:
            owner_int = int(OWNER_ID)
        except Exception:
            owner_int = None
        is_owner_msg = (owner_int is not None and msg.from_user.id == owner_int)

    # --- 3. –£—á–µ—Ç —É–∂–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π
    processed = data.setdefault("processed_messages", [])
    msg_key = f"{msg.chat.id}:{msg.message_id}"
    if msg_key in processed:
        return
    processed.append(msg_key)
    if len(processed) > 500:
        processed = processed[-250:]
    data["processed_messages"] = processed
    save_data(data)

    # --- 4. –ü–µ—Ä–µ—Å—ã–ª–∫–∞ (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞)
    if is_owner_msg:
        for target in list(data.get("forward_targets", [])):
            try:
                t = int(target)
            except Exception:
                continue
            # –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç
            if t == msg.chat.id:
                # –µ—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –ø–∏—à–µ—Ç –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –ª–∏—á–∫—É –≤–ª–∞–¥–µ–ª—å—Ü—É
                if owner_int and t != owner_int:
                    bot.copy_message(chat_id=owner_int, from_chat_id=msg.chat.id, message_id=msg.message_id)
                    log_info(f"–í–ª–∞–¥–µ–ª–µ—Ü –Ω–∞–ø–∏—Å–∞–ª –≤ —Ü–µ–ª—å {t} ‚Äî –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –ª–∏—á–∫—É –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_int}")
                continue
            try:
                bot.copy_message(chat_id=t, from_chat_id=msg.chat.id, message_id=msg.message_id)
                log_info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ {t}")
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ {t}: {e}")

    # --- 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—É—á—ë—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º)
    if msg.content_type == "text" and msg.text:
        lines = msg.text.splitlines()
        any_added = False
        for line in lines:
            line = line.strip()
            if not line:
                continue
            amt, token = extract_first_number(line)
            if amt is None:
                continue
            m = num_re.search(line)
            note = line[m.end():].strip() if m else ""
            raw_token = token
            if raw_token.lstrip().startswith("+"):
                final_amt = amt
            elif raw_token.lstrip().startswith("-"):
                final_amt = amt
            else:
                final_amt = -abs(amt)
            add_record_to_chat(msg.chat.id, final_amt, note, msg.from_user.id)
            any_added = True
        if any_added:
            bot.reply_to(msg, f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏. –ë–∞–ª–∞–Ω—Å: {get_chat_store(msg.chat.id).get('balance',0)} ‚ÇΩ", reply_markup=build_main_keyboard())
            return

    # --- 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å)
    if msg.content_type in ["photo", "document", "video", "audio"] and getattr(msg, "caption", None):
        lines = msg.caption.splitlines()
        any_added = False
        for line in lines:
            line = line.strip()
            if not line:
                continue
            amt, token = extract_first_number(line)
            if amt is None:
                continue
            m = num_re.search(line)
            note = line[m.end():].strip() if m else ""
            raw_token = token
            if raw_token.lstrip().startswith("+"):
                final_amt = amt
            elif raw_token.lstrip().startswith("-"):
                final_amt = amt
            else:
                final_amt = -abs(amt)
            add_record_to_chat(msg.chat.id, final_amt, note, msg.from_user.id)
            any_added = True
        if any_added:
            bot.reply_to(msg, f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ø–æ–¥–ø–∏—Å–∏. –ë–∞–ª–∞–Ω—Å: {get_chat_store(msg.chat.id).get('balance',0)} ‚ÇΩ", reply_markup=build_main_keyboard())
            return

# --------------------------------------------
# –û–¢–°–ï–ö 9 ‚Äî Flask webhook endpoints –∏ –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞
# --------------------------------------------
@app.route("/", methods=["GET"])
def index():
    return f"–ë–æ—Ç –≤–µ—Ä—Å–∏—è {VERSION} –∑–∞–ø—É—â–µ–Ω."

@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        raw = request.stream.read().decode("utf-8")
        update = telebot.types.Update.de_json(raw)
        bot.process_new_updates([update])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
    return "ok", 200

def ensure_webhook():
    try:
        webhook_url = f"{APP_URL.rstrip('/')}/webhook"
        info = requests.get(f"https://api.telegram.org/bot{TOKEN}/getWebhookInfo", timeout=10).json()
        current = info.get("result", {}).get("url", "")
        if current != webhook_url:
            r = requests.get(f"https://api.telegram.org/bot{TOKEN}/setWebhook", params={"url": webhook_url}, timeout=10)
            try:
                jr = r.json()
            except Exception:
                jr = {"ok": False, "description": r.text}
            if jr.get("ok"):
                log_info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            else:
                log_error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {jr}")
        else:
            log_info("Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏/—É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

def notify_owner_start():
    if OWNER_ID is None:
        return
    try:
        owner_int = int(OWNER_ID)
    except Exception:
        return
    try:
        text = f"üí¨ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è {VERSION} –∑–∞–ø—É—â–µ–Ω ‚úÖ"
        bot.send_message(owner_int, text, reply_markup=build_main_keyboard())
        log_info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")

# --------------------------------------------
# –û–¢–°–ï–ö 10 ‚Äî –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# --------------------------------------------
if __name__ == "__main__":
    ensure_webhook()
    notify_owner_start()
    log_info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–≤–µ—Ä—Å–∏—è {VERSION})")
    app.run(host="0.0.0.0", port=PORT)

# ============================================
# –ö–æ–Ω–µ—Ü –∫–æ–¥–∞ ‚Äî –≤–µ—Ä—Å–∏—è 9.6.1.6
# –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: 655
# ============================================
