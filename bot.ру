# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.8.3 ‚Äî –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω
# ID –≤ –ø–∞–º—è—Ç–∏: Code_001
# ============================================

import os
import json
import csv
import logging
import re
import threading
import time
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
APP_URL = os.getenv("APP_URL", "https://yourapp.onrender.com")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.8.3"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -----------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[logging.FileHandler(LOG_FILE, encoding="utf-8"), logging.StreamHandler()]
)

def log_info(msg):
    logging.info(msg)
def log_error(msg):
    logging.error(msg)

log_info(f"–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–µ—Ä—Å–∏—è {VERSION}")

# -----------------------------
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ IO
# -----------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "chats": {},
        "active_messages": {},
        "processed_messages": [],
        "forward_targets": [],
        "tracked_messages": {},
        "next_id": 1
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except:
            d = default_data()
    else:
        d = default_data()
    base = default_data()
    for k, v in base.items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

data = load_data()

if OWNER_ID:
    try:
        oi = int(OWNER_ID)
        if oi not in data.get("forward_targets", []):
            data["forward_targets"].append(oi)
            save_data(data)
    except Exception:
        pass

# -----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
# -----------------------------
def get_today_key():
    return datetime.now(TZ).strftime("%Y-%m-%d")

def get_chat_store(chat_id):
    cid = str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid] = {
            "balance": 0,
            "records": [],
            "next_id": 1,
            "daily_records": {},
            "active_windows": {},
            "edit_wait": None,
            "edit_target": None,
            "forward_enabled": False
        }
        save_data(data)
    return data["chats"][cid]

def set_today_active_window(chat_id, message_id):
    today = get_today_key()
    if "active_messages" not in data:
        data["active_messages"] = {}
    if today not in data["active_messages"]:
        data["active_messages"][today] = {}
    data["active_messages"][today][str(chat_id)] = message_id
    save_data(data)

# -----------------------------
# –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø–∏—Å—è–º–∏
# -----------------------------
def add_record_to_chat(chat_id, amount, note, owner):
    store = get_chat_store(chat_id)
    rid = data.get("next_id", 1)
    rec = {"id": rid, "short_id": f"R{rid}", "timestamp": datetime.now(TZ).isoformat(timespec="seconds"), "amount": amount, "note": note, "owner": owner}
    data.setdefault("records", []).append(rec)
    store.setdefault("records", []).append(rec)
    day = get_today_key()
    store.setdefault("daily_records", {}).setdefault(day, []).append(rec)
    store["balance"] = store.get("balance", 0) + amount
    data["overall_balance"] = data.get("overall_balance", 0) + amount
    data["next_id"] = rid + 1
    save_data(data)
    try:
        export_to_csv(data)
    except:
        pass

    if store.get("forward_enabled") and OWNER_ID:
        try:
            bot.send_message(int(OWNER_ID), f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ —á–∞—Ç–∞ {chat_id}: {rec['short_id']} {rec['amount']} ‚Äî {rec['note']}")
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
    return rec

def update_record_in_chat(chat_id, rid, new_amount, new_note, user=None):
    store = get_chat_store(chat_id)
    found = None
    for r in store.get("records", []):
        if r["id"] == rid:
            old = r.copy()
            r["amount"] = new_amount
            r["note"] = new_note
            found = r
            break
    if found:
        for day_recs in store.get("daily_records", {}).values():
            for r in day_recs:
                if r["id"] == rid:
                    r.update(found)
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data(data)
        export_to_csv(data)
        user_repr = f"{user.id}/{user.username}" if user else "unknown"
        log_info(f"Edit by {user_repr}: R{rid} -> amount={new_amount}, note='{new_note}'")
        return True, found
    return False, None

def delete_record_in_chat(chat_id, rid, user=None):
    store = get_chat_store(chat_id)
    removed = None
    for r in list(store.get("records", [])):
        if r["id"] == rid or str(r["id"]) == str(rid) or r.get("short_id") == f"R{rid}":
            removed = r
            store["records"].remove(r)
            break
    if removed:
        for day_key, recs in store.get("daily_records", {}).items():
            store["daily_records"][day_key] = [x for x in recs if x["id"] != rid]
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        data["records"] = [x for x in data.get("records", []) if x["id"] != rid]
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data(data)
        export_to_csv(data)
        user_repr = f"{user.id}/{user.username}" if user else "unknown"
        log_info(f"Delete by {user_repr}: R{rid} removed")
        return True, removed
    return False, None

def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["chat_id","ID","short_id","timestamp","amount","note","owner","day_key"])
            for cid, cdata in d.get("chats", {}).items():
                for day_key, records in cdata.get("daily_records", {}).items():
                    for r in records:
                        writer.writerow([cid, r.get("id"), r.get("short_id"), r.get("timestamp"), r.get("amount"), r.get("note"), r.get("owner"), day_key])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")

# -----------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -----------------------------
def build_main_keyboard(chat_id=None, confirm_reset=False):
    kb = types.InlineKeyboardMarkup(row_width=3)
    kb.row(
        types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
        types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report"),
        types.InlineKeyboardButton("üìÇ CSV", callback_data="btn_csv")
    )
    kb.row(types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="btn_edit_list"))
    kb.row(types.InlineKeyboardButton("üì® –§–æ—Ä–≤–∞—Ä–¥", callback_data="btn_toggle_forward"))
    if confirm_reset:
        kb.row(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_reset"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_reset")
        )
    else:
        kb.row(types.InlineKeyboardButton("‚öôÔ∏è –û–±–Ω—É–ª–∏—Ç—å (—á–µ—Ä–µ–∑ /reset)", callback_data="btn_reset"))
    kb.row(
        types.InlineKeyboardButton("üöÄ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="btn_start"),
        types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="btn_cod")
    )
    balance_text = ""
    if chat_id is not None:
        store = get_chat_store(chat_id)
        balance_text = f"üí∞ {store.get('balance', 0)} ARS"
    kb.add(types.InlineKeyboardButton(balance_text or "üí∞ 0 ARS", callback_data="noop"))
    return kb

def build_edit_keyboard_for_record(rid):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.row(
        types.InlineKeyboardButton("+10", callback_data=f"preset_add_{rid}_10"),
        types.InlineKeyboardButton("-10", callback_data=f"preset_add_{rid}_-10")
    )
    kb.row(
        types.InlineKeyboardButton("+100", callback_data=f"preset_add_{rid}_100"),
        types.InlineKeyboardButton("-100", callback_data=f"preset_add_{rid}_-100")
    )
    kb.row(
        types.InlineKeyboardButton("+500", callback_data=f"preset_add_{rid}_500"),
        types.InlineKeyboardButton("-500", callback_data=f"preset_add_{rid}_-500")
    )
    kb.add(types.InlineKeyboardButton("‚úè –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"edit_manual_{rid}"))
    kb.add(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"edit_delete_{rid}"))
    kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_back_to_list"))
    return kb

def build_confirm_delete_keyboard(rid):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.row(types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{rid}"),
           types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete"))
    return kb

# -----------------------------
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
# -----------------------------
def update_or_send_today_window(chat_id, create_if_missing=True):
    today_key = get_today_key()
    store = get_chat_store(chat_id)
    day_records = store.get("daily_records", {}).get(today_key, [])

    daily_income = sum(r["amount"] for r in day_records if r["amount"] > 0)
    daily_expense = sum(r["amount"] for r in day_records if r["amount"] < 0)
    overall_balance = store.get("balance", 0)

    if not day_records:
        text = (
            f"üìÖ {today_key}\n"
            f"–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.\n"
            f"üíµ –ü—Ä–∏—Ö–æ–¥: {daily_income} ARS\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(daily_expense)} ARS\n"
            f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS"
        )
    else:
        lines = [f"üìÖ {today_key}", "üìã –û–ø–µ—Ä–∞—Ü–∏–∏:"]
        for r in day_records[-50:]:
            sign = "+" if r["amount"] > 0 else "-"
            lines.append(f"{r['short_id']}: {sign}{abs(r['amount'])} ‚Äî {r.get('note','')}")
        lines.append(
            f"\nüíµ –ü—Ä–∏—Ö–æ–¥: {daily_income} ARS\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(daily_expense)} ARS\n"
            f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS"
        )
        text = "\n".join(lines)

    kb = build_main_keyboard(chat_id)
    today_msgs = data.setdefault("active_messages", {}).setdefault(get_today_key(), {})
    active_id = today_msgs.get(str(chat_id))

    if active_id:
        try:
            bot.edit_message_text(text, chat_id, active_id, reply_markup=kb)
        except telebot.apihelper.ApiException as e:
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ {active_id} –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        return

    if not create_if_missing:
        return

    try:
        sent = bot.send_message(chat_id, text, reply_markup=kb)
        set_today_active_window(chat_id, sent.message_id)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è {chat_id}: {e}")

# -----------------------------
# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
# -----------------------------
def edit_then_duplicate_window(chat_id):
    today_key = get_today_key()
    store = get_chat_store(chat_id)
    today_msgs = data.setdefault("active_messages", {}).setdefault(today_key, {})
    active_id = today_msgs.get(str(chat_id))

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –æ–∫–Ω–æ
    update_or_send_today_window(chat_id, create_if_missing=False)

    if not active_id:
        return

    def duplicate():
        try:
            time.sleep(2)
            sent = bot.send_message(chat_id, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...", reply_markup=build_main_keyboard(chat_id))
            set_today_active_window(chat_id, sent.message_id)
            try:
                bot.delete_message(chat_id, active_id)
            except:
                pass
            update_or_send_today_window(chat_id, create_if_missing=False)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–Ω–∞ –¥–ª—è {chat_id}: {e}")

    threading.Thread(target=duplicate, daemon=True).start()

# -----------------------------
# Regex –¥–ª—è —Å—É–º–º
# -----------------------------
num_re = re.compile(r'(\^?[+-]?\^?\s*\d+\^?|\^[+-]\^[\d]+|\+?-?\d+)')

def parse_amount_token(token:str):
    t = token.strip().replace("^","").replace(" ","")
    if t.startswith("+"):
        return int(t[1:])
    if t.startswith("-"):
        return -int(t[1:])
    return -int(t)

# -----------------------------
# –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã
# -----------------------------
@bot.message_handler(commands=["start", "info"])
def cmd_start(msg):
    chat_id = msg.chat.id
    update_or_send_today_window(chat_id, create_if_missing=True)

@bot.message_handler(commands=["balance"])
def cmd_balance(msg):
    chat_id = msg.chat.id
    store = get_chat_store(chat_id)
    today_key = get_today_key()
    day_records = store.get("daily_records", {}).get(today_key, [])
    daily_income = sum(r["amount"] for r in day_records if r["amount"] > 0)
    daily_expense = sum(r["amount"] for r in day_records if r["amount"] < 0)
    overall_balance = store.get("balance", 0)
    text = (
        f"üìÖ {today_key}\n\n"
        f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS\n"
        f"üíµ –ü—Ä–∏—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {daily_income} ARS\n"
        f"üí∏ –†–∞—Å—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {abs(daily_expense)} ARS"
    )
    bot.send_message(chat_id, text)

@bot.message_handler(commands=["report"])
def cmd_report(msg):
    chat_id = msg.chat.id
    store = get_chat_store(chat_id)
    today_key = get_today_key()
    day_records = store.get("daily_records", {}).get(today_key, [])
    expenses = [r for r in day_records if r["amount"] < 0]
    if not expenses:
        bot.send_message(chat_id, f"üìÖ {today_key}\n–ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\nüí∏ –†–∞—Å—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å: 0 ARS")
        return
    lines = [f"üìÖ {today_key}", "üìã –†–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å:"]
    for r in expenses[-30:]:
        lines.append(f"{r['short_id']}: -{abs(r['amount'])} ‚Äî {r.get('note','')}")
    lines.append(f"\nüí∏ –†–∞—Å—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å: {sum(abs(r['amount']) for r in expenses)} ARS")
    bot.send_message(chat_id, "\n".join(lines))

@bot.message_handler(commands=["csv"])
def cmd_csv(msg):
    chat_id = msg.chat.id
    try:
        with open(CSV_FILE, "rb") as f:
            bot.send_document(chat_id, f, caption="üìÇ –í–∞—à —Ñ–∞–π–ª data.csv")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CSV: {e}")

@bot.message_handler(commands=["reset"])
def cmd_reset(msg):
    chat_id = msg.chat.id
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.row(types.InlineKeyboardButton("‚úÖ –î–∞, –æ–±–Ω—É–ª–∏—Ç—å", callback_data="confirm_reset"),
           types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset"))
    bot.send_message(chat_id, "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.", reply_markup=kb)

# -----------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# -----------------------------
@bot.message_handler(func=lambda m: True)
def handle_message(msg):
    chat_id = msg.chat.id
    store = get_chat_store(chat_id)
    wait_action = store.get("edit_wait")

    if wait_action == "change_value":
        rid = store.get("edit_target")
        if not rid:
            store["edit_wait"] = None
            store["edit_target"] = None
            save_data(data)
            return
        parts = msg.text.strip().split(" ", 1)
        try:
            amount_token = parts[0]
            amount = parse_amount_token(amount_token)
                        note = parts[1] if len(parts) > 1 else ""
            success, rec = update_record_in_chat(chat_id, rid, amount, note, user=msg.from_user)
            if success:
                bot.send_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å {rec['short_id']} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {rec['amount']} ‚Äî {rec['note']}")
            else:
                bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å.")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        store["edit_wait"] = None
        store["edit_target"] = None
        save_data(data)
        update_or_send_today_window(chat_id)
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –≤–≤–æ–¥: +100 –ü–∏—Ü—Ü–∞
    try:
        match = num_re.search(msg.text)
        if match:
            amount_str = match.group(0)
            amount = parse_amount_token(amount_str)
            note = msg.text.replace(amount_str, "").strip()
            rec = add_record_to_chat(chat_id, amount, note, msg.from_user.username or str(msg.from_user.id))
            bot.send_message(chat_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {rec['short_id']} {rec['amount']} ‚Äî {rec['note']}")
            update_or_send_today_window(chat_id)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# -----------------------------
# Callback query
# -----------------------------
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id = call.message.chat.id
    data_store = get_chat_store(chat_id)
    cb = call.data

    # ----------------- –ë–∞–ª–∞–Ω—Å / –ò–Ω—Ñ–æ / CSV -----------------
    if cb == "btn_balance" or cb == "btn_start":
        update_or_send_today_window(chat_id)
    elif cb == "btn_report":
        cmd_report(call.message)
    elif cb == "btn_csv":
        cmd_csv(call.message)
    elif cb == "btn_cod":
        bot.answer_callback_query(call.id, f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç v{VERSION}\n–ê–≤—Ç–æ—Ä: –î–∞—à–∞ –ê–ª–µ—Ö–∞–Ω–¥—Ä–æ–≤–Ω–∞", show_alert=True)
    # ----------------- –§–æ—Ä–≤–∞—Ä–¥ -----------------
    elif cb == "btn_toggle_forward":
        data_store["forward_enabled"] = not data_store.get("forward_enabled", False)
        save_data(data)
        state = "–≤–∫–ª—é—á–µ–Ω" if data_store["forward_enabled"] else "–≤—ã–∫–ª—é—á–µ–Ω"
        bot.answer_callback_query(call.id, f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π {state}.")
    # ----------------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ -----------------
    elif cb.startswith("edit_delete_"):
        rid = int(cb.split("_")[-1])
        kb = build_confirm_delete_keyboard(rid)
        bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏:", reply_markup=kb)
    elif cb.startswith("confirm_delete_"):
        rid = int(cb.split("_")[-1])
        success, rec = delete_record_in_chat(chat_id, rid, user=call.from_user)
        if success:
            bot.send_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å {rec['short_id']} —É–¥–∞–ª–µ–Ω–∞.")
            update_or_send_today_window(chat_id)
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å.")
    elif cb == "cancel_delete":
        bot.send_message(chat_id, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    # ----------------- –û–±–Ω—É–ª–µ–Ω–∏–µ -----------------
    elif cb == "btn_reset":
        cmd_reset(call.message)
    elif cb == "confirm_reset":
        data_store["records"] = []
        data_store["daily_records"] = {}
        data_store["balance"] = 0
        save_data(data)
        bot.send_message(chat_id, "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã.")
        update_or_send_today_window(chat_id)
    elif cb == "cancel_reset":
        bot.send_message(chat_id, "‚ùå –û–±–Ω—É–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# -----------------------------
# Flask webhook
# -----------------------------
@app.route("/", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "", 200

@app.route("/", methods=["GET"])
def index():
    return f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç v{VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# -----------------------------
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
# -----------------------------
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=APP_URL)
    app.run(host="0.0.0.0", port=PORT)