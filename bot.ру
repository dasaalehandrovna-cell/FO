import os
import json
import csv
import logging
import requests
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

# --------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# --------------------------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")  # —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ
APP_URL = os.getenv("APP_URL", "https://fo-1.onrender.com")  # URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è webhook
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.6.1.5"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# --------------------------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ñ–∞–π–ª + stdout)
# --------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)

def log_info(msg):
    logging.info(msg)

def log_error(msg):
    logging.error(msg)

log_info(f"–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–µ—Ä—Å–∏—è {VERSION}")

# --------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
# --------------------------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "active_messages": {},
        "next_id": 1,
        "sent_messages": [],
        "forward_targets": []  # —Å–ø–∏—Å–æ–∫ chat_id (int)
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ data.json: {e}")
            d = default_data()
    else:
        d = default_data()
    for k, v in default_data().items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["ID", "short_id", "timestamp", "amount", "note", "owner"])
            for r in d.get("records", []):
                writer.writerow([r.get("id"), r.get("short_id"), r.get("timestamp"), r.get("amount"), r.get("note"), r.get("owner")])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")

data = load_data()

# –µ—Å–ª–∏ OWNER_ID –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ ‚Äî —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ forward_targets
if OWNER_ID:
    try:
        owner_int = int(OWNER_ID)
    except Exception:
        owner_int = None
    if owner_int is not None and owner_int not in data["forward_targets"]:
        data["forward_targets"].append(owner_int)
        save_data(data)

# --------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# --------------------------------------------
def parse_transaction(text):
    """
    –û–∂–∏–¥–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç: +1000 comment –∏–ª–∏ -500 comment
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (int amount, str note) –∏–ª–∏ (None, None) –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–æ—Å—å.
    """
    if not text:
        return None, None
    s = text.strip()
    if s[0] not in "+-":
        return None, None
    parts = s.split(None, 1)
    try:
        amount = int(parts[0])
    except Exception:
        return None, None
    note = parts[1].strip() if len(parts) > 1 else ""
    return amount, note

def add_record(amount, note, user_id):
    ts = datetime.now(TZ).isoformat()
    rid = data.get("next_id", 1)
    rec = {
        "id": rid,
        "short_id": f"R{rid}",
        "timestamp": ts,
        "amount": amount,
        "note": note,
        "owner": user_id
    }
    data.setdefault("records", []).append(rec)
    data["overall_balance"] = data.get("overall_balance", 0) + amount
    data["next_id"] = rid + 1
    save_data(data)
    export_to_csv(data)
    if amount >= 0:
        log_info(f"–ü–†–ò–•–û–î: +{amount} {note}")
    else:
        log_info(f"–†–ê–°–•–û–î: {amount} {note}")
    return rec

def build_main_keyboard():
    kb = types.InlineKeyboardMarkup()
    kb.row(types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
           types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report"))
    kb.row(types.InlineKeyboardButton("‚öôÔ∏è –°–±—Ä–æ—Å", callback_data="btn_reset"),
           types.InlineKeyboardButton("üì® –ü–µ—Ä–µ—Å—ã–ª–∫–∞", callback_data="btn_forwards"))
    kb.row(types.InlineKeyboardButton("üìò –û –∫–æ–¥–µ", callback_data="btn_cod"))
    return kb

# --------------------------------------------
# –ö–æ–º–∞–Ω–¥—ã: /start, /myid, /chatid, /balance, /report, /reset, /cod
# --------------------------------------------
@bot.message_handler(commands=["start"])
def cmd_start(msg):
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª\n\n"
        "–ö–æ–º–∞–Ω–¥—ã (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π):\n"
        "/start ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/myid ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à user ID\n"
        "/chatid ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞\n"
        "/balance ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        "/report ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
        "/reset ‚Äì –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)\n"
        "/addforward <chat_id> ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)\n"
        "/removeforward <chat_id> ‚Äì —É–±—Ä–∞—Ç—å —Ü–µ–ª—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)\n"
        "/listforwards ‚Äì —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏\n"
        "/cod ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö\n\n"
        "–î–ª—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: +1000 –∑–∞—Ä–ø–ª–∞—Ç–∞  –∏–ª–∏  -500 –±–µ–Ω–∑–∏–Ω\n"
    )
    bot.send_message(msg.chat.id, f"üí¨ –í–µ—Ä—Å–∏—è: {VERSION}\n\n{text}", reply_markup=build_main_keyboard())

@bot.message_handler(commands=["myid"])
def cmd_myid(msg):
    uid = msg.from_user.id
    bot.reply_to(msg, f"üÜî –í–∞—à user ID: {uid}")

@bot.message_handler(commands=["chatid"])
def cmd_chatid(msg):
    cid = msg.chat.id
    bot.reply_to(msg, f"üí¨ ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞: {cid}")

@bot.message_handler(commands=["balance", "balans", "–±–∞–ª–∞–Ω—Å"])
def cmd_balance(msg):
    bot.reply_to(msg, f"üí∞ –ë–∞–ª–∞–Ω—Å: {data.get('overall_balance',0)} ‚ÇΩ", reply_markup=build_main_keyboard())

@bot.message_handler(commands=["report", "otchet", "–æ—Ç—á–µ—Ç"])
def cmd_report(msg):
    recs = data.get("records", [])
    if not recs:
        bot.send_message(msg.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.", reply_markup=build_main_keyboard())
        return
    text_lines = ["üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:"]
    for r in recs[-20:]:
        sign = "+" if r["amount"] > 0 else ""
        text_lines.append(f"{r['short_id']}: {sign}{r['amount']} ‚Äî {r.get('note','')}")
    bot.send_message(msg.chat.id, "\n".join(text_lines), reply_markup=build_main_keyboard())

@bot.message_handler(commands=["reset"])
def cmd_reset(msg):
    if OWNER_ID is None or str(msg.from_user.id) != str(OWNER_ID):
        bot.send_message(msg.chat.id, "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.", reply_markup=build_main_keyboard())
        return
    global data
    data = default_data()
    try:
        if OWNER_ID:
            data["forward_targets"].append(int(OWNER_ID))
    except Exception:
        pass
    save_data(data)
    export_to_csv(data)
    bot.send_message(msg.chat.id, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.", reply_markup=build_main_keyboard())
    log_info("–î–ê–ù–ù–´–ï –û–ë–ù–£–õ–ï–ù–´ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º")

@bot.message_handler(commands=["addforward"])
def cmd_addforward(msg):
    if OWNER_ID is None or str(msg.from_user.id) != str(OWNER_ID):
        return
    parts = msg.text.split()
    if len(parts) < 2:
        bot.reply_to(msg, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addforward <chat_id>")
        return
    try:
        cid = int(parts[1])
    except Exception:
        bot.reply_to(msg, "–ù–µ–≤–µ—Ä–Ω—ã–π chat_id (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ).")
        return
    if cid in data["forward_targets"]:
        bot.reply_to(msg, "–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.")
        return
    data["forward_targets"].append(cid)
    save_data(data)
    bot.reply_to(msg, f"‚úÖ –¶–µ–ª—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {cid}")

@bot.message_handler(commands=["removeforward"])
def cmd_removeforward(msg):
    if OWNER_ID is None or str(msg.from_user.id) != str(OWNER_ID):
        return
    parts = msg.text.split()
    if len(parts) < 2:
        bot.reply_to(msg, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeforward <chat_id>")
        return
    try:
        cid = int(parts[1])
    except Exception:
        bot.reply_to(msg, "–ù–µ–≤–µ—Ä–Ω—ã–π chat_id (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ).")
        return
    if cid not in data["forward_targets"]:
        bot.reply_to(msg, "–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.")
        return
    data["forward_targets"].remove(cid)
    save_data(data)
    bot.reply_to(msg, f"‚úÖ –¶–µ–ª—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω–∞: {cid}")

@bot.message_handler(commands=["listforwards"])
def cmd_listforwards(msg):
    if not data["forward_targets"]:
        bot.reply_to(msg, "–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø—É—Å—Ç.", reply_markup=build_main_keyboard())
        return
    text = "üì® –¶–µ–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n" + "\n".join(map(str, data["forward_targets"]))
    bot.reply_to(msg, text, reply_markup=build_main_keyboard())

@bot.message_handler(commands=["cod"])
def cmd_cod(msg):
    text = (
        f"üìò –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–¥–µ ‚Äî –≤–µ—Ä—Å–∏—è {VERSION}\n\n"
        "–ö—Ä–∞—Ç–∫–æ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n"
        "- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n"
        "- –ö–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ\n"
        "- –î–æ–±–∞–≤–ª–µ–Ω—ã inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n"
        "- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ\n"
        "- –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã\n\n"
        "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook, —Ä—É—Å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∫–Ω–æ–ø–∫–∏, –∫–æ–º–∞–Ω–¥–∞ /cod."
    )
    bot.send_message(msg.chat.id, text, reply_markup=build_main_keyboard())

# --------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
# --------------------------------------------
@bot.callback_query_handler(func=lambda c: True)
def handle_callback(call):
    try:
        data_cd = call.data
        if data_cd == "btn_balance":
            bot.answer_callback_query(call.id, text=f"–ë–∞–ª–∞–Ω—Å: {data.get('overall_balance',0)} ‚ÇΩ")
            bot.send_message(call.message.chat.id, f"üí∞ –ë–∞–ª–∞–Ω—Å: {data.get('overall_balance',0)} ‚ÇΩ", reply_markup=build_main_keyboard())
        elif data_cd == "btn_report":
            recs = data.get("records", [])
            if not recs:
                bot.send_message(call.message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.", reply_markup=build_main_keyboard())
                bot.answer_callback_query(call.id, text="–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π")
                return
            text_lines = ["üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:"]
            for r in recs[-20:]:
                sign = "+" if r["amount"] > 0 else ""
                text_lines.append(f"{r['short_id']}: {sign}{r['amount']} ‚Äî {r.get('note','')}")
            bot.send_message(call.message.chat.id, "\n".join(text_lines), reply_markup=build_main_keyboard())
            bot.answer_callback_query(call.id)
        elif data_cd == "btn_reset":
            # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞
            if str(call.from_user.id) != str(OWNER_ID):
                bot.answer_callback_query(call.id, text="–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.")
                return
            bot.send_message(call.message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –û—Ç–ø—Ä–∞–≤—å—Ç–µ /reset –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=build_main_keyboard())
            bot.answer_callback_query(call.id)
        elif data_cd == "btn_forwards":
            if not data.get("forward_targets"):
                bot.send_message(call.message.chat.id, "–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ü–µ–ª—å: /addforward <chat_id>", reply_markup=build_main_keyboard())
            else:
                bot.send_message(call.message.chat.id, "üì® –¶–µ–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n" + "\n".join(map(str, data["forward_targets"])), reply_markup=build_main_keyboard())
            bot.answer_callback_query(call.id)
        elif data_cd == "btn_cod":
            bot.answer_callback_query(call.id)
            cmd_cod(call.message)
        else:
            bot.answer_callback_query(call.id)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")

# --------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞
# --------------------------------------------
@bot.message_handler(func=lambda m: True, content_types=["text", "photo", "document", "voice", "video", "audio", "sticker"])
def handle_message(msg):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤ –∏ –±–µ–∑ from_user
    if not getattr(msg, "from_user", None):
        return
    if msg.from_user.is_bot:
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    if msg.content_type == "text" and msg.text:
        amount, note = parse_transaction(msg.text)
        if amount is not None:
            rec = add_record(amount, note, msg.from_user.id)
            bot.reply_to(msg, f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} {note}\n–ë–∞–ª–∞–Ω—Å: {data.get('overall_balance',0)} ‚ÇΩ", reply_markup=build_main_keyboard())
            return

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if OWNER_ID:
        try:
            owner_int = int(OWNER_ID)
        except Exception:
            owner_int = None
        if owner_int is not None and msg.from_user.id == owner_int:
            for target in data.get("forward_targets", []):
                try:
                    if int(target) == owner_int:
                        continue
                    bot.copy_message(chat_id=int(target), from_chat_id=msg.chat.id, message_id=msg.message_id)
                    log_info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ {target}")
                except Exception as e:
                    log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ {target}: {e}")

# --------------------------------------------
# Flask webhook endpoints
# --------------------------------------------
@app.route("/", methods=["GET"])
def index():
    return f"–ë–æ—Ç –≤–µ—Ä—Å–∏—è {VERSION} –∑–∞–ø—É—â–µ–Ω."

@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        raw = request.stream.read().decode("utf-8")
        update = telebot.types.Update.de_json(raw)
        bot.process_new_updates([update])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
    return "ok", 200

# --------------------------------------------
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
# --------------------------------------------
def ensure_webhook():
    try:
        webhook_url = f"{APP_URL.rstrip('/')}/webhook"
        info = requests.get(f"https://api.telegram.org/bot{TOKEN}/getWebhookInfo", timeout=10).json()
        current = info.get("result", {}).get("url", "")
        if current != webhook_url:
            r = requests.get(f"https://api.telegram.org/bot{TOKEN}/setWebhook", params={"url": webhook_url}, timeout=10)
            try:
                jr = r.json()
            except Exception:
                jr = {"ok": False, "description": r.text}
            if jr.get("ok"):
                log_info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            else:
                log_error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {jr}")
        else:
            log_info("Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏/—É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

def notify_owner_start():
    if OWNER_ID is None:
        return
    try:
        owner_int = int(OWNER_ID)
    except Exception:
        return
    try:
        text = f"üí¨ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è {VERSION} –∑–∞–ø—É—â–µ–Ω ‚úÖ"
        bot.send_message(owner_int, text, reply_markup=build_main_keyboard())
        log_info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")

# --------------------------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# --------------------------------------------
if __name__ == "__main__":
    ensure_webhook()
    notify_owner_start()
    log_info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–≤–µ—Ä—Å–∏—è {VERSION})")
    app.run(host="0.0.0.0", port=PORT)
