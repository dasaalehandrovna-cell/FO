# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.8.7
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω keep_alive —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É
# ============================================

import os
import time
import json
import csv
import logging
import threading
import requests
import telebot
from telebot import types
from datetime import datetime

# -----------------------------
# –û–¢–°–ï–ö 1 ‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------------
TOKEN = os.getenv("BOT_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨")
OWNER_ID = int(os.getenv("OWNER_ID", "123456789"))  # –≤–∞—à Telegram ID

DATA_FILE = "data.json"
CSV_FILE = "records.csv"

bot = telebot.TeleBot(TOKEN)

# -----------------------------
# –û–¢–°–ï–ö 2 ‚Äî –§—É–Ω–∫—Ü–∏–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è
# -----------------------------
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

store = load_data()

# -----------------------------
# –û–¢–°–ï–ö 3 ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# -----------------------------
def main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üí∞ –î–æ–±–∞–≤–∏—Ç—å", "üìã –û—Ç—á—ë—Ç", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
    return kb

@bot.message_handler(commands=["start"])
def start(msg):
    bot.send_message(msg.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ë–æ—Ç üíº", reply_markup=main_keyboard())

# -----------------------------
# –û–¢–°–ï–ö 4 ‚Äî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤
# -----------------------------
@bot.message_handler(func=lambda m: m.text == "üí∞ –î–æ–±–∞–≤–∏—Ç—å")
def add_entry(msg):
    bot.send_message(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250 –ü—Ä–æ–¥—É–∫—Ç—ã):")
    bot.register_next_step_handler(msg, save_entry)

def save_entry(msg):
    try:
        parts = msg.text.split(maxsplit=1)
        amount = float(parts[0])
        note = parts[1] if len(parts) > 1 else ""
        date = datetime.now().strftime("%Y-%m-%d")
        user_id = str(msg.chat.id)
        if user_id not in store:
            store[user_id] = []
        store[user_id].append({"date": date, "amount": amount, "note": note})
        save_data(store)
        bot.send_message(msg.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {amount} ‚Äî {note}", reply_markup=main_keyboard())
    except Exception:
        bot.send_message(msg.chat.id, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# -----------------------------
# –û–¢–°–ï–ö 5 ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á—ë—Ç–∞
# -----------------------------
@bot.message_handler(func=lambda m: m.text == "üìã –û—Ç—á—ë—Ç")
def show_report(msg):
    user_id = str(msg.chat.id)
    records = store.get(user_id, [])
    if not records:
        bot.send_message(msg.chat.id, "–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    text = "üìä –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã:\n\n"
    total = 0
    for r in records[-10:]:
        text += f"‚Ä¢ {r['date']} ‚Äî {r['amount']} ({r['note']})\n"
        total += r["amount"]
    text += f"\nüíµ –ò—Ç–æ–≥–æ: {total}"
    bot.send_message(msg.chat.id, text)

# -----------------------------
# –û–¢–°–ï–ö 6 ‚Äî –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------
@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
def edit_menu(msg):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üßæ CSV", "‚ôªÔ∏è –û–±–Ω—É–ª–∏—Ç—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "üîô –ù–∞–∑–∞–¥")
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
def back_to_main(msg):
    bot.send_message(msg.chat.id, "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard())

@bot.message_handler(func=lambda m: m.text == "üßæ CSV")
def export_csv(msg):
    user_id = str(msg.chat.id)
    records = store.get(user_id, [])
    if not records:
        bot.send_message(msg.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["–î–∞—Ç–∞", "–°—É–º–º–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"])
        for r in records:
            writer.writerow([r["date"], r["amount"], r["note"]])
    with open(CSV_FILE, "rb") as f:
        bot.send_document(msg.chat.id, f)

@bot.message_handler(func=lambda m: m.text == "‚ôªÔ∏è –û–±–Ω—É–ª–∏—Ç—å")
def reset_data(msg):
    user_id = str(msg.chat.id)
    store[user_id] = []
    save_data(store)
    bot.send_message(msg.chat.id, "–í—Å–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=main_keyboard())

@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")
def edit_entry(msg):
    user_id = str(msg.chat.id)
    records = store.get(user_id, [])
    if not records:
        bot.send_message(msg.chat.id, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
    for i, r in enumerate(records[-10:], 1):
        text += f"{i}) {r['date']} ‚Äî {r['amount']} ({r['note']})\n"
    bot.send_message(msg.chat.id, text)
    bot.register_next_step_handler(msg, process_edit_choice)

def process_edit_choice(msg):
    user_id = str(msg.chat.id)
    try:
        index = int(msg.text) - 1
        record = store[user_id][index]
        bot.send_message(msg.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 300 –û–±–Ω–æ–≤–ª–µ–Ω–æ):")
        bot.register_next_step_handler(msg, lambda m: update_record(m, index))
    except:
        bot.send_message(msg.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")

def update_record(msg, index):
    user_id = str(msg.chat.id)
    try:
        parts = msg.text.split(maxsplit=1)
        amount = float(parts[0])
        note = parts[1] if len(parts) > 1 else ""
        store[user_id][index].update({"amount": amount, "note": note})
        save_data(store)
        bot.send_message(msg.chat.id, "‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=main_keyboard())
    except:
        bot.send_message(msg.chat.id, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")

# -----------------------------
# –û–¢–°–ï–ö 7 ‚Äî Keep Alive
# -----------------------------
def keep_alive():
    while True:
        try:
            requests.get("https://your-render-app-url.onrender.com")  # URL –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
            bot.send_message(OWNER_ID, "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ keep_alive: {e}")
        time.sleep(900)  # –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç

# –ó–∞–ø—É—Å–∫ keep_alive –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=keep_alive, daemon=True).start()

# -----------------------------
# –û–¢–°–ï–ö 8 ‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -----------------------------
if __name__ == "__main__":
    bot.infinity_polling(timeout=60, long_polling_timeout=30)