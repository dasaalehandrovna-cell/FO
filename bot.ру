# ---------- –®–ê–ë–õ–û–ù –ö–û–î–ê ‚Ññ7 ----------
# –≠—Ç–æ—Ç —à–∞–±–ª–æ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–æ—Ç–∞.
# –û–Ω –Ω–µ –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram, –Ω–æ –ª–æ–≥–∏–∫–∞ –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.

import os
import json
import re
from datetime import datetime
from flask import Flask, request

# –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è "–±–æ—Ç–∞"
class FakeBot:
    def send_message(self, chat_id, text, reply_markup=None):
        print(f"[SEND] {text}")
        return {"chat_id": chat_id, "text": text}

    def delete_message(self, chat_id, message_id):
        print(f"[DELETE] message_id={message_id}")

    def edit_message_text(self, chat_id, message_id, text, reply_markup=None):
        print(f"[EDIT] {text}")

bot = FakeBot()
app = Flask(__name__)

DATA_FILE = "data.json"

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def load_data():
    if not os.path.exists(DATA_FILE):
        return {"records": [], "balance": 0, "date": current_date()}
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def current_date():
    return datetime.now().strftime("%Y-%m-%d")

def current_time():
    return datetime.now().strftime("%H:%M")

def parse_number(text):
    text = text.replace(",", ".").replace(" ", "")
    match = re.match(r"^[+-]?\d+(\.\d+)?", text)
    if not match:
        return None
    try:
        return float(match.group())
    except:
        return None

def format_number(num):
    return f"{num:,.0f}".replace(",", ".")

def new_day_check(data):
    today = current_date()
    if data["date"] != today:
        data["records"] = []
        data["date"] = today
        save_data(data)
        return True
    return False

# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
def handle_message(message_text):
    data = load_data()
    new_day_check(data)
    text = message_text.strip()
    lines = text.split("\n")

    for line in lines:
        num = parse_number(line)
        if num is None:
            continue
        if "+" in line:
            data["balance"] += num
        else:
            data["balance"] -= abs(num)
        data["records"].append({
            "time": current_time(),
            "amount": num,
            "text": line
        })

    save_data(data)
    return format_day_summary(data)

def format_day_summary(data):
    reply_lines = [f"üìÖ {data['date']}"]
    current_hour = ""
    total_in = total_out = 0

    for r in data["records"]:
        h = r["time"][:2]
        if h != current_hour:
            reply_lines.append("")
            current_hour = h
        amt = parse_number(str(r["amount"])) or 0
        sign = "+" if amt > 0 else "‚àí"
        text_part = r['text'][len(str(int(abs(amt)))):].strip()
        reply_lines.append(f"üïì {r['time']} {sign}{format_number(abs(amt))} {text_part}")
        if amt > 0:
            total_in += amt
        else:
            total_out += abs(amt)

    balance = data["balance"]
    reply_lines.append("")
    reply_lines.append(f"üìà –ü—Ä–∏—Ö–æ–¥ –¥–Ω—è: {format_number(total_in)}")
    reply_lines.append(f"üìâ –†–∞—Å—Ö–æ–¥ –¥–Ω—è: {format_number(total_out)}")
    if balance >= 0:
        reply_lines.append(f"üíµ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: +{format_number(balance)}")
    else:
        reply_lines.append(f"üíµ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ‚àí{format_number(abs(balance))}")

    reply_lines.append("")
    reply_lines.append("–ú–µ–Ω—é:")
    reply_lines.append("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å | üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å | üîÑ –û–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    return "\n".join(reply_lines)

# === –õ–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===
def show_edit_menu(data):
    print("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
    for idx, rec in enumerate(data["records"], start=1):
        amt = parse_number(str(rec["amount"])) or 0
        sign = "+" if amt > 0 else "‚àí"
        print(f"{idx}. üïì {rec['time']} {sign}{format_number(abs(amt))} {rec['text']}")

def show_delete_menu(data):
    print("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    for idx, rec in enumerate(data["records"], start=1):
        amt = parse_number(str(rec["amount"])) or 0
        sign = "+" if amt > 0 else "‚àí"
        print(f"{idx}. üïì {rec['time']} {sign}{format_number(abs(amt))} {rec['text']}")

def reset_all_data():
    data = {"records": [], "balance": 0, "date": current_date()}
    save_data(data)
    print("üßæ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã.")

# === –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    # –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print(handle_message("+700000 –æ–±–º–µ–Ω"))
    print(handle_message("-3800 –ø—Ä–æ–¥—É–∫—Ç—ã"))
    print(handle_message("-206000 –æ–¥–µ–∂–¥–∞"))
    show_edit_menu(load_data())
    show_delete_menu(load_data())
    reset_all_data()

# ---------- –ö–û–ù–ï–¶ –®–ê–ë–õ–û–ù–ê ‚Ññ7 ----------
