# --------------------------
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç "–§–û" v9.7.0
# (Flask Webhook, Render-ready)
# –ù–∞ –±–∞–∑–µ –≤–µ—Ä—Å–∏–∏ 9.6.1
# --------------------------

import os
import json
import time
import threading
import re
import csv
from datetime import datetime
from zoneinfo import ZoneInfo
from flask import Flask, request
import telebot
from telebot import types

# --------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# --------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
PORT = int(os.environ.get("PORT", 5000))

if not TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# --------------------------
# –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
# --------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "active_messages": {},
        "next_id": 1,
        "sent_messages": [],
        "forward_targets": []
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except Exception:
            d = default_data()
    else:
        d = default_data()
    for k, v in default_data().items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å data.json: {e}")

data = load_data()

# --------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# --------------------------
def add_record(amount, note, owner):
    rid = data["next_id"]
    short_id = f"R{rid:04d}"
    record = {
        "id": rid,
        "short_id": short_id,
        "timestamp": datetime.now(TZ).isoformat(),
        "amount": amount,
        "note": note,
        "owner": owner
    }
    data["records"].append(record)
    data["next_id"] += 1
    data["overall_balance"] += amount
    save_data(data)

def export_to_csv():
    try:
        with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["ID", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–ó–∞–º–µ—Ç–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"])
            for r in data["records"]:
                writer.writerow([r["short_id"], r["timestamp"], r["amount"], r["note"], r["owner"]])
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ CSV] {e}")

# --------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
# --------------------------
@bot.message_handler(commands=["start"])
def cmd_start(msg):
    bot.reply_to(msg, "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç '–§–û'.\n–û—Ç–ø—Ä–∞–≤—å —Å—É–º–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`+1000 –∑–∞—Ä–ø–ª–∞—Ç–∞` –∏–ª–∏ `-500 –ø—Ä–æ–¥—É–∫—Ç—ã`.\n\n–ö–æ–º–∞–Ω–¥—ã:\n/–±–∞–ª–∞–Ω—Å\n/–æ—Ç—á–µ—Ç\n/—Å–±—Ä–æ—Å\n/addforward\n/removeforward\n/listforwards", parse_mode="Markdown")

@bot.message_handler(commands=["–±–∞–ª–∞–Ω—Å"])
def cmd_balance(msg):
    bot.reply_to(msg, f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {data['overall_balance']}")

@bot.message_handler(commands=["–æ—Ç—á–µ—Ç"])
def cmd_report(msg):
    if not data["records"]:
        bot.reply_to(msg, "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return
    export_to_csv()
    text = "\n".join(
        [f"{r['short_id']}: {r['amount']} ({r['note']})" for r in data["records"][-10:]]
    )
    bot.reply_to(msg, f"üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π:\n{text}")
    try:
        bot.send_document(msg.chat.id, open(CSV_FILE, "rb"))
    except Exception as e:
        bot.reply_to(msg, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å CSV: {e}")

@bot.message_handler(commands=["—Å–±—Ä–æ—Å"])
def cmd_reset(msg):
    if str(msg.from_user.id) != str(OWNER_ID):
        bot.reply_to(msg, "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return
    data.update(default_data())
    save_data(data)
    bot.reply_to(msg, "üßπ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.")

# --------------------------
# Forward management
# --------------------------
@bot.message_handler(commands=["addforward"])
def cmd_addforward(msg):
    if str(msg.from_user.id) != str(OWNER_ID):
        bot.reply_to(msg, "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π.")
        return
    bot.reply_to(msg, "–ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å.")
    bot.register_next_step_handler(msg, add_forward_step)

def add_forward_step(msg):
    chat_id = msg.forward_from_chat.id if msg.forward_from_chat else msg.chat.id
    if chat_id not in data["forward_targets"]:
        data["forward_targets"].append(chat_id)
        save_data(data)
        bot.reply_to(msg, f"‚úÖ –ß–∞—Ç {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ—Å—ã–ª–∫—É.")
    else:
        bot.reply_to(msg, "‚ÑπÔ∏è –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.")

@bot.message_handler(commands=["removeforward"])
def cmd_removeforward(msg):
    if str(msg.from_user.id) != str(OWNER_ID):
        bot.reply_to(msg, "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π.")
        return
    if not data["forward_targets"]:
        bot.reply_to(msg, "–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø—É—Å—Ç.")
        return
    bot.reply_to(msg, "–û—Ç–ø—Ä–∞–≤—å ID —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.")
    bot.register_next_step_handler(msg, remove_forward_step)

def remove_forward_step(msg):
    try:
        cid = int(msg.text.strip())
        if cid in data["forward_targets"]:
            data["forward_targets"].remove(cid)
            save_data(data)
            bot.reply_to(msg, f"üóë –£–¥–∞–ª—ë–Ω {cid} –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.")
        else:
            bot.reply_to(msg, "‚ùå –¢–∞–∫–æ–≥–æ ID –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
    except ValueError:
        bot.reply_to(msg, "‚ö†Ô∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–π ID.")

@bot.message_handler(commands=["listforwards"])
def cmd_listforwards(msg):
    if not data["forward_targets"]:
        bot.reply_to(msg, "–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø—É—Å—Ç.")
    else:
        targets = "\n".join(map(str, data["forward_targets"]))
        bot.reply_to(msg, f"üì§ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤ —á–∞—Ç—ã:\n{targets}")

# --------------------------
# –ê–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# --------------------------
@bot.message_handler(func=lambda m: True, content_types=["text", "photo", "video", "document", "audio", "voice", "sticker"])
def all_messages(msg):
    try:
        text = msg.text or ""
        if re.match(r"^[+-]?\d+", text):
            amount = int(re.findall(r"^[+-]?\d+", text)[0])
            note = re.sub(r"^[+-]?\d+\s*", "", text)
            add_record(amount, note, msg.from_user.username or msg.from_user.first_name)
            bot.reply_to(msg, f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} ({note})")
        else:
            # –ø–µ—Ä–µ—Å—ã–ª–∫–∞
            for target in data["forward_targets"]:
                try:
                    bot.forward_message(target, msg.chat.id, msg.message_id)
                except Exception as e:
                    print(f"[–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ {target}] {e}")
    except Exception as e:
        bot.reply_to(msg, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

# --------------------------
# Flask Webhook
# --------------------------
@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        print(f"[Webhook –æ—à–∏–±–∫–∞] {e}")
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return "ü§ñ –ë–æ—Ç '–§–û' —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# --------------------------
# –ó–∞–ø—É—Å–∫
# --------------------------
if __name__ == "__main__":
    url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook" if os.getenv("RENDER_EXTERNAL_HOSTNAME") else None
    if url:
        bot.remove_webhook()
        time.sleep(1)
        bot.set_webhook(url)
        print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")
    app.run(host="0.0.0.0", port=PORT)

# --------------------------
# (–æ–∫–æ–ª–æ 370 —Å—Ç—Ä–æ–∫)
# --------------------------