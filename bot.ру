# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.8.5
# ID: Code_001
# –° –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (30 —Å–µ–∫)
# ============================================

import telebot
from telebot import types
from flask import Flask, request
import os, json, threading, time

# -----------------------------
# –û–¢–°–ï–ö 1 ‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------------
TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")
APP_URL = os.getenv("APP_URL", "https://your-app-url.onrender.com")
PORT = int(os.getenv("PORT", 5000))
VERSION = "9.8.5"
DATA_FILE = "finance_data.json"
CSV_FILE = "finance_data.csv"
TEMP_MSG_LIFETIME = 30  # –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# -----------------------------
# –û–¢–°–ï–ö 2 ‚Äî –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
# -----------------------------
def load_data():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump({"chats": {}}, f, ensure_ascii=False, indent=2)
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(d):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

data = load_data()

def get_chat_store(chat_id):
    str_id = str(chat_id)
    if str_id not in data["chats"]:
        data["chats"][str_id] = {"balance": 0, "records": [], "next_id": 1, "forward_enabled": False}
    return data["chats"][str_id]

# -----------------------------
# –û–¢–°–ï–ö 3 ‚Äî –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
# -----------------------------
def schedule_auto_delete(chat_id, message_id, delay=TEMP_MSG_LIFETIME):
    def delete_later():
        time.sleep(delay)
        try:
            bot.delete_message(chat_id, message_id)
        except:
            pass
    threading.Thread(target=delete_later, daemon=True).start()

def send_temp_message(chat_id, text):
    msg = bot.send_message(chat_id, text)
    schedule_auto_delete(chat_id, msg.message_id)

# -----------------------------
# –û–¢–°–ï–ö 4 ‚Äî –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -----------------------------
def build_main_keyboard(chat_id, confirm_reset=False):
    kb = types.InlineKeyboardMarkup(row_width=2)
    if confirm_reset:
        kb.add(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_reset"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_reset")
        )
        return kb

    kb.add(
        types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
        types.InlineKeyboardButton("üìÑ –û—Ç—á—ë—Ç", callback_data="btn_report"),
    )
    kb.add(
        types.InlineKeyboardButton("üìÇ CSV", callback_data="btn_csv"),
        types.InlineKeyboardButton("‚öôÔ∏è –§–æ—Ä–≤–∞—Ä–¥", callback_data="btn_toggle_forward"),
    )
    kb.add(
        types.InlineKeyboardButton("‚úè –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="btn_edit_list"),
        types.InlineKeyboardButton("üßπ –û–±–Ω—É–ª–∏—Ç—å", callback_data="btn_reset")
    )
    kb.add(types.InlineKeyboardButton("‚ÑπÔ∏è –í–µ—Ä—Å–∏—è", callback_data="btn_cod"))
    return kb

# -----------------------------
# –û–¢–°–ï–ö 5 ‚Äî –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
# -----------------------------
def update_or_send_today_window(chat_id):
    store = get_chat_store(chat_id)
    text = (
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {store['balance']:.2f} ‚ÇΩ\n"
        f"üìä –ó–∞–ø–∏—Å–µ–π: {len(store['records'])}\n"
        f"üîÑ –§–æ—Ä–≤–∞—Ä–¥: {'–≤–∫–ª' if store.get('forward_enabled') else '–≤—ã–∫–ª'}"
    )
    kb = build_main_keyboard(chat_id)
    bot.send_message(chat_id, text, reply_markup=kb)

# -----------------------------
# –û–¢–°–ï–ö 6 ‚Äî –ö–æ–º–∞–Ω–¥—ã
# -----------------------------
@bot.message_handler(commands=["start"])
def cmd_start(message):
    chat_id = message.chat.id
    send_temp_message(chat_id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    update_or_send_today_window(chat_id)

@bot.message_handler(commands=["reset"])
def cmd_reset(message):
    chat_id = message.chat.id
    kb = build_main_keyboard(chat_id, confirm_reset=True)
    msg = bot.send_message(chat_id, "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?", reply_markup=kb)
    schedule_auto_delete(chat_id, msg.message_id)

# -----------------------------
# –û–¢–°–ï–ö 7 ‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ callback
# -----------------------------
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    chat_id = call.message.chat.id
    data_store = get_chat_store(chat_id)
    cb = call.data

    if cb == "btn_balance":
        update_or_send_today_window(chat_id)

    elif cb == "btn_report":
        send_temp_message(chat_id, "üìä –û—Ç—á—ë—Ç –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")

    elif cb == "btn_csv":
        try:
            with open(CSV_FILE, "rb") as f:
                bot.send_document(chat_id, f)
        except Exception as e:
            send_temp_message(chat_id, f"–û—à–∏–±–∫–∞ CSV: {e}")

    elif cb == "btn_toggle_forward":
        data_store["forward_enabled"] = not data_store.get("forward_enabled", False)
        save_data(data)
        status = "–≤–∫–ª—é—á—ë–Ω" if data_store["forward_enabled"] else "–≤—ã–∫–ª—é—á–µ–Ω"
        send_temp_message(chat_id, f"–§–æ—Ä–≤–∞—Ä–¥ {status}")
        update_or_send_today_window(chat_id)

    elif cb == "btn_edit_list":
        send_temp_message(chat_id, "‚úè –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

    elif cb == "btn_reset":
        kb = build_main_keyboard(chat_id, confirm_reset=True)
        m = bot.send_message(chat_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?", reply_markup=kb)
        schedule_auto_delete(chat_id, m.message_id)

    elif cb == "confirm_reset":
        data["chats"][str(chat_id)] = {"balance": 0, "records": [], "next_id": 1, "forward_enabled": False}
        save_data(data)
        send_temp_message(chat_id, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω—ã.")
        update_or_send_today_window(chat_id)

    elif cb == "cancel_reset":
        send_temp_message(chat_id, "‚ùå –û–±–Ω—É–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        update_or_send_today_window(chat_id)

    elif cb == "btn_cod":
        send_temp_message(chat_id, f"ü§ñ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è {VERSION}")

    elif cb == "btn_start":
        update_or_send_today_window(chat_id)

    else:
        send_temp_message(chat_id, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

# -----------------------------
# –û–¢–°–ï–ö 8 ‚Äî –í–µ–±—Ö—É–∫
# -----------------------------
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
    bot.process_new_updates([update])
    return "", 200

@app.route("/")
def index():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"

# -----------------------------
# –û–¢–°–ï–ö 9 ‚Äî –ó–∞–ø—É—Å–∫
# -----------------------------
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"{APP_URL}/{TOKEN}")
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {APP_URL}/{TOKEN}")
    app.run(host="0.0.0.0", port=PORT)