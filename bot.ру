# ---------- –ö–û–î ‚Ññ6 ----------
import os
import re
import json
from datetime import datetime
from flask import Flask, request
import telebot

TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

DATA_FILE = "data.json"

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def load_data():
    if not os.path.exists(DATA_FILE):
        return {"records": [], "balance": 0, "date": current_date()}
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def current_date():
    return datetime.now().strftime("%Y-%m-%d")

def current_time():
    return datetime.now().strftime("%H:%M")

def parse_number(text):
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏, –∏—â–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º –∑–Ω–∞–∫–æ–º
    text = text.replace(",", ".").replace(" ", "")
    match = re.match(r"^[+-]?\d+(\.\d+)?", text)
    if not match:
        return None
    num_str = match.group()
    try:
        return float(num_str)
    except:
        return None

def format_number(num):
    return f"{num:,.0f}".replace(",", ".")

def new_day_check(data):
    today = current_date()
    if data["date"] != today:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –¥–µ–Ω—å
        save_data(data)
        data["records"] = []
        data["date"] = today
        save_data(data)
        return True
    return False

# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

@bot.message_handler(commands=['–±–∞–ª–∞–Ω—Å'])
def show_balance(message):
    data = load_data()
    balance = data["balance"]
    if balance >= 0:
        balance_str = f"üíµ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {format_number(balance)}"
    else:
        balance_str = f"üíµ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: -{format_number(abs(balance))}"
    bot.send_message(message.chat.id, balance_str)

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    data = load_data()
    is_new_day = new_day_check(data)
    text = message.text.strip()
    lines = text.split("\n")
    updates = []
    deleted_msgs = []

    for line in lines:
        num = parse_number(line)
        if num is None:
            continue
        if "+" in line:
            data["balance"] += num
            updates.append((num, "–ø—Ä–∏—Ö–æ–¥"))
        else:
            data["balance"] -= abs(num)
            updates.append((-abs(num), "—Ä–∞—Å—Ö–æ–¥"))
        data["records"].append({
            "time": current_time(),
            "amount": num,
            "text": line
        })

    save_data(data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∫–Ω–æ –¥–≤–∏–∂–µ–Ω–∏—è
    reply_lines = [f"üìÖ {data['date']}"]
    current_hour = ""
    total_in = total_out = 0
    for r in data["records"]:
        h = r["time"][:2]
        if h != current_hour:
            reply_lines.append("")  # –†–∞–∑–¥–µ–ª—è–µ–º —á–∞—Å—ã
            current_hour = h
        amt = parse_number(str(r["amount"])) or 0
        sign = "+" if amt > 0 else ""
        reply_lines.append(f"üïì {r['time']} {sign}{format_number(amt)} {r['text'][len(str(int(abs(amt)))):].strip()}")

        if amt > 0:
            total_in += amt
        else:
            total_out += abs(amt)

    balance = data["balance"]
    reply_lines.append("")
    reply_lines.append(f"üìà –ü—Ä–∏—Ö–æ–¥ –¥–Ω—è: {format_number(total_in)}")
    reply_lines.append(f"üìâ –†–∞—Å—Ö–æ–¥ –¥–Ω—è: {format_number(total_out)}")
    if balance >= 0:
        reply_lines.append(f"üíµ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {format_number(balance)}")
    else:
        reply_lines.append(f"üíµ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: -{format_number(abs(balance))}")

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="edit_change"),
        telebot.types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="edit_delete"),
    )
    markup.add(
        telebot.types.InlineKeyboardButton("üîÑ –û–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_reset")
    )

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        deleted_msgs.append(bot.send_message(message.chat.id, "\n".join(reply_lines), reply_markup=markup).message_id)
        bot.delete_message(message.chat.id, message.message_id)
    except:
        pass

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
def handle_edit(call):
    data = load_data()
    if call.data == "edit_reset":
        data["records"] = []
        data["balance"] = 0
        save_data(data)
        bot.send_message(call.message.chat.id, "üßæ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã")
    elif call.data == "edit_delete":
        bot.send_message(call.message.chat.id, "‚ùì –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å? (y/n)")
        bot.register_next_step_handler(call.message, confirm_delete)
    elif call.data == "edit_change":
        bot.send_message(call.message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏:")
        bot.register_next_step_handler(call.message, change_last_record)

def confirm_delete(message):
    data = load_data()
    if message.text.lower().startswith("y"):
        if data["records"]:
            deleted = data["records"].pop()
            num = parse_number(str(deleted["amount"])) or 0
            if num > 0:
                data["balance"] -= num
            else:
                data["balance"] += abs(num)
            save_data(data)
            bot.send_message(message.chat.id, "‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")
    else:
        bot.send_message(message.chat.id, "‚ùå –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.")

def change_last_record(message):
    data = load_data()
    new_val = parse_number(message.text)
    if new_val is None or not data["records"]:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    old_rec = data["records"][-1]
    old_val = parse_number(str(old_rec["amount"])) or 0
    diff = new_val - old_val
    data["records"][-1]["amount"] = new_val
    data["balance"] += diff
    save_data(data)
    bot.send_message(
        message.chat.id,
        f"‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:\n{format_number(old_val)} ‚ûú {format_number(new_val)}"
    )

# === Flask —á–∞—Å—Ç—å –¥–ª—è Render ===
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "!", 200

@app.route("/", methods=["GET"])
def index():
    bot.remove_webhook()
    bot.set_webhook(url=f"https://fo-1.onrender.com/{TOKEN}")
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
# ---------- –ö–û–ù–ï–¶ –ö–û–î–ê ‚Ññ6 ----------
