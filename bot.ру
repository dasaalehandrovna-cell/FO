# ---------- bot.py (–≤–µ—Ä—Å–∏—è 8) ----------
import os
import json
import datetime
from flask import Flask, request
import telebot
from telebot import types

TOKEN = os.environ.get("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

DATA_FILE = "data.json"

# ====================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ======================

def load_data():
    if not os.path.exists(DATA_FILE):
        return {"records": [], "balance": 0}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def parse_amount(text):
    text = text.replace(" ", "").replace(",", ".")
    num = ""
    for ch in text:
        if ch.isdigit() or ch in "+-.":
            num += ch
        else:
            break
    try:
        return float(num)
    except:
        return None

def format_num(n):
    return f"{n:,.0f}".replace(",", ".")

# ====================== –õ–û–ì–ò–ö–ê ======================

def format_summary(records, balance):
    now = datetime.datetime.now()
    date_str = now.strftime("üìÖ %Y-%m-%d\n\n")
    output = date_str

    current_hour = None
    day_income = day_expense = 0

    for rec in records:
        t = rec["time"]
        amt = rec["amount"]
        desc = rec["desc"]
        hour = t.split(":")[0]
        if hour != current_hour:
            output += f"\nüïì {t} {amt:+.0f} {desc}\n"
            current_hour = hour
        else:
            output += f"üïì {t} {amt:+.0f} {desc}\n"
        if amt > 0:
            day_income += amt
        else:
            day_expense += abs(amt)

    output += (
        f"\nüìà –ü—Ä–∏—Ö–æ–¥ –¥–Ω—è: {format_num(day_income)}"
        f"\nüìâ –†–∞—Å—Ö–æ–¥ –¥–Ω—è: {format_num(day_expense)}"
        f"\nüíµ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {'-' if balance < 0 else ''}{format_num(abs(balance))}"
    )
    return output

def new_day_needed(records):
    today = datetime.date.today().isoformat()
    if not records:
        return True
    last_date = records[-1]["date"]
    return last_date != today

# ====================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ======================

@bot.message_handler(commands=["start"])
def start_msg(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
    markup.row("üíæ –û–±–Ω—É–ª–∏—Ç—å –≤—Å—ë")
    bot.send_message(message.chat.id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ", reply_markup=markup)

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    text = message.text.strip()
    chat_id = message.chat.id

    data = load_data()
    records = data["records"]
    balance = data["balance"]

    if text == "üíæ –û–±–Ω—É–ª–∏—Ç—å –≤—Å—ë":
        confirm = types.InlineKeyboardMarkup()
        confirm.add(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="reset_yes"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="reset_no")
        )
        bot.send_message(chat_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?", reply_markup=confirm)
        return

    if text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        today = datetime.date.today().isoformat()
        today_records = [r for r in records if r["date"] == today]
        if not today_records:
            bot.send_message(chat_id, "–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
            return
        kb = types.InlineKeyboardMarkup()
        for i, r in enumerate(today_records):
            label = f"{r['time']} {r['amount']:+.0f} {r['desc']}"
            kb.add(types.InlineKeyboardButton(label, callback_data=f"edit_{i}"))
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
        return

    amount = parse_amount(text)
    if amount is None:
        return

    # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    parts = text.split(maxsplit=1)
    desc = parts[1] if len(parts) > 1 else ""

    now = datetime.datetime.now()
    record = {
        "date": now.date().isoformat(),
        "time": now.strftime("%H:%M"),
        "amount": amount,
        "desc": desc
    }

    if new_day_needed(records):
        summary = format_summary(records, balance)
        bot.send_message(chat_id, summary)
        records = []

    records.append(record)
    balance += amount
    data["records"] = records
    data["balance"] = balance
    save_data(data)

    msg = format_summary(records, balance)
    bot.send_message(chat_id, msg)

# ====================== CALLBACK ======================

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id = call.message.chat.id
    data = load_data()

    if call.data == "reset_yes":
        data = {"records": [], "balance": 0}
        save_data(data)
        bot.edit_message_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã", chat_id, call.message.id)
        return
    elif call.data == "reset_no":
        bot.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", chat_id, call.message.id)
        return

    if call.data.startswith("edit_"):
        index = int(call.data.split("_")[1])
        today = datetime.date.today().isoformat()
        today_records = [r for r in data["records"] if r["date"] == today]
        rec = today_records[index]

        kb = types.InlineKeyboardMarkup()
        kb.add(
            types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"change_{index}"),
            types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{index}"),
            types.InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        )
        text = f"–ó–∞–ø–∏—Å—å: {rec['time']} {rec['amount']:+.0f} {rec['desc']}"
        bot.edit_message_text(text, chat_id, call.message.id, reply_markup=kb)

    elif call.data.startswith("delete_"):
        index = int(call.data.split("_")[1])
        today = datetime.date.today().isoformat()
        records = data["records"]
        today_records = [r for r in records if r["date"] == today]
        rec = today_records[index]
        records.remove(rec)
        data["records"] = records
        data["balance"] -= rec["amount"]
        save_data(data)
        bot.edit_message_text("üóë –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞", chat_id, call.message.id)

    elif call.data.startswith("change_"):
        index = int(call.data.split("_")[1])
        bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:", chat_id, call.message.id)
        bot.register_next_step_handler(call.message, lambda m: change_value(m, index))

    elif call.data == "cancel":
        bot.edit_message_text("‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ", chat_id, call.message.id)

def change_value(message, index):
    data = load_data()
    today = datetime.date.today().isoformat()
    records = data["records"]
    today_records = [r for r in records if r["date"] == today]

    rec = today_records[index]
    old_amount = rec["amount"]

    new_amount = parse_amount(message.text)
    if new_amount is None:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    data["balance"] += new_amount - old_amount
    rec["amount"] = new_amount
    rec["desc"] = "–∏–∑–º–µ–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É—é"
    save_data(data)

    bot.send_message(message.chat.id, "‚úèÔ∏è –ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∞\n–î–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏")

# ====================== FLASK WEBHOOK ======================

@app.route("/" + TOKEN, methods=["POST"])
def webhook():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "!", 200

@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ"

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url="https://fo-1.onrender.com/" + TOKEN)
    app.run(host="0.0.0.0", port=10000)
