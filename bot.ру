# –ö–æ–¥ –±–æ—Ç–∞ ‚Ññ4
# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è webhook-–±–æ—Ç–∞ (–Ω–∞ Render).
# –¢—Ä–µ–±—É–µ—Ç –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏: BOT_TOKEN, OWNER_ID
# requirements.txt: pyTelegramBotAPI==4.23.0, flask

import os
import json
import time
import threading
import re
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

# -------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")  # —Å—Ç—Ä–æ–∫–∞
TZ = ZoneInfo("America/Argentina/Catamarca")  # –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
DATA_FILE = "data.json"
PORT = int(os.environ.get("PORT", 5000))

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not OWNER_ID:
    print("‚ö†Ô∏è OWNER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# -------------------------
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ö—Ä–∞–Ω—è–µ–º–∞—è –≤ data.json
# {
#   "overall_balance": int,
#   "records": [ { "id": int, "timestamp": iso, "amount": int, "note": str, "owner": chat_id } , ... ],
#   "active_messages": { "YYYY-MM-DD": { "chat_id": id, "message_id": id } },
#   "next_id": int
# }
# -------------------------

def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "active_messages": {},
        "next_id": 1
    }

# -------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞/–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
# -------------------------
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except Exception:
                return default_data()
    else:
        return default_data()

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

# -------------------------
# –£—Ç–∏–ª–∏—Ç—ã: –ø–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–µ–ª –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# -------------------------
# regex: –∏—â–µ—Ç –ø–µ—Ä–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º (+/-) –≤–æ–∑–º–æ–∂–Ω–æ —Å –ø—Ä–æ–±–µ–ª–µ–º, –∑–∞—Ç–µ–º —Ü–∏—Ñ—Ä—ã/—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
NUMBER_RE = re.compile(r'([+-]?\s*[\d][\d\s\.,]*)')

def parse_first_number(text):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple (amount:int, sign_detected: str, raw_match:str) –∏–ª–∏ (None, None, None)
    –ü—Ä–∞–≤–∏–ª–∞:
     - –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –Ω–∞–π–¥–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '+': –ø—Ä–∏—Ö–æ–¥ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ)
     - –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '-' –∏–ª–∏ –Ω–µ—Ç –∑–Ω–∞–∫–∞: —Ä–∞—Å—Ö–æ–¥ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ)
     - –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã, —Ç–æ—á–∫–∏ –∏ –∑–∞–ø—è—Ç—ã–µ –≤ —á–∏—Å–ª–µ –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Ö –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á
     - –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–±–µ–∑ –∑–Ω–∞–∫–æ–≤ –¥–ª—è amount). Caller –ø—Ä–∏–º–µ–Ω–∏—Ç –∑–Ω–∞–∫.
    """
    if not text:
        return None, None, None
    m = NUMBER_RE.search(text)
    if not m:
        return None, None, None
    raw = m.group(1)
    # –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞–∫
    s = raw.strip()
    sign = None
    if s.startswith('+'):
        sign = '+'
        digits_part = s[1:].strip()
    elif s.startswith('-'):
        sign = '-'
        digits_part = s[1:].strip()
    else:
        sign = ''  # –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–∫–∞ => —Ä–∞—Å—Ö–æ–¥ per requirement
        digits_part = s

    # —É–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á: –ø—Ä–æ–±–µ–ª—ã, —Ç–æ—á–∫–∏, –∑–∞–ø—è—Ç—ã–µ
    digits_norm = re.sub(r'[\s\.,]', '', digits_part)
    # –≤–∑—è—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –≤ –Ω–∞—á–∞–ª–µ (–Ω–∞ —Å–ª—É—á–∞–π "56–ø—Ä–æ–¥—É–∫—Ç—ã")
    digits_norm = re.match(r'(\d+)', digits_norm)
    if not digits_norm:
        return None, None, None
    num = int(digits_norm.group(1))
    return num, sign, raw

def apply_sign_and_normalize(num, sign):
    """
    sign = '+' | '-' | '' (empty means treat as negative per new rule)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç signed int (–Ω–∞–ø—Ä–∏–º–µ—Ä -500, +1000)
    """
    if sign == '+':
        return num
    else:
        # '-' or '' -> expense => negative
        return -num

def format_amount_with_dots(n):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É n —Å —Ç–æ—á–∫–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Ç—ã—Å—è—á, –±–µ–∑ –∑–Ω–∞–∫–∞."""
    s = f"{abs(n):,}"  # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–ø—è—Ç—É—é
    s = s.replace(",", ".")
    return s

# -------------------------
# –°–æ–æ–±—â–µ–Ω–∏—è: —Å–±–æ—Ä–∫–∞ –æ–∫–Ω–∞ –¥–Ω—è
# -------------------------
def date_str_local(dt):
    return dt.astimezone(TZ).strftime("%Y-%m-%d")

def time_str_local(dt):
    return dt.astimezone(TZ).strftime("%H:%M")

def build_day_window(chat_id, day_date):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ–∫–Ω–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã (YYYY-MM-DD).
    –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å—É: –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —á–∞—Å–∞–º–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.
    –¢–∞–∫–∂–µ —Å—á–∏—Ç–∞–µ—Ç –ø—Ä–∏—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥ –¥–Ω—è –∏ –æ–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫.
    """
    # —Å–æ–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã (–ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
    recs = []
    for r in data["records"]:
        ts = datetime.fromisoformat(r["timestamp"]).astimezone(TZ)
        if date_str_local(ts) == day_date and str(r.get("owner")) == str(chat_id):
            recs.append( (ts, r) )
    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    recs.sort(key=lambda x: x[0])
    if not recs:
        return "üìò –ó–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."

    lines = []
    header = f"üìÖ {day_date}\n"
    lines.append(header)
    last_hour = None
    day_income = 0
    day_expense = 0
    for ts, r in recs:
        hour = ts.strftime("%H")
        if last_hour is None:
            last_hour = hour
        elif hour != last_hour:
            # –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Å–∞
            lines.append("") 
            last_hour = hour
        amt = r["amount"]  # signed int
        amt_fmt = format_amount_with_dots(amt)
        sign = "+" if amt > 0 else "-"
        note = r.get("note", "")
        lines.append(f"üïì {time_str_local(ts)} {sign}{amt_fmt} {note}".rstrip())
        if amt > 0:
            day_income += amt
        else:
            day_expense += abs(amt)

    overall = data.get("overall_balance", 0)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
    inc_fmt = format_amount_with_dots(day_income)
    exp_fmt = format_amount_with_dots(day_expense)
    overall_fmt = format_amount_with_dots(overall)
    lines.append("")
    lines.append(f"üìà –ü—Ä–∏—Ö–æ–¥ –¥–Ω—è: {inc_fmt}")
    lines.append(f"üìâ –†–∞—Å—Ö–æ–¥ –¥–Ω—è: {exp_fmt}")
    lines.append(f"üíµ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_fmt}")
    return "\n".join(lines)

# -------------------------
# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –ø–∏–Ω–≥–æ–≤)
# -------------------------
def delete_message_later(chat_id, message_id, delay=10):
    def worker():
        time.sleep(delay)
        try:
            bot.delete_message(chat_id, message_id)
        except Exception as e:
            # –ø—Ä–æ—Å—Ç–æ –ª–æ–≥, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ {chat_id}: {e}")
    threading.Thread(target=worker, daemon=True).start()

# -------------------------
# –í—Å–ø–æ–º–æ–≥. —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ –ø–∞–º—è—Ç–∏)
# -------------------------
# pending_actions[chat_id] = { "type": "delete_confirm"/"await_delete"/"await_modify"/"await_modify_input"/"await_reset_confirm", "payload": {...} }
pending_actions = {}

# -------------------------
# Webhook endpoints
# -------------------------
@app.route("/" + TOKEN, methods=["POST"])
def receive_update():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/", methods=["GET"])
def set_and_ping():
    bot.remove_webhook()
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    bot.set_webhook(url=webhook_url)
    print(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

    # –ø—Ä–∏ –ø–∏–Ω–≥–µ –æ—Ç UptimeRobot/Render –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º "–Ø –∂–∏–≤" –≤ —á–∞—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –∞–≤—Ç–æ—É–¥–∞–ª—è–µ–º
    if OWNER_ID:
        try:
            msg = bot.send_message(int(OWNER_ID), "‚úÖ –Ø –∂–∏–≤ (–ø–∏–Ω–≥ –æ—Ç Render –∏–ª–∏ UptimeRobot)")
            delete_message_later(int(OWNER_ID), msg.message_id, delay=10)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞: {e}")
    return "Webhook active", 200

# -------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -------------------------
def make_day_keyboard():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_menu"))
    return kb

def make_edit_menu_keyboard():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="edit_modify"))
    kb.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="edit_delete"))
    kb.add(types.InlineKeyboardButton("–û–±–Ω—É–ª–∏—Ç—å –≤—Å—ë (–≤—Å–µ—Ö)", callback_data="edit_reset_all"))
    kb.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="edit_cancel"))
    return kb

def make_yes_no(cb_prefix):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–î–∞", callback_data=f"{cb_prefix}_yes"),
           types.InlineKeyboardButton("–ù–µ—Ç", callback_data=f"{cb_prefix}_no"))
    return kb

# -------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π)
# -------------------------
@bot.message_handler(func=lambda m: True)
def handle_message(message):
    chat_id = message.chat.id
    text = (message.text or "").strip()
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    pa = pending_actions.get(str(chat_id))
    if pa:
        t = pa.get("type")
        if t == "await_delete":
            # –æ–∂–∏–¥–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            try:
                idx = int(text.strip())
                # –Ω–∞–π–¥–µ–º –∑–∞–ø–∏—Å—å —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º –≤ today's list
                pa["payload"] = {"delete_idx": idx}
                pending_actions[str(chat_id)] = {"type": "delete_confirm", "payload": pa["payload"]}
                bot.send_message(chat_id, f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–æ–º–µ—Ä {idx}? (–î–∞/–ù–µ—Ç)",
                                 reply_markup=make_yes_no("confirm_delete"))
            except Exception:
                bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
            return
        elif t == "await_modify":
            # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–Ω–æ–º–µ—Ä|–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ" –ª–∏–±–æ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ ‚Äî –Ω–æ–º–µ—Ä –∑–∞—Ç–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
            # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å "N|+1000 –ø—Ä–æ–¥—É–∫—Ç—ã" –∏–ª–∏ "N\n+1000 –ø—Ä–æ–¥—É–∫—Ç—ã"
            try:
                if "|" in text:
                    parts = text.split("|", 1)
                    idx = int(parts[0].strip())
                    new_text = parts[1].strip()
                elif "\n" in text:
                    parts = text.split("\n", 1)
                    idx = int(parts[0].strip())
                    new_text = parts[1].strip()
                else:
                    # –Ω–µ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ—Å–∏–º —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–º–µ—Ä, –ø–æ—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    # —Å–æ—Ö—Ä–∞–Ω–∏–º –∏ –ø–æ–ø—Ä–æ—Å–∏–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    idx = int(text.strip())
                    pending_actions[str(chat_id)] = {"type": "await_modify_input", "payload": {"modify_idx": idx}}
                    bot.send_message(chat_id, "–û–ö. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏ (–ø—Ä–∏–º–µ—Ä: +1000 —Ö–ª–µ–± –∏–ª–∏ -500 –±–µ–Ω–∑–∏–Ω).")
                    return
                # –∏–º–µ–µ–º idx –∏ new_text ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                pending_actions[str(chat_id)] = {"type": "modify_confirm", "payload": {"modify_idx": idx, "new_text": new_text}}
                bot.send_message(chat_id, f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å #{idx} –Ω–∞ `{new_text}`?", parse_mode="Markdown",
                                 reply_markup=make_yes_no("confirm_modify"))
            except Exception:
                bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–Ω–æ–º–µ—Ä|–Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å` (–Ω–∞–ø—Ä–∏–º–µ—Ä `3|+1000 –∑–∞—Ä–ø–ª–∞—Ç–∞`).", parse_mode="Markdown")
            return
        elif t == "await_modify_input":
            # –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–∞–Ω–µ–µ —É–∫–∞–∑–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
            payload = pa.get("payload", {})
            idx = payload.get("modify_idx")
            new_text = text.strip()
            pending_actions[str(chat_id)] = {"type": "modify_confirm", "payload": {"modify_idx": idx, "new_text": new_text}}
            bot.send_message(chat_id, f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–º–µ–Ω—É –∑–∞–ø–∏—Å–∏ #{idx} –Ω–∞ `{new_text}`", parse_mode="Markdown", reply_markup=make_yes_no("confirm_modify"))
            return
        elif t == "await_reset_confirm":
            # –æ–∂–∏–¥–∞–µ–º –¥–∞/–Ω–µ—Ç –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ (y/n)
            if text.strip().lower() in ("y","yes","–¥–∞","–¥"):
                # –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–±—Ä–æ—Å
                data["overall_balance"] = 0
                data["records"] = []
                data["active_messages"] = {}
                save_data(data)
                bot.send_message(chat_id, "‚ôªÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã.")
            else:
                bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω—ã.")
            pending_actions.pop(str(chat_id), None)
            return
        # –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã...
    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∑–∞–ø–∏—Å—å
    num, sign, raw = parse_first_number(text)
    if num is None:
        bot.reply_to(message, "‚ùó –Ø –Ω–µ –Ω–∞—à—ë–ª —á–∏—Å–ª–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü—Ä–∏–º–µ—Ä: `+1000 —Ö–ª–µ–±` –∏–ª–∏ `-500 –±–µ–Ω–∑–∏–Ω` –∏–ª–∏ `1000 —Ö–ª–µ–±` (–±–µ–∑ –∑–Ω–∞–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–∞—Å—Ö–æ–¥).")
        return

    amt_signed = apply_sign_and_normalize(num, sign)
    note = text[ (text.find(raw) + len(raw)) : ].strip() if raw in text else ""
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ data
    rec_id = data.get("next_id", 1)
    ts = datetime.now(tz=ZoneInfo("UTC")).isoformat()  # —Ö—Ä–∞–Ω–∏—Ç—å –≤ UTC
    rec = {
        "id": rec_id,
        "timestamp": ts,
        "amount": amt_signed,
        "note": note,
        "owner": str(chat_id)
    }
    data["records"].append(rec)
    data["next_id"] = rec_id + 1
    data["overall_balance"] = data.get("overall_balance", 0) + amt_signed
    save_data(data)

    # –û—Ç–ø—Ä–∞–≤–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–∏ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –¥–Ω—è)
    # –°–Ω–∞—á–∞–ª–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–∫–Ω–æ –¥–Ω—è
    local_day = date_str_local(datetime.fromisoformat(ts))
    day_text = build_day_window(chat_id, local_day)
    kb = make_day_keyboard()
    sent = bot.send_message(chat_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {format_amount_with_dots(amt_signed) if amt_signed!=0 else '0'}\n{note}\n\n{day_text}", reply_markup=kb, parse_mode="Markdown")
    # —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–∫–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è (–µ—Å–ª–∏ –±—ã–ª–æ) ‚Äî —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ–º, –Ω–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –æ–∫–Ω–∞ –ø—Ä–æ—à–ª—ã—Ö –¥–Ω–µ–π
    am = data.get("active_messages", {})
    prev = am.get(local_day)
    if prev:
        try:
            # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.delete_message(prev["chat_id"], prev["message_id"])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–∫–Ω–æ –¥–Ω—è: {e}")
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π active message –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
    data["active_messages"][local_day] = {"chat_id": chat_id, "message_id": sent.message_id}
    save_data(data)

# -------------------------
# Callback query handler (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
# -------------------------
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    chat_id = call.message.chat.id
    user = str(chat_id)
    data_call = call.data

    if data_call == "edit_menu":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, "–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=make_edit_menu_keyboard())
        return

    if data_call == "edit_cancel":
        bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
        return

    if data_call == "edit_modify":
        bot.answer_callback_query(call.id)
        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å –≤ –≤–∏–¥–µ `–Ω–æ–º–µ—Ä|–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ` (–Ω–∞–ø—Ä–∏–º–µ—Ä `3|+1000 –∑–∞—Ä–ø–ª–∞—Ç–∞`) –∏–ª–∏ —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–º–µ—Ä, –∞ –ø–æ—Ç–æ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        pending_actions[user] = {"type": "await_modify", "payload": {}}
        return

    if data_call == "edit_delete":
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å (–Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ –æ–∫–Ω–∞ –¥–Ω—è).")
        pending_actions[user] = {"type": "await_delete", "payload": {}}
        return

    if data_call == "edit_reset_all":
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤—Å–µ–≥–¥–∞? (–î–∞/–ù–µ—Ç)", reply_markup=make_yes_no("confirm_reset_all"))
        pending_actions[user] = {"type": "await_reset_confirm", "payload": {}}
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (yes/no) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è/–æ–±–Ω—É–ª–µ–Ω–∏—è
    if data_call.startswith("confirm_delete"):
        bot.answer_callback_query(call.id)
        # payload —É –Ω–∞—Å –¥–æ–ª–∂–µ–Ω —É–∂–µ –±—ã—Ç—å –≤ pending_actions
        pa = pending_actions.get(user)
        if not pa or pa.get("type") != "delete_confirm":
            bot.send_message(chat_id, "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è. –û—Ç–º–µ–Ω–∞.")
            pending_actions.pop(user, None)
            return
        if data_call.endswith("_yes"):
            idx = pa["payload"]["delete_idx"]
            # –ù–∞–π–¥–µ–º –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∏–Ω–¥–µ–∫—Å–æ–º –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø–∏—Å–µ–π –¥–∞–Ω–Ω–æ–≥–æ –¥–Ω—è/—á–∞—Ç–∞.
            deleted = delete_record_by_day_index(chat_id, idx)
            if deleted:
                bot.send_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å #{idx} —É–¥–∞–ª–µ–Ω–∞.")
            else:
                bot.send_message(chat_id, f"‚ùó –ó–∞–ø–∏—Å—å #{idx} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            pending_actions.pop(user, None)
        else:
            bot.send_message(chat_id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            pending_actions.pop(user, None)
        return

    if data_call.startswith("confirm_modify"):
        bot.answer_callback_query(call.id)
        pa = pending_actions.get(user)
        if not pa or pa.get("type") != "modify_confirm":
            bot.send_message(chat_id, "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –û—Ç–º–µ–Ω–∞.")
            pending_actions.pop(user, None)
            return
        if data_call.endswith("_yes"):
            idx = pa["payload"]["modify_idx"]
            new_text = pa["payload"]["new_text"]
            ok = modify_record_by_day_index(chat_id, idx, new_text)
            if ok:
                bot.send_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å #{idx} –∑–∞–º–µ–Ω–µ–Ω–∞.")
            else:
                bot.send_message(chat_id, f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å #{idx}.")
            pending_actions.pop(user, None)
        else:
            bot.send_message(chat_id, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            pending_actions.pop(user, None)
        return

    if data_call.startswith("confirm_reset_all"):
        bot.answer_callback_query(call.id)
        if data_call.endswith("_yes"):
            data["overall_balance"] = 0
            data["records"] = []
            data["active_messages"] = {}
            save_data(data)
            bot.send_message(chat_id, "‚ôªÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã.")
        else:
            bot.send_message(chat_id, "–û–±–Ω—É–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        pending_actions.pop(user, None)
        return

# -------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å/–∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ –∏–Ω–¥–µ–∫—Å—É –≤ –æ–∫–Ω–µ –¥–Ω—è
# -------------------------
def get_day_records_for_chat(chat_id, day_date):
    recs = []
    for r in data["records"]:
        if str(r.get("owner")) != str(chat_id):
            continue
        ts = datetime.fromisoformat(r["timestamp"]).astimezone(TZ)
        if date_str_local(ts) == day_date:
            recs.append((ts, r))
    recs.sort(key=lambda x: x[0])
    return recs

def delete_record_by_day_index(chat_id, idx):
    # idx ‚Äî 1-based index in day's window (–ø–æ –ø–æ—Ä—è–¥–∫—É –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ –æ–∫–Ω–µ)
    # –∏—â–µ–º record id –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ data["records"], –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º overall_balance
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–æ
    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â day
    now = datetime.now(tz=TZ)
    day_date = date_str_local(now)
    recs = get_day_records_for_chat(chat_id, day_date)
    if idx < 1 or idx > len(recs):
        return False
    _, r = recs[idx-1]
    try:
        data["records"] = [x for x in data["records"] if x["id"] != r["id"]]
        data["overall_balance"] = data.get("overall_balance", 0) - r["amount"]
        save_data(data)
        # –æ–±–Ω–æ–≤–∏–º –æ–∫–Ω–æ –¥–Ω—è: –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ –∏ —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä–æ–µ
        update_day_window_after_change(chat_id, day_date)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        return False

def modify_record_by_day_index(chat_id, idx, new_text):
    # –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç ‚Äî –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –≤–∑—è—Ç—å –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏ note
    now = datetime.now(tz=TZ)
    day_date = date_str_local(now)
    recs = get_day_records_for_chat(chat_id, day_date)
    if idx < 1 or idx > len(recs):
        return False
    _, r = recs[idx-1]
    # parse new_text similar to handle_message
    num, sign, raw = parse_first_number(new_text)
    if num is None:
        return False
    new_amt = apply_sign_and_normalize(num, sign)
    note = new_text[ (new_text.find(raw) + len(raw)) : ].strip() if raw in new_text else ""
    # find record in main list and update
    for i, rr in enumerate(data["records"]):
        if rr["id"] == r["id"]:
            # adjust overall balance
            data["overall_balance"] = data.get("overall_balance", 0) - rr["amount"] + new_amt
            data["records"][i]["amount"] = new_amt
            data["records"][i]["note"] = note
            # update timestamp? –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–∂–Ω–∏–π timestamp (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω—ë–Ω —Ñ–ª–∞–≥)
            save_data(data)
            update_day_window_after_change(chat_id, day_date)
            return True
    return False

def update_day_window_after_change(chat_id, day_date):
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –∏ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π: —É–¥–∞–ª—è–µ–º prev message –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º active_messages
    day_text = build_day_window(chat_id, day_date)
    kb = make_day_keyboard()
    sent = bot.send_message(chat_id, day_text, reply_markup=kb)
    # —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
    prev = data.get("active_messages", {}).get(day_date)
    if prev:
        try:
            bot.delete_message(prev["chat_id"], prev["message_id"])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–∫–Ω–æ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
    data["active_messages"][day_date] = {"chat_id": chat_id, "message_id": sent.message_id}
    save_data(data)
    # —É–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –Ω–µ –¥–µ–ª–∞–µ–º —Ç—É—Ç, –æ–Ω–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤—ã—à–µ

# -------------------------
# –ö–æ–º–∞–Ω–¥—ã –±—ã—Å—Ç—Ä—ã–µ: /–±–∞–ª–∞–Ω—Å /–æ—Ç—á–µ—Ç /—Å–±—Ä–æ—Å (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
# -------------------------
@bot.message_handler(commands=["–±–∞–ª–∞–Ω—Å"])
def cmd_balance(message):
    chat_id = message.chat.id
    overall = data.get("overall_balance", 0)
    bot.reply_to(message, f"üí∞ –¢–µ–∫—É—â–∏–π –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: {format_amount_with_dots(overall)}")

@bot.message_handler(commands=["–æ—Ç—á–µ—Ç"])
def cmd_report(message):
    # –æ—Ç–ø—Ä–∞–≤–∏–º –æ–∫–Ω–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
    chat_id = message.chat.id
    now = datetime.now(tz=TZ)
    day_date = date_str_local(now)
    day_text = build_day_window(chat_id, day_date)
    sent = bot.send_message(chat_id, day_text, reply_markup=make_day_keyboard())
    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–ª—è –¥–Ω—è
    prev = data.get("active_messages", {}).get(day_date)
    if prev:
        try:
            bot.delete_message(prev["chat_id"], prev["message_id"])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–∫–Ω–æ –ø—Ä–∏ /–æ—Ç—á–µ—Ç: {e}")
    data["active_messages"][day_date] = {"chat_id": chat_id, "message_id": sent.message_id}
    save_data(data)

@bot.message_handler(commands=["—Å–±—Ä–æ—Å"])
def cmd_reset(message):
    chat_id = message.chat.id
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ y/n —á–µ—Ä–µ–∑ inline
    pending_actions[str(chat_id)] = {"type": "await_reset_confirm", "payload": {}}
    bot.send_message(chat_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? (–î–∞/–ù–µ—Ç)", reply_markup=make_yes_no("confirm_reset_all"))

# -------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# -------------------------
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç ‚Ññ4 –∑–∞–ø—É—â–µ–Ω (webhook).")
    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ –∑–∞–ø—É—Å–∫–µ (–∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ)
    if OWNER_ID:
        try:
            msg = bot.send_message(int(OWNER_ID), "‚úÖ –ë–æ—Ç ‚Ññ4 –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (–≤–µ—Ä—Å–∏—è ‚Ññ4)")
            delete_message_later(int(OWNER_ID), msg.message_id, delay=10)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞: {e}")
    # Ensure data saved on startup
    save_data(data)
    app.run(host="0.0.0.0", port=PORT)
