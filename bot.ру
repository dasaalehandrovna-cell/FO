import telebot
from telebot import types
import json, os, re, datetime, csv

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê"
OWNER_ID = –¢–í–û–ô_CHAT_ID_–ß–ò–°–õ–û–ú  # –≤—Å—Ç–∞–≤—å —Å–≤–æ–π ID
DATA_FILE = "data.json"
CSV_FILE = "records.csv"

bot = telebot.TeleBot(BOT_TOKEN)

# === –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def log_error(e):
    print("‚ö†Ô∏è", e)

def default_data():
    return {"chats": {}}

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            pass
    return default_data()

def save_data(d):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

data = load_data()

def get_today_key():
    return datetime.date.today().strftime("%Y-%m-%d")

def get_chat_store(chat_id):
    if str(chat_id) not in data["chats"]:
        data["chats"][str(chat_id)] = {
            "daily_records": {},
            "balance": 0,
            "edit_wait": None,
            "edit_target": None,
        }
    return data["chats"][str(chat_id)]

def add_record_to_chat(chat_id, amount, note, user_id=None):
    store = get_chat_store(chat_id)
    today = get_today_key()
    if today not in store["daily_records"]:
        store["daily_records"][today] = []
    rid = len(store["daily_records"][today]) + 1
    store["daily_records"][today].append({
        "id": rid,
        "amount": amount,
        "note": note,
        "user_id": user_id
    })
    store["balance"] += amount
    save_data(data)
    return rid

def update_record_in_chat(chat_id, rid, amount, note):
    store = get_chat_store(chat_id)
    today = get_today_key()
    records = store["daily_records"].get(today, [])
    for r in records:
        if r["id"] == rid:
            store["balance"] -= r["amount"]
            r["amount"] = amount
            r["note"] = note
            store["balance"] += amount
            save_data(data)
            return True, r
    return False, None

def delete_record_in_chat(chat_id, rid):
    store = get_chat_store(chat_id)
    today = get_today_key()
    records = store["daily_records"].get(today, [])
    for r in records:
        if r["id"] == rid:
            store["balance"] -= r["amount"]
            records.remove(r)
            save_data(data)
            return True, r
    return False, None

def export_to_csv(data):
    with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["Chat ID", "Date", "Record ID", "Amount", "Note"])
        for chat_id, store in data["chats"].items():
            for date, records in store.get("daily_records", {}).items():
                for r in records:
                    writer.writerow([chat_id, date, r["id"], r["amount"], r["note"]])

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===

def build_main_keyboard(chat_id, confirm_reset=False):
    kb = types.InlineKeyboardMarkup(row_width=3)
    if confirm_reset:
        kb.add(
            types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_reset"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset")
        )
        return kb
    kb.add(
        types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report"),
        types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="btn_edit"),
        types.InlineKeyboardButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="export_csv"),
    )
    kb.add(
        types.InlineKeyboardButton("‚ôªÔ∏è –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö", callback_data="btn_reset"),
        types.InlineKeyboardButton("üì® –ü–µ—Ä–µ—Å—ã–ª–∫–∞", callback_data="btn_forward")
    )
    return kb

def build_day_text(chat_id):
    store = get_chat_store(chat_id)
    today = get_today_key()
    recs = store.get("daily_records", {}).get(today, [])
    text = f"üìÖ {today}\n"
    if not recs:
        text += "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
    else:
        for r in recs:
            sign = "‚ûï" if r["amount"] > 0 else "‚ûñ"
            text += f"{r['id']}. {sign}{abs(r['amount'])} ‚Äî {r['note']}\n"
    text += f"\nüí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {store['balance']} ARS"
    return text

def update_or_send_today_window(chat_id, extra_text=None):
    kb = build_main_keyboard(chat_id)
    text = build_day_text(chat_id)
    if extra_text:
        text += f"\n\n{extra_text}"
    try:
        bot.edit_message_text(text, chat_id, data["chats"][str(chat_id)].get("last_msg_id"), reply_markup=kb)
    except:
        msg = bot.send_message(chat_id, text, reply_markup=kb)
        data["chats"][str(chat_id)]["last_msg_id"] = msg.message_id
        save_data(data)

# === –ö–æ–º–∞–Ω–¥—ã ===

@bot.message_handler(commands=["start"])
def start_command(msg):
    chat_id = msg.chat.id
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–≤–æ–π –±–æ—Ç —É—á—ë—Ç–∞.\n\n"
        "üìå –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å—É–º–º—É:\n"
        "‚Ä¢ `+100` –∏–ª–∏ `100` ‚Äî –ø—Ä–∏—Ö–æ–¥\n"
        "‚Ä¢ `-50` ‚Äî —Ä–∞—Å—Ö–æ–¥\n\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Å—Ä–∞–∑—É.\n\n"
        "üìä –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
    )
    update_or_send_today_window(chat_id, extra_text=text)

# -----------------------------
# 9. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# -----------------------------
@bot.message_handler(func=lambda m: True)
def handle_message(msg):
    chat_id = msg.chat.id
    text = msg.text or ""
    store = get_chat_store(chat_id)

    # --- –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–ª–∞–¥–µ–ª—å—Ü–µ–º ---
    if chat_id == OWNER_ID and msg.chat.type == "private":
        target_chat_id = store.get("forward_target")
        if target_chat_id:
            try:
                bot.send_message(target_chat_id, text)
            except:
                update_or_send_today_window(chat_id, extra_text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
            store["forward_target"] = None
        update_or_send_today_window(chat_id)
        return

    # --- –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ –ª–∏—á–∫—É –≤–ª–∞–¥–µ–ª—å—Ü–∞ ---
    if chat_id != OWNER_ID and OWNER_ID:
        try:
            bot.send_message(OWNER_ID, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {msg.from_user.first_name} ({chat_id}):\n{text}")
        except:
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É: {chat_id}")

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
    wait_action = store.get("edit_wait")

    # === –û–±—ã—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π ===
    if wait_action is None:
        lines = text.splitlines()
        any_added = False

        for line in lines:
            clean_line = re.sub(r"[^\d\+\-]", "", line)
            match = re.match(r"([+-]?\d+)", clean_line)
            if not match:
                continue
            try:
                amount = int(match.group(1))
                note = line[match.end():].strip()
                add_record_to_chat(chat_id, amount, note, msg.from_user.id)
                any_added = True
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
                continue

        if any_added:
            update_or_send_today_window(chat_id, extra_text="‚úÖ –ó–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        else:
            update_or_send_today_window(chat_id)
        return

    # === –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ===
    if wait_action == "change_id":
        try:
            rid = int(text.strip())
            store["edit_wait"] = "change_value"
            store["edit_target"] = rid
            update_or_send_today_window(chat_id, extra_text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∏ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ {rid}:")
        except:
            update_or_send_today_window(chat_id, extra_text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    elif wait_action == "change_value":
        rid = store.get("edit_target")
        if not rid:
            store["edit_wait"] = None
            return
        parts = text.strip().split(" ", 1)
        try:
            amount = int(parts[0])
            note = parts[1] if len(parts) > 1 else ""
            success, _ = update_record_in_chat(chat_id, rid, amount, note)
            if success:
                update_or_send_today_window(chat_id, extra_text=f"‚úÖ –ó–∞–ø–∏—Å—å {rid} –∏–∑–º–µ–Ω–µ–Ω–∞")
            else:
                update_or_send_today_window(chat_id, extra_text=f"‚ùå –ó–∞–ø–∏—Å—å {rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except:
            update_or_send_today_window(chat_id, extra_text="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        store["edit_wait"] = None
        store["edit_target"] = None
        return

    # === –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ===
    if wait_action == "delete_id":
        try:
            rid = int(text.strip())
            success, _ = delete_record_in_chat(chat_id, rid)
            if success:
                update_or_send_today_window(chat_id, extra_text=f"‚úÖ –ó–∞–ø–∏—Å—å {rid} —É–¥–∞–ª–µ–Ω–∞")
            else:
                update_or_send_today_window(chat_id, extra_text=f"‚ùå –ó–∞–ø–∏—Å—å {rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except:
            update_or_send_today_window(chat_id, extra_text="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        store["edit_wait"] = None
        return

    # === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ===
    if wait_action == "set_forward_target":
        try:
            target_chat_id = int(text.strip())
            store["forward_target"] = target_chat_id
            store["edit_wait"] = None
            update_or_send_today_window(chat_id, extra_text=f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤–∞—à–µ–π –ª–∏—á–∫–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –≤ —á–∞—Ç {target_chat_id}")
        except:
            update_or_send_today_window(chat_id, extra_text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

# -----------------------------
# 10. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
# -----------------------------
@bot.callback_query_handler(func=lambda call: True)
def handle_buttons(call):
    chat_id = call.message.chat.id
    data_id = call.data
    store = get_chat_store(chat_id)

    # --- –û—Ç—á—ë—Ç ---
    if data_id == "btn_report":
        today_key = get_today_key()
        day_records = store.get("daily_records", {}).get(today_key, [])
        
        income = sum(r["amount"] for r in day_records if r["amount"] > 0)
        expense = abs(sum(r["amount"] for r in day_records if r["amount"] < 0))
        overall_balance = store.get("balance", 0)

        text = (
            f"üìÖ {today_key}\n"
            f"üìä –û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å:\n\n"
            f"‚ûï –ü—Ä–∏—Ö–æ–¥ –¥–Ω—è: {income} ARS\n"
            f"‚ûñ –†–∞—Å—Ö–æ–¥ –¥–Ω—è: {expense} ARS\n\n"
            f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS"
        )
        
        kb = build_main_keyboard(chat_id)
        try:
            bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=kb)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–∫–Ω–∞ –æ—Ç—á—ë—Ç–∞: {e}")
        return

    # --- –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ ---
    elif data_id in ["btn_start", "cancel_reset"]:
        update_or_send_today_window(chat_id)
        return

    # --- –ò–∑–º–µ–Ω–∏—Ç—å ---
    elif data_id == "btn_edit":
        kb = types.InlineKeyboardMarkup(row_width=2)
        kb.add(
            types.InlineKeyboardButton("‚úèÔ∏è", callback_data="edit_change"),
            types.InlineKeyboardButton("‚ùå", callback_data="edit_delete"),
        )
        kb.add(types.InlineKeyboardButton("üîô", callback_data="btn_start"))
        update_or_send_today_window(chat_id, extra_text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:")
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=kb)
        return

    # --- –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å ---
    elif data_id == "edit_change":
        store["edit_wait"] = "change_id"
        update_or_send_today_window(chat_id, extra_text="–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
        return

    # --- –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å ---
    elif data_id == "edit_delete":
        store["edit_wait"] = "delete_id"
        update_or_send_today_window(chat_id, extra_text="–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
        return

    # --- –û–±–Ω—É–ª–∏—Ç—å (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º) ---
    elif data_id == "btn_reset":
        kb = build_main_keyboard(chat_id, confirm_reset=True)
        bot.edit_message_text("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ?", chat_id, call.message.message_id, reply_markup=kb)
        return

    # --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ ---
    elif data_id == "confirm_reset":
        global data
        data = default_data()
        save_data(data)
        update_or_send_today_window(chat_id, extra_text="‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã")
        return

    # --- –≠–∫—Å–ø–æ—Ä—Ç CSV ---
    elif data_id == "export_csv":
        try:
            export_to_csv(data)
            with open(CSV_FILE, "rb") as f:
                bot.send_document(chat_id, f, caption="üìÑ –í–∞—à CSV-—Ñ–∞–π–ª")
        except:
            update_or_send_today_window(chat_id, extra_text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å CSV.")
        return

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ---
    elif data_id == "btn_forward":
        store["edit_wait"] = "set_forward_target"
        update_or_send_today_window(chat_id, extra_text="–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞, –∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤–∞—à–µ–π –ª–∏—á–∫–∏:")
        return

    elif data_id in ["btn_cod", "noop"]:
        bot.answer_callback_query(call.id)
        return

# === –ó–∞–ø—É—Å–∫ ===
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
bot.infinity_polling(skip_pending=True)