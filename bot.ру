# --------------------------------------------
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª (Flask + webhook)
# –í–µ—Ä—Å–∏—è: 9.6.1.1-clean
# –ê–≤—Ç–æ—Ä: Daniel + GPT-5
# --------------------------------------------

import os
import json
import time
import threading
import re
import csv
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from telebot import types
from flask import Flask, request

# --------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# --------------------------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = "8107562890"  # –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.6.1.1"

if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# --------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
# --------------------------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],           # {id, short_id, timestamp(ISO UTC), amount, note, owner}
        "active_messages": {},   # YYYY-MM-DD -> { "chat_id": id, "message_id": id }
        "next_id": 1,
        "sent_messages": [],
        "forward_targets": []
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except Exception:
            d = default_data()
    else:
        d = default_data()
    for k, v in default_data().items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

data = load_data()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
if OWNER_ID and OWNER_ID not in data["forward_targets"]:
    data["forward_targets"].append(OWNER_ID)
    save_data(data)

# --------------------------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# --------------------------------------------
def now_local():
    return datetime.now(TZ)

def next_short_id():
    sid = data["next_id"]
    data["next_id"] += 1
    save_data(data)
    return sid

def format_balance(balance):
    return f"{balance:+,}".replace(",", " ")

def send_delayed_delete(chat_id, msg_id, delay=60):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É"""
    def task():
        time.sleep(delay)
        try:
            bot.delete_message(chat_id, msg_id)
        except Exception:
            pass
    threading.Thread(target=task, daemon=True).start()

def export_to_csv():
    if not data["records"]:
        return
    with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["id", "short_id", "timestamp", "amount", "note", "owner"])
        for r in data["records"]:
            writer.writerow([r["id"], r["short_id"], r["timestamp"], r["amount"], r["note"], r["owner"]])

# --------------------------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
# --------------------------------------------
def handle_record(chat_id, text, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞/—Ä–∞—Å—Ö–æ–¥–∞"""
    m = re.match(r"([+-]?\d+)\s*(.*)", text.strip())
    if not m:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: +1000 –ø—Ä–æ–¥–∞–∂–∞ –∏–ª–∏ -500 –µ–¥–∞")
        return

    amount = int(m.group(1))
    note = m.group(2).strip() or "‚Äî"
    ts = datetime.utcnow().isoformat()

    rec = {
        "id": data["next_id"],
        "short_id": next_short_id(),
        "timestamp": ts,
        "amount": amount,
        "note": note,
        "owner": user_id,
    }

    data["records"].append(rec)
    data["overall_balance"] += amount
    save_data(data)
    export_to_csv()

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
    day_key = now_local().strftime("%Y-%m-%d")
    balance_text = f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_balance(data['overall_balance'])}‚ÇΩ"
    text_out = (
        f"üìí {day_key}\n"
        f"{'‚ûï' if amount > 0 else '‚ûñ'} {abs(amount)}‚ÇΩ ‚Äî {note}\n\n{balance_text}"
    )

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
    if day_key in data["active_messages"]:
        try:
            old = data["active_messages"][day_key]
            bot.delete_message(old["chat_id"], old["message_id"])
        except Exception:
            pass

    msg = bot.send_message(chat_id, text_out)
    data["active_messages"][day_key] = {"chat_id": chat_id, "message_id": msg.message_id}
    save_data(data)

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É
    for target in data["forward_targets"]:
        try:
            if str(target) != str(chat_id):
                bot.forward_message(target, chat_id, msg.message_id)
        except Exception:
            pass

# --------------------------------------------
# –ö–æ–º–∞–Ω–¥—ã
# --------------------------------------------
@bot.message_handler(commands=["start"])
def cmd_start(msg):
    bot.send_message(
        msg.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç.\n"
        f"–í–µ—Ä—Å–∏—è: {VERSION}\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–æ–¥–µ:\n"
        "`+1000 –ø—Ä–æ–¥–∞–∂–∞` –∏–ª–∏ `-500 –ø—Ä–æ–¥—É–∫—Ç—ã`\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/–±–∞–ª–∞–Ω—Å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/–æ—Ç—á–µ—Ç ‚Äî –≤—Å–µ –∑–∞–ø–∏—Å–∏\n"
        "/—Å–±—Ä–æ—Å ‚Äî –æ–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)",
        parse_mode="Markdown",
    )

@bot.message_handler(commands=["–±–∞–ª–∞–Ω—Å"])
def cmd_balance(msg):
    bot.send_message(msg.chat.id, f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {format_balance(data['overall_balance'])}‚ÇΩ")

@bot.message_handler(commands=["–æ—Ç—á–µ—Ç"])
def cmd_report(msg):
    if not data["records"]:
        bot.send_message(msg.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return
    text_lines = []
    for r in reversed(data["records"][-20:]):
        dt = datetime.fromisoformat(r["timestamp"]).astimezone(TZ).strftime("%d.%m %H:%M")
        sign = "‚ûï" if r["amount"] > 0 else "‚ûñ"
        text_lines.append(f"{r['short_id']}. {dt} {sign}{abs(r['amount'])}‚ÇΩ ‚Äî {r['note']}")
    bot.send_message(msg.chat.id, "\n".join(text_lines))

@bot.message_handler(commands=["—Å–±—Ä–æ—Å"])
def cmd_reset(msg):
    if str(msg.from_user.id) != OWNER_ID:
        bot.send_message(msg.chat.id, "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return
    confirm = types.InlineKeyboardMarkup()
    confirm.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–±—Ä–æ—Å", callback_data="reset_confirm"))
    bot.send_message(msg.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?", reply_markup=confirm)

@bot.callback_query_handler(func=lambda call: call.data == "reset_confirm")
def cb_reset(call):
    if str(call.from_user.id) != OWNER_ID:
        return
    d = default_data()
    d["forward_targets"] = [OWNER_ID]
    save_data(d)
    bot.edit_message_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã!", call.message.chat.id, call.message.message_id)

# --------------------------------------------
# –°–æ–æ–±—â–µ–Ω–∏—è
# --------------------------------------------
@bot.message_handler(func=lambda m: True, content_types=["text"])
def handle_text(msg):
    handle_record(msg.chat.id, msg.text, msg.from_user.id)

# --------------------------------------------
# Flask webhook
# --------------------------------------------
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–≤–µ—Ä—Å–∏—è {VERSION}) –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å webhook."

# --------------------------------------------
# –ó–∞–ø—É—Å–∫
# --------------------------------------------
if __name__ == "__main__":
    print("=== BOT STARTED (–≤–µ—Ä—Å–∏—è 9.6.1.1-clean) ===")
    print(f"Token: {'OK' if TOKEN else 'MISSING'}")
    print(f"Owner ID: {OWNER_ID}")
    print("Webhook ready.")
    bot.send_message(OWNER_ID, f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–≤–µ—Ä—Å–∏—è {VERSION})")
    app.run(host="0.0.0.0", port=PORT)

# --------------------------------------------
# –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: 475
# --------------------------------------------