# ------------------------------------------------------------
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª ‚Äî –≤–µ—Ä—Å–∏—è 9.8.1
# –ü–æ–ª–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è Render (Flask + Webhook)
# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –ø–µ—Ä–µ—Å—ã–ª–∫–∞, –æ—Ç—á—ë—Ç—ã, –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã
# ------------------------------------------------------------

import os
import json
import csv
from datetime import datetime
from zoneinfo import ZoneInfo
from flask import Flask, request
import telebot
from telebot import types

# ------------------------------------------------------------
# –ù–ê–°–¢–†–û–ô–ö–ò
# ------------------------------------------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID", "0"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ø—Ä–∏–º–µ—Ä: https://fo-1.onrender.com
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
PORT = int(os.environ.get("PORT", 5000))
TZ = ZoneInfo("America/Argentina/Catamarca")

if not TOKEN or not WEBHOOK_URL:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏ WEBHOOK_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã!")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

VERSION = "9.8.1"

# ------------------------------------------------------------
# –§–£–ù–ö–¶–ò–ò –•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–•
# ------------------------------------------------------------

def default_data():
    return {
        "overall_balance": 0,
        "records": [],            # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
        "next_id": 1,
        "forward_targets": [],    # ID —á–∞—Ç–æ–≤, –∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
    }

def load_data():
    if not os.path.exists(DATA_FILE):
        save_data(default_data())
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

# ------------------------------------------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï
# ------------------------------------------------------------

def export_to_csv():
    with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["ID", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
        for r in data["records"]:
            writer.writerow([r["id"], r["timestamp"], r["amount"], r["note"]])

def format_record(rec):
    sign = "‚ûï" if rec["amount"] > 0 else "‚ûñ"
    return f"{sign} {rec['amount']} ‚Äî {rec['note']} ({rec['timestamp']})"

# ------------------------------------------------------------
# –ö–û–ú–ê–ù–î–´
# ------------------------------------------------------------

@bot.message_handler(commands=["start"])
def start(message):
    bot.reply_to(
        message,
        f"üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª (–≤–µ—Ä—Å–∏—è {VERSION}).\n"
        f"–î–æ–±–∞–≤–ª—è–π –∑–∞–ø–∏—Å–∏ –≤–∏–¥–∞:\n\n"
        f"  +1000 –∑–∞—Ä–ø–ª–∞—Ç–∞\n"
        f"  -200 —Ö–ª–µ–±\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã:\n"
        f"/–±–∞–ª–∞–Ω—Å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        f"/–æ—Ç—á–µ—Ç ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π\n"
        f"/—ç–∫—Å–ø–æ—Ä—Ç ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ CSV\n"
        f"/—Å–±—Ä–æ—Å ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
        f"/addforward ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É\n"
        f"/removeforward ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É\n"
        f"/listforwards ‚Äî —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Å—ã–ª–æ–∫"
    )

@bot.message_handler(commands=["–±–∞–ª–∞–Ω—Å"])
def cmd_balance(message):
    bot.reply_to(message, f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {data['overall_balance']}")

@bot.message_handler(commands=["–æ—Ç—á–µ—Ç"])
def cmd_report(message):
    if not data["records"]:
        bot.reply_to(message, "üìÑ –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    text = "\n".join(format_record(r) for r in data["records"][-20:])
    bot.reply_to(message, f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n\n{text}")

@bot.message_handler(commands=["—ç–∫—Å–ø–æ—Ä—Ç"])
def cmd_export(message):
    export_to_csv()
    with open(CSV_FILE, "rb") as f:
        bot.send_document(message.chat.id, f, caption="–≠–∫—Å–ø–æ—Ä—Ç CSV –≤—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ")

@bot.message_handler(commands=["—Å–±—Ä–æ—Å"])
def cmd_reset(message):
    if message.from_user.id != OWNER_ID:
        bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return
    save_data(default_data())
    global data
    data = load_data()
    bot.reply_to(message, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã.")

# ------------------------------------------------------------
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ï–†–ï–°–´–õ–ö–û–ô
# ------------------------------------------------------------

@bot.message_handler(commands=["addforward"])
def add_forward(message):
    if message.from_user.id != OWNER_ID:
        bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π.")
        return
    if not message.reply_to_message:
        bot.reply_to(message, "üîÅ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É.")
        return
    target_id = message.reply_to_message.chat.id
    if target_id not in data["forward_targets"]:
        data["forward_targets"].append(target_id)
        save_data(data)
        bot.reply_to(message, f"‚úÖ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ —á–∞—Ç {target_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    else:
        bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")

@bot.message_handler(commands=["removeforward"])
def remove_forward(message):
    if message.from_user.id != OWNER_ID:
        bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π.")
        return
    if not message.reply_to_message:
        bot.reply_to(message, "üóë –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    target_id = message.reply_to_message.chat.id
    if target_id in data["forward_targets"]:
        data["forward_targets"].remove(target_id)
        save_data(data)
        bot.reply_to(message, f"‚úÖ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ —á–∞—Ç {target_id} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.")

@bot.message_handler(commands=["listforwards"])
def list_forwards(message):
    if not data["forward_targets"]:
        bot.reply_to(message, "üì≠ –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Å—ã–ª–æ–∫ –ø—É—Å—Ç.")
        return
    text = "\n".join(str(cid) for cid in data["forward_targets"])
    bot.reply_to(message, f"üì§ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n{text}")

# ------------------------------------------------------------
# –û–ë–†–ê–ë–û–¢–ö–ê –î–û–•–û–î–û–í –ò –†–ê–°–•–û–î–û–í
# ------------------------------------------------------------

@bot.message_handler(func=lambda m: re.match(r"^[\+\-]?\d+", m.text.strip()))
def add_record(message):
    text = message.text.strip()
    sign = 1 if text.startswith("+") else -1 if text.startswith("-") else None
    num_match = re.match(r"^[\+\-]?(\d+)", text)
    if not num_match:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É.")
        return

    amount = int(num_match.group(1)) * (sign if sign else 1)
    note = text[num_match.end():].strip() or "(–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)"

    new_record = {
        "id": data["next_id"],
        "timestamp": datetime.now(TZ).strftime("%Y-%m-%d %H:%M:%S"),
        "amount": amount,
        "note": note,
    }
    data["next_id"] += 1
    data["records"].append(new_record)
    data["overall_balance"] += amount
    save_data(data)

    bot.reply_to(message, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {format_record(new_record)}")
    for target in data["forward_targets"]:
        try:
            bot.forward_message(target, message.chat.id, message.message_id)
        except Exception:
            pass

# -------------------------
# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV
# -------------------------
import csv
from datetime import datetime
from io import StringIO
import os

@bot.message_handler(commands=['—ç–∫—Å–ø–æ—Ä—Ç'])
def export_csv(message):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤ CSV (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É)"""
    user_id = str(message.from_user.id)
    if str(message.from_user.id) != str(OWNER_ID):
        bot.reply_to(message, "‚õîÔ∏è –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return

    if not data["records"]:
        bot.reply_to(message, "üìÇ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    # –ò–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
    date_str = datetime.now(TZ).strftime("%Y-%m-%d_%H-%M")
    csv_filename = f"data_{date_str}.csv"

    # –°–æ–∑–¥–∞–Ω–∏–µ CSV –≤ –ø–∞–º—è—Ç–∏
    output = StringIO()
    writer = csv.writer(output)
    writer.writerow(["ID", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])

    for rec in data["records"]:
        dt = datetime.fromisoformat(rec["timestamp"]).strftime("%Y-%m-%d %H:%M:%S")
        writer.writerow([rec["short_id"], dt, rec["amount"], rec["note"]])

    csv_content = output.getvalue()
    output.close()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    with open(csv_filename, "w", encoding="utf-8", newline="") as f:
        f.write(csv_content)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É
    with open(csv_filename, "rb") as f:
        bot.send_document(
            message.chat.id,
            f,
            caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω.\n–§–∞–π–ª: {csv_filename}"
        )

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö CSV (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    for file in os.listdir():
        if file.startswith("data_") and file.endswith(".csv") and file != csv_filename:
            try:
                os.remove(file)
            except Exception:
                pass

# ------------------------------------------------------------
# FLASK ‚Äî WEBHOOK
# ------------------------------------------------------------

@app.route("/" + TOKEN, methods=["POST"])
def receive_update():
    update = telebot.types.Update.de_json(request.data.decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return f"ü§ñ –ë–æ—Ç ¬´–§–û¬ª v{VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

# ------------------------------------------------------------
# –ê–í–¢–û-–£–°–¢–ê–ù–û–í–ö–ê WEBHOOK
# ------------------------------------------------------------
def set_webhook():
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/{TOKEN}")

set_webhook()
print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/{TOKEN}")
print(f"üöÄ –ë–æ—Ç ¬´–§–û¬ª v{VERSION} –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=PORT)

# ------------------------------------------------------------
# –ö–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫: 310
# ------------------------------------------------------------