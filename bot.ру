# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.6.1.4
# Forward: only OWNER -> forward_targets
# Added commands: /myid, /chatid
# ============================================

import os
import json
import csv
import logging
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

# --------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# --------------------------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")  # –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ)
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.6.1.4"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# --------------------------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ñ–∞–π–ª + stdout)
# --------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)

def log_info(msg):
    logging.info(msg)

def log_error(msg):
    logging.error(msg)

# –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–ø–∏—Å—å –æ —Å—Ç–∞—Ä—Ç–µ
log_info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

# --------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
# --------------------------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "active_messages": {},
        "next_id": 1,
        "sent_messages": [],
        "forward_targets": []  # —Å–ø–∏—Å–æ–∫ chat_id (int)
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ data.json: {e}")
            d = default_data()
    else:
        d = default_data()
    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏
    for k, v in default_data().items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["ID", "short_id", "timestamp", "amount", "note", "owner"])
            for r in d.get("records", []):
                writer.writerow([r.get("id"), r.get("short_id"), r.get("timestamp"), r.get("amount"), r.get("note"), r.get("owner")])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")

data = load_data()

# –µ—Å–ª–∏ OWNER_ID –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ ‚Äî —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ forward_targets
if OWNER_ID:
    try:
        owner_int = int(OWNER_ID)
    except Exception:
        owner_int = None
    if owner_int is not None and owner_int not in data["forward_targets"]:
        data["forward_targets"].append(owner_int)
        save_data(data)

# --------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# --------------------------------------------
def parse_transaction(text):
    """
    –û–∂–∏–¥–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç: +1000 comment –∏–ª–∏ -500 comment
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (int amount, str note) –∏–ª–∏ (None, None) –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–æ—Å—å.
    """
    if not text:
        return None, None
    s = text.strip()
    if s[0] not in "+-":
        return None, None
    parts = s.split(None, 1)
    try:
        amount = int(parts[0])
    except Exception:
        return None, None
    note = parts[1].strip() if len(parts) > 1 else ""
    return amount, note

def add_record(amount, note, user_id):
    ts = datetime.now(TZ).isoformat()
    rid = data.get("next_id", 1)
    rec = {
        "id": rid,
        "short_id": f"R{rid}",
        "timestamp": ts,
        "amount": amount,
        "note": note,
        "owner": user_id
    }
    data.setdefault("records", []).append(rec)
    data["overall_balance"] = data.get("overall_balance", 0) + amount
    data["next_id"] = rid + 1
    save_data(data)
    export_to_csv(data)
    if amount >= 0:
        log_info(f"INCOME: +{amount} {note}")
    else:
        log_info(f"EXPENSE: {amount} {note}")
    return rec

# --------------------------------------------
# –ö–æ–º–∞–Ω–¥—ã: /start (–ª–∞—Ç–∏–Ω–∏—Ü–∞), /myid, /chatid, /balance, /report, /reset
# --------------------------------------------
@bot.message_handler(commands=["start"])
def cmd_start(msg):
    text = (
        "Welcome to Financial Bot üí∞\n\n"
        "Commands:\n"
        "/start ‚Äì Show this help message\n"
        "/myid ‚Äì Show your user ID\n"
        "/chatid ‚Äì Show current chat ID\n"
        "/balance ‚Äì Show current balance\n"
        "/report ‚Äì Show last transactions\n"
        "/reset ‚Äì Clear all data (owner only)\n"
        "/addforward <chat_id> ‚Äì Add forwarding target (owner only)\n"
        "/removeforward <chat_id> ‚Äì Remove forwarding target (owner only)\n"
        "/listforwards ‚Äì List forwarding targets\n\n"
        "To record a transaction send: +1000 sale  or  -500 fuel\n"
    )
    bot.send_message(msg.chat.id, text)

@bot.message_handler(commands=["myid"])
def cmd_myid(msg):
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É
    uid = msg.from_user.id
    bot.reply_to(msg, f"üÜî Your user ID: {uid}")

@bot.message_handler(commands=["chatid"])
def cmd_chatid(msg):
    cid = msg.chat.id
    bot.reply_to(msg, f"üí¨ Current chat ID: {cid}")

@bot.message_handler(commands=["balance", "–±–∞–ª–∞–Ω—Å"])
def cmd_balance(msg):
    bot.reply_to(msg, f"üí∞ Balance: {data.get('overall_balance',0)} ‚ÇΩ")

@bot.message_handler(commands=["report", "–æ—Ç—á–µ—Ç"])
def cmd_report(msg):
    recs = data.get("records", [])
    if not recs:
        bot.send_message(msg.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.")
        return
    text_lines = ["üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:"]
    for r in recs[-20:]:
        sign = "+" if r["amount"] > 0 else ""
        text_lines.append(f"{r['short_id']}: {sign}{r['amount']} ‚Äî {r.get('note','')}")
    bot.send_message(msg.chat.id, "\n".join(text_lines))

@bot.message_handler(commands=["reset", "—Å–±—Ä–æ—Å"])
def cmd_reset(msg):
    if OWNER_ID is None or str(msg.from_user.id) != str(OWNER_ID):
        bot.send_message(msg.chat.id, "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return
    global data
    data = default_data()
    # –¥–æ–±–∞–≤–∏–º OWNER_ID –≤ forward_targets —Å–Ω–æ–≤–∞
    try:
        if OWNER_ID:
            data["forward_targets"].append(int(OWNER_ID))
    except Exception:
        pass
    save_data(data)
    export_to_csv(data)
    bot.send_message(msg.chat.id, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.")
    log_info("DATA RESET by owner")

# --------------------------------------------
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π (owner only)
# --------------------------------------------
@bot.message_handler(commands=["addforward"])
def cmd_addforward(msg):
    if OWNER_ID is None or str(msg.from_user.id) != str(OWNER_ID):
        return
    parts = msg.text.split()
    if len(parts) < 2:
        bot.reply_to(msg, "Usage: /addforward <chat_id>")
        return
    try:
        cid = int(parts[1])
    except Exception:
        bot.reply_to(msg, "Invalid chat_id (must be integer).")
        return
    if cid in data["forward_targets"]:
        bot.reply_to(msg, "This chat is already in forwarding list.")
        return
    data["forward_targets"].append(cid)
    save_data(data)
    bot.reply_to(msg, f"‚úÖ Forward target added: {cid}")
    log_info(f"FORWARD ADD: {cid}")

@bot.message_handler(commands=["removeforward"])
def cmd_removeforward(msg):
    if OWNER_ID is None or str(msg.from_user.id) != str(OWNER_ID):
        return
    parts = msg.text.split()
    if len(parts) < 2:
        bot.reply_to(msg, "Usage: /removeforward <chat_id>")
        return
    try:
        cid = int(parts[1])
    except Exception:
        bot.reply_to(msg, "Invalid chat_id (must be integer).")
        return
    if cid not in data["forward_targets"]:
        bot.reply_to(msg, "This chat is not in forwarding list.")
        return
    data["forward_targets"].remove(cid)
    save_data(data)
    bot.reply_to(msg, f"‚úÖ Forward target removed: {cid}")
    log_info(f"FORWARD REMOVE: {cid}")

@bot.message_handler(commands=["listforwards"])
def cmd_listforwards(msg):
    if not data["forward_targets"]:
        bot.reply_to(msg, "Forwarding list is empty.")
        return
    text = "üì® Forward targets:\n" + "\n".join(map(str, data["forward_targets"]))
    bot.reply_to(msg, text)

# --------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞
# --------------------------------------------
@bot.message_handler(func=lambda m: True, content_types=["text", "photo", "document", "voice", "video", "audio", "sticker"])
def handle_message(msg):
    """
    –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª OWNER_ID.
    –¢–∞–∫–∂–µ, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å.
    """
    # –ï—Å–ª–∏ from_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ message –æ—Ç –±–æ—Ç–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if not getattr(msg, "from_user", None):
        return
    if msg.from_user.is_bot:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî —Ç–æ–ª—å–∫–æ OWNER_ID —Ä–∞–∑—Ä–µ—à—ë–Ω –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å
    if OWNER_ID is None:
        # –µ—Å–ª–∏ OWNER_ID –Ω–µ –∑–∞–¥–∞–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
        pass
    else:
        try:
            owner_int = int(OWNER_ID)
        except Exception:
            owner_int = None
        # –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ ‚Äî –±—É–¥–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ targets
        is_from_owner = (owner_int is not None and msg.from_user.id == owner_int)
        # –∏–Ω–∞—á–µ ‚Äî –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
        if not is_from_owner:
            # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞, –Ω–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç ‚Äî –º–æ–∂–µ–º —É—á–µ—Å—Ç—å –∫–∞–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?
            # –ø–æ –∑–∞–¥–∞–Ω–∏—é: —É—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–æ–ª–∂–µ–Ω –≤–µ—Å—Ç–∏—Å—å ‚Äî –ø–æ—ç—Ç–æ–º—É –ø–æ–∑–≤–æ–ª—è–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏ –æ—Ç –ª—é–±–æ–≥–æ,
            # –Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞. (–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–Ω–∞—á–µ ‚Äî –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∏–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤.
            pass

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π) ‚Äî —É—á—ë—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞
    if msg.content_type == "text" and msg.text:
        amount, note = parse_transaction(msg.text)
        if amount is not None:
            rec = add_record(amount, note, msg.from_user.id)
            bot.reply_to(msg, f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} {note}\n–ë–∞–ª–∞–Ω—Å: {data.get('overall_balance',0)} ‚ÇΩ")

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if OWNER_ID:
        try:
            owner_int = int(OWNER_ID)
        except Exception:
            owner_int = None
        if owner_int is not None and msg.from_user.id == owner_int:
            # –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–∂–¥—ã–π target, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            for target in data.get("forward_targets", []):
                try:
                    if int(target) == owner_int:
                        continue
                    # copy_message —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–∏–¥ (–±–µ–∑ "forwarded from")
                    bot.copy_message(chat_id=int(target), from_chat_id=msg.chat.id, message_id=msg.message_id)
                    log_info(f"FORWARD: owner message copied to {target}")
                except Exception as e:
                    log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ {target}: {e}")

# --------------------------------------------
# Flask webhook endpoints
# --------------------------------------------
@app.route("/", methods=["GET"])
def index():
    return f"Bot version {VERSION} running."

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    try:
        # read and process update
        raw = request.stream.read().decode("utf-8")
        update = telebot.types.Update.de_json(raw)
        bot.process_new_updates([update])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
    return "ok", 200

# --------------------------------------------
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
# --------------------------------------------
import requests

def ensure_webhook():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
    try:
        webhook_url = f"https://fo-1.onrender.com/{TOKEN}"
        info = requests.get(f"https://api.telegram.org/bot{TOKEN}/getWebhookInfo").json()
        current = info.get("result", {}).get("url", "")
        if current != webhook_url:
            r = requests.get(f"https://api.telegram.org/bot{TOKEN}/setWebhook?url={webhook_url}")
            if r.json().get("ok"):
                log_info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            else:
                log_error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {r.text}")
        else:
            log_info("Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook: {e}")

# --------------------------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# --------------------------------------------
if __name__ == "__main__":
    ensure_webhook()  # <-- —Ç–µ–ø–µ—Ä—å webhook —Å—Ç–∞–≤–∏—Ç—Å—è —Å–∞–º
    log_info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–≤–µ—Ä—Å–∏—è {VERSION})")
    app.run(host="0.0.0.0", port=PORT)
