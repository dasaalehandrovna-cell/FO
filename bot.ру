# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç (–≤–µ—Ä—Å–∏—è 9.6.1.8)
# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã:
#  - –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞–ª–∏ –≤ –æ–¥–Ω–æ–º –æ–∫–Ω–µ,
#  - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ,
#  - –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É.
# ============================================

import os
import json
import csv
import logging
import re
import threading
import time
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from telebot import types
from flask import Flask, request

# -----------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# -----------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
APP_URL = os.getenv("APP_URL", "https://fo-1.onrender.com")
PORT = int(os.environ.get("PORT", 5000))
TZ = ZoneInfo("America/Argentina/Catamarca")

if not TOKEN:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"

logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# -----------------------------
# –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
# -----------------------------
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {
        "chats": {},
        "overall_balance": 0,
        "next_id": 1,
        "active_messages": {},
        "tracked_messages": {},
        "records": []
    }

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

# -----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------
def get_today():
    return datetime.now(TZ).strftime("%Y-%m-%d")

def get_chat(chat_id):
    cid = str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid] = {
            "balance": 0,
            "records": [],
            "daily_records": {}
        }
        save_data()
    return data["chats"][cid]

def set_active_window(chat_id, msg_id):
    today = get_today()
    data["active_messages"].setdefault(today, {})[str(chat_id)] = msg_id
    save_data()

def get_active_window(chat_id):
    today = get_today()
    return data.get("active_messages", {}).get(today, {}).get(str(chat_id))

# -----------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -----------------------------
def build_main_keyboard(chat_id=None):
    kb = types.InlineKeyboardMarkup(row_width=3)
    kb.row(
        types.InlineKeyboardButton("üí∞ –±–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
        types.InlineKeyboardButton("üìä –æ—Ç—á—ë—Ç", callback_data="btn_report"),
        types.InlineKeyboardButton("‚úèÔ∏è –∏–∑–º–µ–Ω–∏—Ç—å", callback_data="btn_edit")
    )
    kb.row(
        types.InlineKeyboardButton("‚öôÔ∏è –æ–±–Ω—É–ª–∏—Ç—å", callback_data="btn_reset"),
        types.InlineKeyboardButton("‚ÑπÔ∏è", callback_data="btn_info")
    )
    bal = 0
    if chat_id:
        bal = get_chat(chat_id)["balance"]
    kb.add(types.InlineKeyboardButton(f"üí∞ {bal} ARS", callback_data="noop"))
    return kb

# -----------------------------
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞
# -----------------------------
def update_window(chat_id):
    today = get_today()
    chat = get_chat(chat_id)
    recs =
