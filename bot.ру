# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.8.4
# –ò–∑–º–µ–Ω—ë–Ω: –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –æ–∫–Ω–∞, –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# ID –≤ –ø–∞–º—è—Ç–∏: Code_002
# ============================================

import os
import json
import csv
import logging
import re
import threading
import time
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")  # —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º
APP_URL = os.getenv("APP_URL", "https://yourapp.onrender.com")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.8.4"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -----------------------------
# –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
# -----------------------------
def schedule_auto_delete(chat_id, message_id, delay=30):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ delay —Å–µ–∫—É–Ω–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)."""
    def delete_later():
        time.sleep(delay)
        try:
            bot.delete_message(chat_id, message_id)
        except Exception:
            pass
    threading.Thread(target=delete_later, daemon=True).start()

# -----------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[logging.FileHandler(LOG_FILE, encoding="utf-8"), logging.StreamHandler()]
)

def log_info(msg):
    logging.info(msg)
def log_error(msg):
    logging.error(msg)

log_info(f"–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–µ—Ä—Å–∏—è {VERSION}")

# -----------------------------
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ IO
# -----------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "chats": {},
        "active_messages": {},
        "processed_messages": [],
        "forward_targets": [],
        "tracked_messages": {},
        "next_id": 1
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except:
            d = default_data()
    else:
        d = default_data()
    base = default_data()
    for k, v in base.items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

data = load_data()

if OWNER_ID:
    try:
        oi = int(OWNER_ID)
        if oi not in data.get("forward_targets", []):
            data["forward_targets"].append(oi)
            save_data(data)
    except Exception:
        pass

# -----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
# -----------------------------
def get_today_key():
    return datetime.now(TZ).strftime("%Y-%m-%d")

def get_chat_store(chat_id):
    cid = str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid] = {
            "balance": 0,
            "records": [],
            "next_id": 1,
            "daily_records": {},
            "active_windows": {},
            "edit_wait": None,
            "edit_target": None,
            "forward_enabled": False
        }
        save_data(data)
    return data["chats"][cid]

def set_today_active_window(chat_id, message_id):
    today = get_today_key()
    if "active_messages" not in data:
        data["active_messages"] = {}
    if today not in data["active_messages"]:
        data["active_messages"][today] = {}
    data["active_messages"][today][str(chat_id)] = message_id
    save_data(data)

# -----------------------------
# –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –æ–∫–Ω–∞
# -----------------------------
def duplicate_and_delete_window(chat_id, old_message_id):
    """–î—É–±–ª–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ –∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä–æ–µ —á–µ—Ä–µ–∑ 0.5 —Å–µ–∫—É–Ω–¥—ã."""
    try:
        store = get_chat_store(chat_id)
        today_key = get_today_key()
        day_records = store.get("daily_records", {}).get(today_key, [])

        daily_income = sum(r["amount"] for r in day_records if r["amount"] > 0)
        daily_expense = sum(r["amount"] for r in day_records if r["amount"] < 0)
        overall_balance = store.get("balance", 0)

        if not day_records:
            text = (
                f"üìÖ {today_key}\n"
                f"–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.\n"
                f"üíµ –ü—Ä–∏—Ö–æ–¥: {daily_income} ARS\n"
                f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(daily_expense)} ARS\n"
                f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS"
            )
        else:
            lines = [f"üìÖ {today_key}", "üìã –û–ø–µ—Ä–∞—Ü–∏–∏:"]
            for r in day_records[-50:]:
                sign = "+" if r["amount"] > 0 else "-"
                lines.append(f"{r['short_id']}: {sign}{abs(r['amount'])} ‚Äî {r.get('note','')}")
            lines.append(
                f"\nüíµ –ü—Ä–∏—Ö–æ–¥: {daily_income} ARS\n"
                f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(daily_expense)} ARS\n"
                f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS"
            )
            text = "\n".join(lines)

        kb = build_main_keyboard(chat_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent = bot.send_message(chat_id, text, reply_markup=kb)
        set_today_active_window(chat_id, sent.message_id)

        # –ß–µ—Ä–µ–∑ 0.5 —Å —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
        def delete_old():
            try:
                bot.delete_message(chat_id, old_message_id)
            except Exception:
                pass
        threading.Timer(0.5, delete_old).start()

    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ duplicate_and_delete_window: {e}")

# -----------------------------
# –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø–∏—Å—è–º–∏
# -----------------------------
def add_record_to_chat(chat_id, amount, note, owner):
    store = get_chat_store(chat_id)
    rid = data.get("next_id", 1)
    rec = {"id": rid, "short_id": f"R{rid}", "timestamp": datetime.now(TZ).isoformat(timespec="seconds"), "amount": amount, "note": note, "owner": owner}
    data.setdefault("records", []).append(rec)
    store.setdefault("records", []).append(rec)
    day = get_today_key()
    store.setdefault("daily_records", {}).setdefault(day, []).append(rec)
    store["balance"] = store.get("balance", 0) + amount
    data["overall_balance"] = data.get("overall_balance", 0) + amount
    data["next_id"] = rid + 1
    save_data(data)
    try:
        export_to_csv(data)
    except:
        pass
    try:
        if store.get("forward_enabled") and OWNER_ID:
            bot.send_message(int(OWNER_ID), f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ —á–∞—Ç–∞ {chat_id}: {rec['short_id']} {rec['amount']} ‚Äî {rec['note']}")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
    return rec

def update_record_in_chat(chat_id, rid, new_amount, new_note, user=None):
    store = get_chat_store(chat_id)
    found = None
    for r in store.get("records", []):
        if r["id"] == rid:
            old = r.copy()
            r["amount"] = new_amount
            r["note"] = new_note
            found = r
            break
    if found:
        for day_recs in store.get("daily_records", {}).values():
            for r in day_recs:
                if r["id"] == rid:
                    r.update(found)
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data(data)
        export_to_csv(data)
        user_repr = f"{user.id}/{user.username}" if user else "unknown"
        log_info(f"Edit by {user_repr}: R{rid} -> amount={new_amount}, note='{new_note}'")
        return True, found
    return False, None

def delete_record_in_chat(chat_id, rid, user=None):
    store = get_chat_store(chat_id)
    removed = None
    for r in list(store.get("records", [])):
        if r["id"] == rid or str(r["id"]) == str(rid) or r.get("short_id") == f"R{rid}":
            removed = r
            store["records"].remove(r)
            break
    if removed:
        for day_key, recs in store.get("daily_records", {}).items():
            store["daily_records"][day_key] = [x for x in recs if x["id"] != rid]
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        data["records"] = [x for x in data.get("records", []) if x["id"] != rid]
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data(data)
        export_to_csv(data)
        user_repr = f"{user.id}/{user.username}" if user else "unknown"
        log_info(f"Delete by {user_repr}: R{rid}")
        return True, removed
    return False, None

def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["ID", "Timestamp", "Amount", "Note", "Owner"])
            for r in d.get("records", []):
                writer.writerow([r["short_id"], r["timestamp"], r["amount"], r["note"], r["owner"]])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV: {e}")

# -----------------------------
# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -----------------------------
def build_main_keyboard(chat_id, confirm_reset=False):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="show_balance"))
    kb.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_record"))
    kb.add(types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="info"))
    if confirm_reset:
        kb.add(types.InlineKeyboardButton("–û–±–Ω—É–ª–∏—Ç—å ‚úÖ", callback_data="reset_confirm"))
        kb.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="reset_cancel"))
    return kb

# -----------------------------
# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞
# -----------------------------
def update_or_send_today_window(chat_id):
    store = get_chat_store(chat_id)
    today_key = get_today_key()
    day_records = store.get("daily_records", {}).get(today_key, [])

    daily_income = sum(r["amount"] for r in day_records if r["amount"] > 0)
    daily_expense = sum(r["amount"] for r in day_records if r["amount"] < 0)
    overall_balance = store.get("balance", 0)

    if not day_records:
        text = (
            f"üìÖ {today_key}\n"
            f"–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.\n"
            f"üíµ –ü—Ä–∏—Ö–æ–¥: {daily_income} ARS\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(daily_expense)} ARS\n"
            f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS"
        )
    else:
        lines = [f"üìÖ {today_key}", "üìã –û–ø–µ—Ä–∞—Ü–∏–∏:"]
        for r in day_records[-50:]:
            sign = "+" if r["amount"] > 0 else "-"
            lines.append(f"{r['short_id']}: {sign}{abs(r['amount'])} ‚Äî {r.get('note','')}")
        lines.append(
            f"\nüíµ –ü—Ä–∏—Ö–æ–¥: {daily_income} ARS\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(daily_expense)} ARS\n"
            f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS"
        )
        text = "\n".join(lines)

    kb = build_main_keyboard(chat_id)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
    msg_id = store.get("edit_target") or data.get("active_messages", {}).get(get_today_key(), {}).get(str(chat_id))
    if msg_id:
        try:
            bot.edit_message_text(text, chat_id, msg_id, reply_markup=kb)
            # –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –¥—É–±–ª–∏—Ä—É–µ–º –æ–∫–Ω–æ
            threading.Timer(2, duplicate_and_delete_window, args=(chat_id, msg_id)).start()
        except Exception:
            sent = bot.send_message(chat_id, text, reply_markup=kb)
            store["edit_target"] = sent.message_id
            set_today_active_window(chat_id, sent.message_id)
    else:
        sent = bot.send_message(chat_id, text, reply_markup=kb)
        store["edit_target"] = sent.message_id
        set_today_active_window(chat_id, sent.message_id)

# -----------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# -----------------------------
@bot.message_handler(commands=["start"])
def cmd_start(message):
    chat_id = message.chat.id
    update_or_send_today_window(chat_id)

@bot.message_handler(commands=["reset"])
def cmd_reset(message):
    chat_id = message.chat.id
    kb = build_main_keyboard(chat_id, confirm_reset=True)
    msg = bot.send_message(chat_id, "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?", reply_markup=kb)
    schedule_auto_delete(chat_id, msg.message_id)

# -----------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞
# -----------------------------
@bot.message_handler(func=lambda m: True)
def handle_text(message):
    chat_id = message.chat.id
    note = message.text.strip()
    rec = add_record_to_chat(chat_id, 0, note, message.from_user.id)
    update_or_send_today_window(chat_id)
    schedule_auto_delete(chat_id, message.message_id)

# -----------------------------
# Flask Webhook
# -----------------------------
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "", 200

@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç."

# -----------------------------
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook
# -----------------------------
bot.remove_webhook()
bot.set_webhook(url=f"{APP_URL}/{TOKEN}")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=PORT)