# ===========================================
# 1. –ò–º–ø–æ—Ä—Ç—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ===========================================
import os, json, time, re, threading
from datetime import datetime
from flask import Flask, request
import telebot
import csv
from telebot import types

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.environ.get("BOT_TOKEN")  # ‚Üê —Ç–≤–æ—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
APP_URL = "https://yourapp.onrender.com"  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π URL Render
PORT = int(os.environ.get("PORT", 5000))
VERSION = "v3.5"

OWNER_ID = os.environ.get("OWNER_ID", None)

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

DATA_FILE = "data.json"
CSV_FILE = "data.csv"
data = {"chats": {}}

# ===========================================
# 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
# ===========================================
def load_data():
    global data
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = {"chats": {}}

def save_data(d):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

load_data()

# ===========================================
# 3. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ===========================================
def get_chat_store(chat_id):
    sid = str(chat_id)
    if sid not in data["chats"]:
        data["chats"][sid] = {
            "balance": 0,
            "records": [],
            "next_id": 1,
            "daily_records": {},
            "active_windows": {},
            "edit_wait": None,
            "edit_target": None,
            "forward_target": None
        }
    return data["chats"][sid]

def get_today_key():
    return datetime.now().strftime("%Y-%m-%d")

def format_amount(v):
    s = f"{v:,.2f}".replace(",", " ").replace(".00", "")
    return f"+{s}" if v > 0 else f"{s}"

def log_info(msg): print(f"[INFO] {msg}")
def log_error(msg): print(f"[ERROR] {msg}")

# ===========================================
# 4. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –æ–∫–Ω–∞
# ===========================================
def build_main_keyboard(chat_id, confirm_reset=False):
    kb = types.InlineKeyboardMarkup()
    kb.row(types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report"),
           types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"))
    kb.row(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="btn_edit"),
           types.InlineKeyboardButton("‚ôªÔ∏è –û–±–Ω—É–ª–∏—Ç—å", callback_data="btn_reset"))
    kb.row(types.InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="export_csv"),
           types.InlineKeyboardButton("üîÅ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="btn_update"))
    kb.row(types.InlineKeyboardButton("üì° –ü–µ—Ä–µ—Å—ã–ª–∫–∞", callback_data="btn_forward"))
    if confirm_reset:
        kb.row(types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_reset"),
               types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_reset"))
    return kb

def update_or_send_today_window(chat_id, extra_text=None):
    store = get_chat_store(chat_id)
    today = get_today_key()
    records = store.get("daily_records", {}).get(today, [])
    total = sum(r["amount"] for r in records)
    inc = sum(r["amount"] for r in records if r["amount"] > 0)
    exp = sum(r["amount"] for r in records if r["amount"] < 0)
    text = (f"üìÖ {today}\n"
            f"–ü—Ä–∏—Ö–æ–¥: {format_amount(inc)}\n"
            f"–†–∞—Å—Ö–æ–¥: {format_amount(exp)}\n"
            f"–û—Å—Ç–∞—Ç–æ–∫ –¥–Ω—è: {format_amount(total)}\n"
            f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {format_amount(store['balance'])}")
    if extra_text:
        text += f"\n\n{extra_text}"

    kb = build_main_keyboard(chat_id)
    msg_id = store.get("active_windows", {}).get("main")
    if msg_id:
        try:
            bot.edit_message_text(text, chat_id, msg_id, reply_markup=kb)
        except:
            m = bot.send_message(chat_id, text, reply_markup=kb)
            store["active_windows"]["main"] = m.message_id
    else:
        m = bot.send_message(chat_id, text, reply_markup=kb)
        store["active_windows"]["main"] = m.message_id
    save_data(data)

# ===========================================
# 5. –†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π –∏ CSV
# ===========================================
def export_to_csv(d):
    with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["chat_id", "record_id", "date", "amount", "type"])
        for sid, store in d["chats"].items():
            for rec in store["records"]:
                writer.writerow([sid, rec["id"], rec["date"], rec["amount"], rec["type"]])
    log_info("CSV –æ–±–Ω–æ–≤–ª—ë–Ω")

def add_record_to_chat(chat_id, amount):
    store = get_chat_store(chat_id)
    rid = store["next_id"]
    date = get_today_key()
    typ = "income" if amount > 0 else "expense"
    rec = {"id": rid, "date": date, "amount": amount, "type": typ}
    store["records"].append(rec)
    store["next_id"] += 1
    store["balance"] += amount
    store.setdefault("daily_records", {}).setdefault(date, []).append(rec)
    save_data(data)
    export_to_csv(data)
    update_or_send_today_window(chat_id, extra_text=f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {format_amount(amount)}")
    return rid

# ===========================================
# 6. –†–∞–∑–±–æ—Ä —á–∏—Å–µ–ª
# ===========================================
def parse_numbers_from_text(text):
    text = text.replace(",", ".")
    matches = re.findall(r"[-+]?\d+(?:\.\d+)?", text)
    return [float(m) for m in matches]

# ===========================================
# 7. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# ===========================================
@bot.message_handler(commands=["start"])
def start_cmd(msg):
    update_or_send_today_window(msg.chat.id, extra_text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å + –∏–ª–∏ - –¥–ª—è —É—á—ë—Ç–∞.")

@bot.message_handler(commands=["stop_forward"])
def stop_forward(msg):
    store = get_chat_store(msg.chat.id)
    store["forward_target"] = None
    update_or_send_today_window(msg.chat.id, extra_text="‚õî –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

@bot.message_handler(content_types=["text"])
def handle_text(msg):
    chat_id = msg.chat.id
    text = msg.text.strip()
    store = get_chat_store(chat_id)
    nums = parse_numbers_from_text(text)

    if nums:  # üíµ –ß–∏—Å–ª–∞ ‚Äî —ç—Ç–æ –ø—Ä–∏—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥
        for n in nums:
            add_record_to_chat(chat_id, n)
        return

    if store.get("forward_target"):
        try:
            bot.send_message(store["forward_target"], f"üì® {text}")
        except Exception as e:
            update_or_send_today_window(chat_id, extra_text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
        return

    update_or_send_today_window(chat_id, extra_text="‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ —Å—É–º–º–∞.")

# ===========================================
# 8. Callback-–∫–Ω–æ–ø–∫–∏
# ===========================================
@bot.callback_query_handler(func=lambda c: True)
def callbacks(call):
    chat_id = call.message.chat.id
    store = get_chat_store(chat_id)
    data_id = call.data

    if data_id == "btn_report":
        today = get_today_key()
        records = store.get("daily_records", {}).get(today, [])
        if not records:
            update_or_send_today_window(chat_id, "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
            return
        text = "üìã –û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å:\n\n"
        for r in records:
            sign = "+" if r["amount"] > 0 else ""
            text += f"#{r['id']} {sign}{format_amount(r['amount'])}\n"
        update_or_send_today_window(chat_id, text)
        return

    if data_id == "btn_balance":
        update_or_send_today_window(chat_id)
        return

    if data_id == "btn_edit":
        today = get_today_key()
        records = store.get("daily_records", {}).get(today, [])
        if not records:
            update_or_send_today_window(chat_id, "‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        kb = types.InlineKeyboardMarkup()
        for r in records:
            kb.row(types.InlineKeyboardButton(f"{format_amount(r['amount'])}",
                    callback_data=f"edit_{r['id']}"),
                   types.InlineKeyboardButton("‚úèÔ∏è", callback_data=f"chg_{r['id']}"),
                   types.InlineKeyboardButton("üóëÔ∏è", callback_data=f"del_{r['id']}"))
        bot.edit_message_text("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:",
                              chat_id, call.message.message_id, reply_markup=kb)
        return

    if data_id.startswith("chg_"):
        rid = int(data_id.split("_")[1])
        store["edit_target"] = rid
        store["edit_wait"] = "change_value"
        update_or_send_today_window(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ #{rid}")
        return

    if data_id.startswith("del_"):
        rid = int(data_id.split("_")[1])
        for r in list(store["records"]):
            if r["id"] == rid:
                store["balance"] -= r["amount"]
                store["records"].remove(r)
                for dr in list(store["daily_records"].get(get_today_key(), [])):
                    if dr["id"] == rid:
                        store["daily_records"][get_today_key()].remove(dr)
                save_data(data)
                export_to_csv(data)
                update_or_send_today_window(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å #{rid} —É–¥–∞–ª–µ–Ω–∞.")
                return
        update_or_send_today_window(chat_id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    if data_id == "btn_forward":
        if str(chat_id) == str(OWNER_ID):
            store["edit_wait"] = "forward_id"
            update_or_send_today_window(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏:")
        else:
            update_or_send_today_window(chat_id, "‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return

    if data_id == "btn_reset":
        kb = build_main_keyboard(chat_id, confirm_reset=True)
        bot.edit_message_text("‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?", chat_id, call.message.message_id, reply_markup=kb)
        return

    if data_id == "confirm_reset":
        data["chats"][str(chat_id)] = {
            "balance": 0, "records": [], "next_id": 1, "daily_records": {},
            "active_windows": {}, "edit_wait": None, "edit_target": None, "forward_target": None
        }
        save_data(data)
        update_or_send_today_window(chat_id, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
        return

    if data_id == "cancel_reset":
        update_or_send_today_window(chat_id, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
        return

# ===========================================
# 9. Flask webhook
# ===========================================
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª ‚Äî –≤–µ—Ä—Å–∏—è {VERSION} –∞–∫—Ç–∏–≤–µ–Ω ‚úÖ", 200

# ===========================================
# 10. –ó–∞–ø—É—Å–∫ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
# ===========================================
def set_webhook():
    url = f"{APP_URL}/{TOKEN}"
    bot.remove_webhook()
    time.sleep(0.5)
    bot.set_webhook(url=url)
    log_info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")

if __name__ == "__main__":
    log_info(f"–ë–æ—Ç –≤–µ—Ä—Å–∏–∏ {VERSION} –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    if OWNER_ID:
        try:
            bot.send_message(int(OWNER_ID), f"üöÄ –ë–æ—Ç –≤–µ—Ä—Å–∏–∏ {VERSION} –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: {e}")
    set_webhook()
    app.run(host="0.0.0.0", port=PORT)