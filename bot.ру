# bot.py
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç "–§–û" ‚Äî –≤–µ—Ä—Å–∏—è 9.8.1
# –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π webhook (Render-ready)

import os
import json
import csv
import re
import time
import threading
from datetime import datetime
from zoneinfo import ZoneInfo
from io import StringIO

import requests
import telebot
from telebot import types
from flask import Flask, request, jsonify

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
VERSION = "9.8.1"
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_DIR = "."  # –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å
PORT = int(os.environ.get("PORT", 5000))
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")  # –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–æ–π, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–ª–µ–µ
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
ALT_WEBHOOK_PATH = os.getenv("ALT_WEBHOOK_PATH", "/")
# –ú–æ–∂–Ω–æ —è–≤–Ω–æ –∑–∞–¥–∞—Ç—å WEBHOOK_HOST (–Ω–∞–ø—Ä–∏–º–µ—Ä https://fo-1.onrender.com) –≤ WEBHOOK_HOST env; –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è RENDER_EXTERNAL_URL
WEBHOOK_HOST_OVERRIDE = os.getenv("WEBHOOK_HOST")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

if not BOT_TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render.")

if not OWNER_ID:
    print("–í–Ω–∏–º–∞–Ω–∏–µ: OWNER_ID –Ω–µ –∑–∞–¥–∞–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

# –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º OWNER_ID
try:
    OWNER_ID = int(OWNER_ID) if OWNER_ID else None
except Exception:
    OWNER_ID = None

bot = telebot.TeleBot(BOT_TOKEN, threaded=True)
app = Flask(__name__)

# ---------- –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ data.json ----------
def default_data():
    return {
        "version_current": VERSION,
        "records": [],           # —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π: {id, short_id, timestamp, amount, note, owner_chat}
        "next_id": 1,
        "overall_balance": {},   # chat_id -> int
        "active_messages": {},
        "compact_active": {},
        "compact_mode": {},
        "forward_targets": {},   # owner_chat_id -> [targets]
        "pending_action": {},    # chat_id -> {type:..., payload:...}
        "pending_edit": {},      # chat_id -> short_id
        "sent_messages": []
    }

if not os.path.exists(DATA_FILE):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(default_data(), f, ensure_ascii=False, indent=2)
        print("[init] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª data.json")
    except Exception as e:
        print(f"[init] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è data.json: {e}")
else:
    print("[init] data.json –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ")

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except Exception as e:
            print(f"[load_data] –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {DATA_FILE}: {e}")
            d = default_data()
    else:
        d = default_data()
    base = default_data()
    for k, v in base.items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"[save_data] {e}")

data = load_data()

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------
def now_iso_utc():
    return datetime.now(tz=ZoneInfo("UTC")).isoformat()

def date_today_local():
    return datetime.now(tz=TZ).strftime("%Y-%m-%d")

def fmt_amount(n: int) -> str:
    return f"{abs(n):,}".replace(",", ".")

def make_short_id(n: int) -> str:
    return f"R{n}"

NUMBER_RE = re.compile(r'([+-]?\s*[\d][\d\s\.,]*)')

def parse_first_number(text: str):
    if not text:
        return None, None, None
    m = NUMBER_RE.search(text)
    if not m:
        return None, None, None
    raw = m.group(1)
    s = raw.strip()
    sign = '+' if s.startswith('+') else ('-' if s.startswith('-') else None)
    digits = s[1:].strip() if sign else s
    digits_norm = re.sub(r'[\s\.,]', '', digits)
    dm = re.match(r'(\d+)', digits_norm)
    if not dm:
        return None, None, None
    return int(dm.group(1)), sign, raw

def apply_sign_and_normalize(num: int, sign: str) -> int:
    return num if sign == '+' else -num

# ---------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ----------
def record_sent_message(entry):
    data.setdefault("sent_messages", []).append(entry)
    save_data(data)

def send_and_record(chat_id, text, reply_markup=None, parse_mode=None, purpose="msg"):
    try:
        sent = bot.send_message(int(chat_id), text, reply_markup=reply_markup, parse_mode=parse_mode)
        record_sent_message({"chat_id": str(chat_id), "message_id": int(sent.message_id), "purpose": purpose, "timestamp": now_iso_utc()})
        return sent
    except Exception as e:
        record_sent_message({"chat_id": str(chat_id), "message_id": None, "purpose": purpose, "timestamp": now_iso_utc(), "error": str(e)})
        try:
            if OWNER_ID:
                bot.send_message(int(OWNER_ID), f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}")
        except Exception:
            pass
        return None

def send_file_and_record(chat_id, path, caption=None, purpose="file"):
    try:
        with open(path, "rb") as f:
            sent = bot.send_document(int(chat_id), f, caption=caption)
        record_sent_message({"chat_id": str(chat_id), "message_id": int(sent.message_id), "purpose": purpose, "timestamp": now_iso_utc()})
        return sent
    except Exception as e:
        record_sent_message({"chat_id": str(chat_id), "message_id": None, "purpose": purpose, "timestamp": now_iso_utc(), "error": str(e)})
        return None

# ---------- –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è ----------
def delayed_delete(chat_id, message_id, delay=5):
    def worker():
        time.sleep(delay)
        try:
            bot.delete_message(int(chat_id), int(message_id))
        except Exception:
            pass
    threading.Thread(target=worker, daemon=True).start()

# ---------- –û–∫–Ω–æ –¥–Ω—è ----------
def get_day_records_for_chat(chat_id, day_date):
    recs = []
    for r in data.get("records", []):
        if str(r.get("owner_chat")) != str(chat_id):
            continue
        ts = r.get("timestamp")
        d = date_local_str_from_iso(ts)
        if d == day_date:
            try:
                dt = datetime.fromisoformat(ts).astimezone(TZ)
            except Exception:
                dt = datetime.now(tz=TZ)
            recs.append((dt, r))
    recs.sort(key=lambda x: x[0])
    return recs

def date_local_str_from_iso(iso_ts: str) -> str:
    try:
        dt = datetime.fromisoformat(iso_ts)
        return dt.astimezone(TZ).strftime("%Y-%m-%d")
    except Exception:
        return datetime.now(tz=TZ).strftime("%Y-%m-%d")

def build_day_window(chat_id, day_date):
    recs = get_day_records_for_chat(chat_id, day_date)
    header = f"üìÖ {day_date} (v{data.get('version_current','?')})"
    if not recs:
        return f"{header}\n\nüìò –ó–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.\n\n‚Äî –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ ‚Äî –≤—ã –Ω–∞—á–∞–ª–∏ –≤–µ—Å—Ç–∏ —É—á—ë—Ç."
    lines = [header, ""]
    day_income, day_expense = 0, 0
    last_hour = None
    for ts, r in recs:
        hour = ts.strftime("%H")
        if last_hour is not None and hour != last_hour:
            lines.append("")
        last_hour = hour
        amt = r["amount"]
        sign = "+" if amt > 0 else "-"
        sid = r.get("short_id") or make_short_id(r.get("id"))
        note = r.get("note", "")
        lines.append(f"üïì {ts.strftime('%H:%M')} | {sid} | {sign}{fmt_amount(amt)} {note}".rstrip())
        if amt > 0:
            day_income += amt
        else:
            day_expense += abs(amt)
    overall = data.get("overall_balance", {}).get(str(chat_id), 0)
    lines += ["", f"üìà –ü—Ä–∏—Ö–æ–¥: {fmt_amount(day_income)}", f"üìâ –†–∞—Å—Ö–æ–¥: {fmt_amount(day_expense)}", f"üíµ –û—Å—Ç–∞—Ç–æ–∫: {fmt_amount(overall)}"]
    return "\n".join(lines)

# ---------- Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def kb_main(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_menu"))
    kb.add(types.InlineKeyboardButton("üì§ –ü–µ—Ä–µ—Å—ã–ª–∫–∞", callback_data="forward_menu"))
    cm = data.get("compact_mode", {}).get(str(chat_id), False)
    kb.add(types.InlineKeyboardButton("üîÅ Compact: –í–∫–ª" if cm else "üîÅ Compact: –í—ã–∫–ª", callback_data="toggle_compact"))
    kb.add(types.InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="export_csv"))
    kb.add(types.InlineKeyboardButton("‚ôªÔ∏è –û–±–Ω—É–ª–∏—Ç—å (–≤–ª–∞–¥–µ–ª–µ—Ü)", callback_data="reset_confirm"))
    return kb

def kb_forward_menu(chat_id:int):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="forward_add"))
    kb.add(types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å", callback_data="forward_remove"))
    kb.add(types.InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="forward_list"))
    kb.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="edit_cancel"))
    return kb

def kb_yes_no(prefix):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–î–∞", callback_data=f"{prefix}_yes"),
           types.InlineKeyboardButton("–ù–µ—Ç", callback_data=f"{prefix}_no"))
    return kb

# ---------- Forward helpers ----------
def ensure_forward_list_for(owner_chat_id: int):
    key = str(owner_chat_id)
    data.setdefault("forward_targets", {})
    lst = data["forward_targets"].get(key)
    if lst is None:
        data["forward_targets"][key] = []
        save_data(data)
        return data["forward_targets"][key]
    if isinstance(lst, list):
        return lst
    data["forward_targets"][key] = [str(lst)]
    save_data(data)
    return data["forward_targets"][key]

def add_forward_target(owner_chat_id: int, target: str) -> bool:
    lst = ensure_forward_list_for(owner_chat_id)
    t = str(target).strip()
    if t in lst:
        return False
    lst.append(t)
    data["forward_targets"][str(owner_chat_id)] = lst
    save_data(data)
    return True

def remove_forward_target(owner_chat_id: int, target: str) -> bool:
    lst = ensure_forward_list_for(owner_chat_id)
    t = str(target).strip()
    if t in lst:
        lst = [x for x in lst if x != t]
        data["forward_targets"][str(owner_chat_id)] = lst
        save_data(data)
        return True
    return False

def list_forward_targets(owner_chat_id: int):
    return ensure_forward_list_for(owner_chat_id)

# ---------- Auto-forward (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä == OWNER_ID) ----------
def auto_forward_if_owner(message: types.Message):
    try:
        if not OWNER_ID:
            return []
        if getattr(message.from_user, "is_bot", False):
            return []
        if str(getattr(message.from_user, "id", "")) != str(OWNER_ID):
            return []
        src_chat = message.chat.id
        targets = data.get("forward_targets", {}).get(str(src_chat), [])
        results = []
        for t in targets:
            try:
                if str(t).startswith("@"):
                    bot.forward_message(t, src_chat, message.message_id)
                else:
                    bot.forward_message(int(t), src_chat, message.message_id)
                results.append((t, True))
            except Exception:
                results.append((t, False))
        for r in results:
            record_sent_message({"timestamp": now_iso_utc(), "from_chat": str(src_chat), "to": r[0], "ok": r[1]})
        return results
    except Exception as e:
        print(f"[auto_forward_if_owner] {e}")
        return []

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (—á–∞—Å—Ç—å) ----------
@bot.message_handler(commands=["start","help"])
def cmd_start(m: types.Message):
    chat_id = m.chat.id
    text = (
        f"ü§ñ –ë–æ—Ç '–§–û' v{VERSION}\n"
        "–î–æ–±–∞–≤–ª—è–π —Ä–∞—Å—Ö–æ–¥—ã –∏ –ø—Ä–∏—Ö–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "-500 —Ö–ª–µ–±\n"
        "+1000 –∑–∞—Ä–ø–ª–∞—Ç–∞\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/–±–∞–ª–∞–Ω—Å\n"
        "/–æ—Ç—á–µ—Ç\n"
        "/—ç–∫—Å–ø–æ—Ä—Ç\n"
        "/—Å–±—Ä–æ—Å (–≤–ª–∞–¥–µ–ª–µ—Ü)\n"
        "/addforward <chat_id>\n"
        "/removeforward <chat_id>\n"
        "/listforwards\n"
        "/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (inline)\n"
    )
    send_and_record(chat_id, text, purpose="start")
    update_day_window_after_change(chat_id, date_today_local(), purpose="start_window")

@bot.message_handler(commands=["–±–∞–ª–∞–Ω—Å"])
def cmd_balance(m: types.Message):
    ob = data.get("overall_balance", {}).get(str(m.chat.id), 0)
    send_and_record(m.chat.id, f"üí∞ –ë–∞–ª–∞–Ω—Å —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {fmt_amount(ob)}", purpose="balance")

@bot.message_handler(commands=["–æ—Ç—á–µ—Ç"])
def cmd_report(m: types.Message):
    recs = [r for r in data.get("records", []) if str(r.get("owner_chat")) == str(m.chat.id)]
    if not recs:
        return send_and_record(m.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞.", purpose="report_empty")
    path = os.path.join(CSV_DIR, CSV_FILE) if CSV_DIR else CSV_FILE
    try:
        with open(path, "w", newline="", encoding="utf-8-sig") as f:
            writer = csv.writer(f)
            writer.writerow(["id","short_id","timestamp","amount","note","owner_chat"])
            for r in recs:
                writer.writerow([r["id"], r["short_id"], r["timestamp"], r["amount"], r.get("note",""), r.get("owner_chat")])
        send_file_and_record(m.chat.id, path, caption="–û—Ç—á—ë—Ç CSV", purpose="report")
    except Exception as e:
        send_and_record(m.chat.id, f"–û—à–∏–±–∫–∞: {e}", purpose="report_error")

@bot.message_handler(commands=["—Å–±—Ä–æ—Å"])
def cmd_reset(m: types.Message):
    if str(m.from_user.id) != str(OWNER_ID):
        return send_and_record(m.chat.id, "‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –æ–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.", purpose="reset_denied_cmd")
    base = default_data()
    base["version_current"] = data.get("version_current", VERSION)
    save_data(base)
    data.clear(); data.update(load_data())
    send_and_record(m.chat.id, "‚ôªÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã.", purpose="reset_cmd")
    update_day_window_after_change(m.chat.id, date_today_local(), purpose="reset_update")

@bot.message_handler(commands=["compact_on"])
def cmd_compact_on(m: types.Message):
    data.setdefault("compact_mode", {})[str(m.chat.id)] = True
    save_data(data)
    send_and_record(m.chat.id, "Compact-mode –≤–∫–ª—é—á—ë–Ω.", purpose="compact_on")
    update_day_window_after_change(m.chat.id, date_today_local(), purpose="compact_on_update")

@bot.message_handler(commands=["compact_off"])
def cmd_compact_off(m: types.Message):
    data.setdefault("compact_mode", {})[str(m.chat.id)] = False
    save_data(data)
    send_and_record(m.chat.id, "Compact-mode –≤—ã–∫–ª—é—á–µ–Ω.", purpose="compact_off")
    update_day_window_after_change(m.chat.id, date_today_local(), purpose="compact_off_update")

# ---------- Webhook endpoints (Flask) ----------
def process_update_request(json_str: str):
    try:
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        print(f"[process_update_request] {e}")

@app.route("/webhook", methods=['POST'])
def webhook():
    try:
        if request.headers.get('content-type') == 'application/json':
            json_str = request.get_data().decode('utf-8')
            process_update_request(json_str)
            return '', 200
        else:
            print("[webhook] –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç', 403
    except Exception as e:
        print(f"[webhook] {e}")
        return '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏', 500

@app.route(WEBHOOK_PATH, methods=['POST'])
def webhook_token_path():
    try:
        json_str = request.get_data().decode('utf-8')
        process_update_request(json_str)
    except Exception as e:
        print(f"[webhook_token_path] {e}")
    return '', 200

@app.route(ALT_WEBHOOK_PATH, methods=['POST'])
def webhook_root():
    try:
        json_str = request.get_data().decode('utf-8')
        process_update_request(json_str)
    except Exception as e:
        print(f"[webhook_root] {e}")
    return '', 200

@app.route("/", methods=['GET'])
def index():
    return f"‚úÖ –ë–æ—Ç '–§–û' v{VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç (Render OK)", 200

# ---------- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook ----------
def auto_set_webhook():
    try:
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–æ—Å—Ç: —Å–Ω–∞—á–∞–ª–∞ —è–≤–Ω—ã–π override, –∑–∞—Ç–µ–º Render env
        render_host = None
        if WEBHOOK_HOST_OVERRIDE:
            render_host = WEBHOOK_HOST_OVERRIDE
        else:
            # RENDER_EXTERNAL_URL –æ–±—ã—á–Ω–æ –≤–∏–¥–∞ "fo-1.onrender.com"
            render_host = os.getenv("RENDER_EXTERNAL_URL") or os.getenv("RENDER_EXTERNAL_HOSTNAME")
        if render_host:
            # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º (–µ—Å–ª–∏ —Ç–∞–º —É–∂–µ –µ—Å—Ç—å https://)
            render_host = render_host.strip()
            if render_host.startswith("http://") or render_host.startswith("https://"):
                # —É–±–∏—Ä–∞–µ–º —Å—Ö–µ–º—É, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç+path
                render_host = render_host.split("://", 1)[1].rstrip('/')
            webhook_url = f"https://{render_host}{WEBHOOK_PATH if WEBHOOK_PATH.startswith('/') else '/' + WEBHOOK_PATH}"
        else:
            # fallback: –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω Render env, –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ)
            webhook_url = f"https://fo-1.onrender.com{WEBHOOK_PATH if WEBHOOK_PATH.startswith('/') else '/' + WEBHOOK_PATH}"

        print(f"[auto_set_webhook] –¶–µ–ª–µ–≤–æ–π webhook: {webhook_url}")

        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ webhook —á–µ—Ä–µ–∑ Telegram API
        try:
            resp = requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo", timeout=10).json()
            current_url = resp.get("result", {}).get("url", "") if resp.get("ok") else ""
        except Exception as e:
            print(f"[auto_set_webhook] –û—à–∏–±–∫–∞ getWebhookInfo: {e}")
            current_url = ""

        if current_url != webhook_url:
            print(f"[auto_set_webhook] –û–±–Ω–æ–≤–ª—è–µ–º webhook: {current_url} -> {webhook_url}")
            try:
                # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π webhook
                requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook", timeout=10)
            except Exception:
                pass
            time.sleep(0.4)
            try:
                r = requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook", params={"url": webhook_url}, timeout=10).json()
                if r.get("ok"):
                    print("[auto_set_webhook] Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    # —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–º—è–≥–∫–æ)
                    if OWNER_ID:
                        try:
                            msg = bot.send_message(int(OWNER_ID), f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                            delayed_delete(int(OWNER_ID), msg.message_id, delay=5)
                        except Exception:
                            pass
                else:
                    print(f"[auto_set_webhook] –û—Ç–≤–µ—Ç Telegram: {r}")
            except Exception as e:
                print(f"[auto_set_webhook] –û—à–∏–±–∫–∞ setWebhook: {e}")
        else:
            print("[auto_set_webhook] Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    except Exception as e:
        print(f"[auto_set_webhook] –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

# ---------- –ó–∞–ø—É—Å–∫ ----------
if __name__ == "__main__":
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –§–û v{VERSION} ...")
    save_data(data)

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ OWNER_ID –µ—Å—Ç—å –≤ forward_targets (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
    try:
        if OWNER_ID:
            add_forward_target(int(OWNER_ID), str(OWNER_ID))
    except Exception:
        pass

    # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    auto_set_webhook()

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ —Å—Ç–∞—Ä—Ç–µ
    if OWNER_ID:
        try:
            msg = bot.send_message(int(OWNER_ID), f"‚úÖ –ë–æ—Ç v{VERSION} –∑–∞–ø—É—â–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω.")
            delayed_delete(int(OWNER_ID), msg.message_id, delay=5)
            record_sent_message({"chat_id": str(OWNER_ID), "message_id": int(msg.message_id), "timestamp": now_iso_utc(), "purpose": "owner_start"})
        except Exception:
            pass

    app.run(host="0.0.0.0", port=PORT)

# -------------------------------
# –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ~720
# -------------------------------