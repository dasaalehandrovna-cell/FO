# -------------------------------
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç "–§–û" ‚Äî –≤–µ—Ä—Å–∏—è 9.8.1 (–ø–æ–ª–Ω–∞—è)
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook + –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ data.json
# –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º —Å Render (Flask)
# -------------------------------

import os
import json
import time
import threading
import re
import csv
from datetime import datetime
from zoneinfo import ZoneInfo
from flask import Flask, request
import telebot
from telebot import types

# -------------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# -------------------------------
VERSION = "9.8.1"
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"

TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
PORT = int(os.environ.get("PORT", 5000))

if not TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render.")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -------------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π
# -------------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "active_messages": {},
        "next_id": 1,
        "sent_messages": [],
        "forward_targets": []
    }

def load_data():
    if not os.path.exists(DATA_FILE):
        save_data(default_data())
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(d):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

data = load_data()

# -------------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# -------------------------------
def now_iso_utc():
    return datetime.utcnow().replace(tzinfo=TZ).isoformat()

def delayed_delete(chat_id, msg_id, delay=10):
    def task():
        time.sleep(delay)
        try:
            bot.delete_message(chat_id, msg_id)
        except Exception:
            pass
    threading.Thread(target=task).start()

def record_sent_message(info):
    data["sent_messages"].append(info)
    save_data(data)

def add_forward_target(chat_id, label):
    found = any(t["chat_id"] == chat_id for t in data["forward_targets"])
    if not found:
        data["forward_targets"].append({"chat_id": chat_id, "label": label})
        save_data(data)

# -------------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞
# -------------------------------
@bot.message_handler(commands=["start"])
def cmd_start(msg):
    bot.send_message(msg.chat.id, f"ü§ñ –ë–æ—Ç '–§–û' v{VERSION} –∞–∫—Ç–∏–≤–µ–Ω!\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -500 –µ–¥–∞)")

@bot.message_handler(commands=["–±–∞–ª–∞–Ω—Å"])
def cmd_balance(msg):
    bot.send_message(msg.chat.id, f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {data['overall_balance']}")

@bot.message_handler(commands=["—Å–±—Ä–æ—Å"])
def cmd_reset(msg):
    if str(msg.from_user.id) != str(OWNER_ID):
        bot.send_message(msg.chat.id, "‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return
    save_data(default_data())
    bot.send_message(msg.chat.id, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã.")

@bot.message_handler(func=lambda m: True, content_types=["text", "photo", "video", "document", "voice", "sticker"])
def handle_message(msg):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—É –≤ –Ω–∞—á–∞–ª–µ ‚Äî —ç—Ç–æ –∑–∞–ø–∏—Å—å —Ä–∞—Å—Ö–æ–¥–∞/–ø—Ä–∏—Ö–æ–¥–∞
    if msg.text and re.match(r"^[+-]?\d+", msg.text.strip()):
        try:
            amount, note = parse_record(msg.text)
            add_record(amount, note, msg)
        except Exception as e:
            bot.send_message(msg.chat.id, f"–û—à–∏–±–∫–∞: {e}")
    else:
        forward_message(msg)

def parse_record(text):
    match = re.match(r"^([+-]?\d+)\s*(.*)$", text.strip())
    if not match:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: -500 –µ–¥–∞")
    return int(match.group(1)), match.group(2) or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"

def add_record(amount, note, msg):
    rid = data["next_id"]
    data["next_id"] += 1
    record = {
        "id": rid,
        "short_id": f"R{rid}",
        "timestamp": now_iso_utc(),
        "amount": amount,
        "note": note,
        "owner": msg.from_user.id
    }
    data["records"].append(record)
    data["overall_balance"] += amount
    save_data(data)
    bot.reply_to(msg, f"üíæ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} ({note})\nüí∞ –ë–∞–ª–∞–Ω—Å: {data['overall_balance']}")

# -------------------------------
# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# -------------------------------
def forward_message(msg):
    for target in data.get("forward_targets", []):
        try:
            bot.copy_message(target["chat_id"], msg.chat.id, msg.message_id)
        except Exception:
            pass

# -------------------------------
# Webhook –∏ Flask
# -------------------------------
WEBHOOK_PATH = "/webhook"

@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    try:
        update = telebot.types.Update.de_json(request.data.decode("utf-8"))
        bot.process_new_updates([update])
    except Exception as e:
        print(f"[webhook] –û—à–∏–±–∫–∞: {e}")
    return "ok", 200

@app.route("/", methods=["GET"])
def index():
    return f"ü§ñ –ë–æ—Ç '–§–û' v{VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç."

# -------------------------------
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
# -------------------------------
def set_webhook_auto():
    try:
        host = os.getenv("RENDER_EXTERNAL_URL") or os.getenv("RENDER_EXTERNAL_HOSTNAME") or "https://fo-1.onrender.com"
        url = f"{host}{WEBHOOK_PATH}"
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url)
        print(f"[Webhook] —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")
        if OWNER_ID:
            msg = bot.send_message(int(OWNER_ID), f"‚úÖ Webhook –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {url}")
            delayed_delete(int(OWNER_ID), msg.message_id, 5)
    except Exception as e:
        print(f"[set_webhook_auto] {e}")

# -------------------------------
# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
# -------------------------------
if __name__ == "__main__":
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –§–û v{VERSION} ...")
    if not os.path.exists(DATA_FILE):
        save_data(default_data())
    if OWNER_ID:
        add_forward_target(int(OWNER_ID), "–í–ª–∞–¥–µ–ª–µ—Ü")
    set_webhook_auto()
    app.run(host="0.0.0.0", port=PORT)