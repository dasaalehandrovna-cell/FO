# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.8.2
# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ–¥–Ω–∏–º –æ–∫–Ω–æ–º –∏ CSV
# ============================================
# -----------------------------
# –û–¢–°–ï–ö 1 ‚Äî –ò–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------------
import os
import json
import csv
import logging
import re
import threading
import time
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
APP_URL = os.getenv("APP_URL", "https://yourapp.onrender.com")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
LOG_FILE = "log.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.8.3"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# -----------------------------
# –û–¢–°–ï–ö 2 ‚Äî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[logging.FileHandler(LOG_FILE, encoding="utf-8"), logging.StreamHandler()]
)

def log_info(msg):
    logging.info(msg)
def log_error(msg):
    logging.error(msg)

log_info(f"–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–µ—Ä—Å–∏—è {VERSION}")

# -----------------------------
# –û–¢–°–ï–ö 3 ‚Äî –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ IO
# -----------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "chats": {},
        "active_messages": {},
        "processed_messages": [],
        "forward_targets": [],
        "tracked_messages": {},
        "next_id": 1
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except:
            d = default_data()
    else:
        d = default_data()
    base = default_data()
    for k, v in base.items():
        if k not in d:
            d[k] = v
    return d

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

data = load_data()

if OWNER_ID:
    try:
        oi = int(OWNER_ID)
        if oi not in data.get("forward_targets", []):
            data["forward_targets"].append(oi)
            save_data(data)
    except Exception:
        pass

# -----------------------------
# –û–¢–°–ï–ö 4 ‚Äî –ß–∞—Ç/–¥–∞—Ç–∞
# -----------------------------
def get_today_key():
    return datetime.now(TZ).strftime("%Y-%m-%d")

def get_chat_store(chat_id):
    cid = str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid] = {"balance": 0, "records": [], "next_id": 1, "daily_records": {}, "active_windows": {}}
        save_data(data)
    return data["chats"][cid]

def get_today_active_window(chat_id):
    today = get_today_key()
    day_map = data["active_messages"].get(today, {})
    return day_map.get(str(chat_id))

def set_today_active_window(chat_id, message_id):
    today = get_today_key()
    if "active_messages" not in data:
        data["active_messages"] = {}
    if today not in data["active_messages"]:
        data["active_messages"][today] = {}
    data["active_messages"][today][str(chat_id)] = message_id
    save_data(data)

# -----------------------------
# –û–¢–°–ï–ö 5 ‚Äî –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø–∏—Å—è–º–∏
# -----------------------------
def add_record_to_chat(chat_id, amount, note, owner):
    store = get_chat_store(chat_id)
    rid = data.get("next_id", 1)
    rec = {"id": rid, "short_id": f"R{rid}", "timestamp": datetime.now(TZ).isoformat(timespec="seconds"), "amount": amount, "note": note, "owner": owner}
    data.setdefault("records", []).append(rec)
    store.setdefault("records", []).append(rec)
    day = get_today_key()
    store.setdefault("daily_records", {}).setdefault(day, []).append(rec)
    store["balance"] = store.get("balance", 0) + amount
    data["overall_balance"] = data.get("overall_balance", 0) + amount
    data["next_id"] = rid + 1
    save_data(data)
    try: export_to_csv(data)
    except: pass
    return rec

def update_record_in_chat(chat_id, rid, new_amount, new_note):
    store = get_chat_store(chat_id)
    found = None
    for r in store.get("records", []):
        if r["id"] == rid:
            r["amount"] = new_amount
            r["note"] = new_note
            found = r
            break
    if found:
        for day_recs in store.get("daily_records", {}).values():
            for r in day_recs:
                if r["id"] == rid:
                    r.update(found)
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data(data)
        export_to_csv(data)
        return True, found
    return False, None

def delete_record_in_chat(chat_id, rid):
    store = get_chat_store(chat_id)
    removed = None
    for r in list(store.get("records", [])):
        if r["id"] == rid or str(r["id"]) == str(rid) or r.get("short_id") == f"R{rid}":
            removed = r
            store["records"].remove(r)
            break
    if removed:
        for day_key, recs in store.get("daily_records", {}).items():
            store["daily_records"][day_key] = [x for x in recs if x["id"] != rid]
        store["balance"] = sum([x["amount"] for x in store.get("records", [])])
        data["records"] = [x for x in data.get("records", []) if x["id"] != rid]
        data["overall_balance"] = sum([x["amount"] for x in data.get("records", [])])
        save_data(data)
        export_to_csv(data)
        return True, removed
    return False, None

def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["chat_id","ID","short_id","timestamp","amount","note","owner","day_key"])
            for cid, cdata in d.get("chats", {}).items():
                for day_key, records in cdata.get("daily_records", {}).items():
                    for r in records:
                        writer.writerow([cid, r.get("id"), r.get("short_id"), r.get("timestamp"), r.get("amount"), r.get("note"), r.get("owner"), day_key])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")

# -----------------------------
# –û–¢–°–ï–ö 6 ‚Äî –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -----------------------------
def build_main_keyboard(chat_id=None, confirm_reset=False):
    kb = types.InlineKeyboardMarkup(row_width=3)
    kb.row(
        types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
        types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report"),
        types.InlineKeyboardButton("üìÇ CSV", callback_data="btn_csv")
    )
    if confirm_reset:
        kb.row(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_reset"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_reset")
        )
    else:
        kb.row(types.InlineKeyboardButton("‚öôÔ∏è –û–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="btn_reset"))
    kb.row(
        types.InlineKeyboardButton("üöÄ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="btn_start"),
        types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="btn_cod")
    )
    balance_text = ""
    if chat_id is not None:
        store = get_chat_store(chat_id)
        balance_text = f"üí∞ {store.get('balance', 0)} ARS"
    kb.add(types.InlineKeyboardButton(balance_text or "üí∞ 0 ARS", callback_data="noop"))
    return kb

def build_edit_keyboard():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.row(
        types.InlineKeyboardButton("‚úè –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_change"),
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data="edit_delete")
    )
    kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_back"))
    return kb

# -----------------------------
# –û–¢–°–ï–ö 7 ‚Äî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
# -----------------------------
def update_or_send_today_window(chat_id, create_if_missing=True):
    today_key = get_today_key()
    store = get_chat_store(chat_id)
    day_records = store.get("daily_records", {}).get(today_key, [])

    daily_income = sum(r["amount"] for r in day_records if r["amount"] > 0)
    daily_expense = sum(r["amount"] for r in day_records if r["amount"] < 0)
    overall_balance = store.get("balance", 0)

    if not day_records:
        text = (
            f"üìÖ {today_key}\n"
            f"–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.\n"
            f"üíµ –ü—Ä–∏—Ö–æ–¥: {daily_income} ARS\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(daily_expense)} ARS\n"
            f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS"
        )
    else:
        lines = [f"üìÖ {today_key}", "üìã –û–ø–µ—Ä–∞—Ü–∏–∏:"]
        for r in day_records[-50:]:
            sign = "+" if r["amount"] > 0 else "-"
            lines.append(f"{r['short_id']}: {sign}{abs(r['amount'])} ‚Äî {r.get('note','')}")
        lines.append(
            f"\nüíµ –ü—Ä–∏—Ö–æ–¥: {daily_income} ARS\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(daily_expense)} ARS\n"
            f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS"
        )
        text = "\n".join(lines)

    kb = build_main_keyboard(chat_id)
    today_msgs = data.setdefault("active_messages", {}).setdefault(today_key, {})
    active_id = today_msgs.get(str(chat_id))

    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –µ—Å—Ç—å ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
    if active_id:
        try:
            bot.edit_message_text(text, chat_id, active_id, reply_markup=kb)
        except telebot.apihelper.ApiException as e:
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ {active_id} –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        return

    # –ï—Å–ª–∏ create_if_missing=False ‚Äî –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
    if not create_if_missing:
        return

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–µ—Ç
    try:
        sent = bot.send_message(chat_id, text, reply_markup=kb)
        today_msgs[str(chat_id)] = sent.message_id
        save_data(data)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è {chat_id}: {e}")
@bot.message_handler(commands=["start"])
def handle_start(msg):
    chat_id = msg.chat.id
    today_key = get_today_key()
    today_msgs = data.setdefault("active_messages", {}).setdefault(today_key, {})
    
    # –°–æ–∑–¥–∞—ë–º –æ–∫–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
    update_or_send_today_window(chat_id, create_if_missing=True)


    # -----------------------------
# –û–¢–°–ï–ö 8 ‚Äî Callback –∫–Ω–æ–ø–æ–∫
# -----------------------------
@bot.callback_query_handler(func=lambda c: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    store = get_chat_store(chat_id)
    today_key = get_today_key()
    day_records = store.get("daily_records", {}).get(today_key, [])

    # -----------------------------
    # –ö–Ω–æ–ø–∫–∞ "–ë–∞–ª–∞–Ω—Å" ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥ –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
    # -----------------------------
    if call.data == "btn_balance":
        daily_income = sum(r["amount"] for r in day_records if r["amount"] > 0)
        daily_expense = sum(r["amount"] for r in day_records if r["amount"] < 0)
        overall_balance = store.get("balance", 0)

        text = (
            f"üìÖ {today_key}\n\n"
            f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS\n"
            f"üíµ –ü—Ä–∏—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {daily_income} ARS\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {abs(daily_expense)} ARS"
        )

        today_msgs = data.setdefault("active_messages", {}).setdefault(today_key, {})
        active_id = today_msgs.get(str(chat_id))

        if active_id:
            try:
                bot.edit_message_text(text, chat_id, active_id, reply_markup=build_main_keyboard(chat_id))
            except telebot.apihelper.ApiException as e:
                log_error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–Ω–∞ (–±–∞–ª–∞–Ω—Å): {e}")
        else:
            update_or_send_today_window(chat_id)

        bot.answer_callback_query(call.id, "–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")
        return

    # -----------------------------
# –ö–Ω–æ–ø–∫–∞ "–û—Ç—á—ë—Ç" ‚Äî —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
# -----------------------------
if call.data == "btn_report":
    # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã)
    expenses = [r for r in day_records if r["amount"] < 0]
    daily_expense_total = sum(abs(r["amount"]) for r in expenses)
    
    if not expenses:
        text = f"üìÖ {today_key}\n–ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\nüí∏ –†–∞—Å—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å: 0 ARS"
    else:
        lines = [f"üìÖ {today_key}", "üìã –†–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å:"]
        for r in expenses[-30:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 30 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
            lines.append(f"{r['short_id']}: -{abs(r['amount'])} ‚Äî {r.get('note','')}")
        lines.append(f"\nüí∏ –†–∞—Å—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å: {daily_expense_total} ARS")
        text = "\n".join(lines)

    if active_id:
        try:
            bot.edit_message_text(text, chat_id, active_id, reply_markup=build_main_keyboard(chat_id))
        except telebot.apihelper.ApiException as e:
            log_error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–Ω–∞ (–û—Ç—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤): {e}")
    else:
        update_or_send_today_window(chat_id)

    bot.answer_callback_query(call.id, "–û—Ç—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω üìä")
    return

    # -----------------------------
    # –ö–Ω–æ–ø–∫–∞ "CSV" ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
    # -----------------------------
    if call.data == "btn_csv":
        try:
            with open(CSV_FILE, "rb") as f:
                bot.send_document(chat_id, f, caption="üìÇ –í–∞—à —Ñ–∞–π–ª data.csv")
            bot.answer_callback_query(call.id, "CSV –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üìÅ")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CSV: {e}")
            bot.answer_callback_query(call.id)
        return

    # -----------------------------
    # –ö–Ω–æ–ø–∫–∞ "–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö"
    # -----------------------------
    if call.data == "btn_reset":
        store["records"] = []
        store["daily_records"] = {}
        store["balance"] = 0
        data["records"] = []
        data["overall_balance"] = 0
        save_data(data)
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã üßπ")
        return

    # -----------------------------
    # –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å"
    # -----------------------------
    if call.data == "btn_start":
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–û–∫–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ üîÑ")
        return

    # -----------------------------
    # –ö–Ω–æ–ø–∫–∞ "–ò–Ω—Ñ–æ" ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    # -----------------------------
    if call.data == "btn_cod":
        info_text = (
            f"‚ÑπÔ∏è –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è {VERSION}\n\n"
            "üìå –ö–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏:\n\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –æ—Ç—á—ë—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "üí∞ –ë–∞–ª–∞–Ω—Å - –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∏ –ø—Ä–∏—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "üìä –û—Ç—á—ë—Ç - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –¥–µ–Ω—å\n"
            "üìÇ CSV - –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π –æ–ø–µ—Ä–∞—Ü–∏–π\n"
            "‚öôÔ∏è –û–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ - –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏\n"
            "üöÄ –û–±–Ω–æ–≤–∏—Ç—å - –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ —Å –¥–∞–Ω–Ω—ã–º–∏\n"
            "‚ÑπÔ∏è –ò–Ω—Ñ–æ - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –æ–∫–Ω–æ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥\n\n"
            "üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π:\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Å –ø–ª—é—Å–æ–º –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞, —Å –º–∏–Ω—É—Å–æ–º –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞) –∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "+500 –ó–∞—Ä–ø–ª–∞—Ç–∞\n"
            "-150 –û–±–µ–¥\n\n"
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É \"–ò–∑–º–µ–Ω–∏—Ç—å\" –∏–ª–∏ \"–£–¥–∞–ª–∏—Ç—å\" –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º"
        )

        bot.send_message(chat_id, info_text, reply_markup=None)
        bot.answer_callback_query(call.id)
        return

# -----------------------------
# –û–¢–°–ï–ö 9 ‚Äî –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# -----------------------------
num_re = re.compile(r'([+-]?\s*\d+)')

@bot.message_handler(func=lambda m: True)
def handle_message(msg):
    chat_id = msg.chat.id
    store = get_chat_store(chat_id)
    wait_action = store.get("edit_wait")

    if wait_action is None:
        m = num_re.search(msg.text)
        if m:
            try:
                raw = m.group(1).replace(" ", "")
                if raw.startswith("+"):
                    amount = int(raw[1:])        # –ü—Ä–∏—Ö–æ–¥
                elif raw.startswith("-"):
                    amount = -int(raw[1:])       # –†–∞—Å—Ö–æ–¥
                else:
                    amount = -int(raw)           # –ë–µ–∑ –∑–Ω–∞–∫–∞ = —Ä–∞—Å—Ö–æ–¥

                note = msg.text.replace(m.group(1), "").strip()
                add_record_to_chat(chat_id, amount, note, msg.from_user.id)
                update_or_send_today_window(chat_id)
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        return

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    if wait_action == "change_id":
        try:
            rid = int(msg.text.strip())
            store["edit_target"] = rid
            store["edit_wait"] = "change_value"
            bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∏ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ {rid}:")
        except:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID")
        return

    if wait_action == "change_value":
        rid = store.get("edit_target")
        if not rid:
            store["edit_wait"] = None
            return
        parts = msg.text.strip().split(" ", 1)
        try:
            amount = int(parts[0])
            note = parts[1] if len(parts) > 1 else ""
            success, _ = update_record_in_chat(chat_id, rid, amount, note)
            store["edit_wait"] = None
            store["edit_target"] = None
            update_or_send_today_window(chat_id)
            msg_text = f"‚úÖ –ó–∞–ø–∏—Å—å {rid} –∏–∑–º–µ–Ω–µ–Ω–∞" if success else f"‚ùå –ó–∞–ø–∏—Å—å {rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            bot.send_message(chat_id, msg_text)
        except:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—É–º–º—ã")
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    if wait_action == "delete_id":
        try:
            rid = int(msg.text.strip())
            success, _ = delete_record_in_chat(chat_id, rid)
            store["edit_wait"] = None
            update_or_send_today_window(chat_id)
            msg_text = f"‚úÖ –ó–∞–ø–∏—Å—å {rid} —É–¥–∞–ª–µ–Ω–∞" if success else f"‚ùå –ó–∞–ø–∏—Å—å {rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            bot.send_message(chat_id, msg_text)
        except:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")
# -----------------------------
# –û–¢–°–ï–ö 13 ‚Äî Flask webhook
# -----------------------------
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ¬´–§–û¬ª ‚Äî –≤–µ—Ä—Å–∏—è {VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

# -----------------------------
# –û–¢–°–ï–ö 14 ‚Äî Webhook —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫
# -----------------------------
def set_webhook():
    url = f"{APP_URL}/{TOKEN}"
    try:
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url=url)
        log_info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

# -----------------------------
# –û–¢–°–ï–ö 15 ‚Äî –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–º–µ–Ω—ã –¥–Ω—è
# -----------------------------
def schedule_daily_window_creation():
    def task():
        last_day = get_today_key()
        while True:
            try:
                time.sleep(60)
                current_day = get_today_key()
                if current_day != last_day:
                    for chat_id_str in list(data.get("chats", {}).keys()):
                        try:
                            chat_id = int(chat_id_str)
                        except: continue
                        try: update_or_send_today_window(chat_id)
                        except Exception as e: log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞ –Ω–æ–≤–æ–≥–æ –¥–Ω—è –¥–ª—è {chat_id}: {e}")
                    last_day = current_day
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –≤ daily loop: {e}")
                time.sleep(5)
    thread = threading.Thread(target=task, daemon=True)
    thread.start()

# -----------------------------
# –û–¢–°–ï–ö 16 ‚Äî –ó–∞–ø—É—Å–∫
# -----------------------------
if __name__ == "__main__":
    set_webhook()
    schedule_daily_window_creation()
    log_info(f"–ë–æ—Ç –§–û –≤–µ—Ä—Å–∏–∏ {VERSION} –∑–∞–ø—É—â–µ–Ω")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –≤ Telegram
    try:
        if OWNER_ID:
            bot.send_message(int(OWNER_ID), f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! (–≤–µ—Ä—Å–∏—è {VERSION})")
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")

    app.run(host="0.0.0.0", port=PORT)