# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç (–≤–µ—Ä—Å–∏—è 9.6.1.3)
# –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–ª–∞–¥–µ–ª—å—Ü–∞ + –∫–æ–º–∞–Ω–¥–∞ /start —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
# ============================================

import os
import json
import csv
import logging
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

# --------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# --------------------------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data9613.json"
CSV_FILE = "data9613.csv"
LOG_FILE = "log9613.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.6.1.3"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# --------------------------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# --------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)

def log_event(level, msg):
    if level == "info":
        logging.info(msg)
    elif level == "error":
        logging.error(msg)
    else:
        logging.debug(msg)

# --------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
# --------------------------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "active_messages": {},
        "next_id": 1,
        "sent_messages": [],
        "forward_targets": []
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except Exception:
            data = default_data()
    else:
        data = default_data()
    for k, v in default_data().items():
        if k not in data:
            data[k] = v
    return data

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_event("error", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["ID", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–í–ª–∞–¥–µ–ª–µ—Ü"])
            for r in d["records"]:
                writer.writerow([r["id"], r["timestamp"], r["amount"], r["note"], r["owner"]])
    except Exception as e:
        log_event("error", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")

data = load_data()
if OWNER_ID and str(OWNER_ID) not in [str(x) for x in data["forward_targets"]]:
    data["forward_targets"].append(int(OWNER_ID))
    save_data(data)

log_event("info", "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

# --------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# --------------------------------------------
def parse_transaction(text):
    text = text.strip()
    if not text:
        return None, None
    if text[0] in "+-":
        try:
            parts = text.split(" ", 1)
            amount = int(parts[0])
            note = parts[1] if len(parts) > 1 else ""
            return amount, note
        except Exception:
            return None, None
    return None, None

def add_record(amount, note, user_id):
    ts = datetime.now(TZ).isoformat()
    rid = data["next_id"]
    rec = {
        "id": rid,
        "short_id": f"R{rid}",
        "timestamp": ts,
        "amount": amount,
        "note": note,
        "owner": user_id
    }
    data["records"].append(rec)
    data["overall_balance"] += amount
    data["next_id"] += 1
    save_data(data)
    export_to_csv(data)
    if amount >= 0:
        log_event("info", f"INCOME: +{amount} {note}")
    else:
        log_event("info", f"EXPENSE: {amount} {note}")
    return rec

# --------------------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /start
# --------------------------------------------
@bot.message_handler(commands=["start"])
def start_command(msg):
    text = (
        "Welcome to Financial Bot üí∞\n\n"
        "Commands:\n"
        "/start ‚Äì Show this help message\n"
        "/balance ‚Äì Show your current balance\n"
        "/report ‚Äì Show last transactions\n"
        "/reset ‚Äì Clear all data\n"
        "/addforward <chat_id> ‚Äì Add target for message forwarding\n"
        "/removeforward <chat_id> ‚Äì Remove forwarding target\n"
        "/listforwards ‚Äì Show all forwarding targets\n\n"
        "üí° Send +1000 sale or -500 fuel to record a transaction.\n"
    )
    bot.send_message(msg.chat.id, text)

# --------------------------------------------
# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
# --------------------------------------------
@bot.message_handler(commands=["balance", "–±–∞–ª–∞–Ω—Å"])
def show_balance(msg):
    bot.send_message(msg.chat.id, f"üí∞ –ë–∞–ª–∞–Ω—Å: {data['overall_balance']} ‚ÇΩ")

@bot.message_handler(commands=["report", "–æ—Ç—á–µ—Ç"])
def show_report(msg):
    if not data["records"]:
        bot.send_message(msg.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.")
        return
    text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n"
    for r in data["records"][-10:]:
        sign = "+" if r["amount"] > 0 else ""
        text += f"#{r['short_id']} {sign}{r['amount']} {r['note']}\n"
    bot.send_message(msg.chat.id, text)

@bot.message_handler(commands=["reset", "—Å–±—Ä–æ—Å"])
def reset_data(msg):
    if str(msg.from_user.id) != str(OWNER_ID):
        bot.send_message(msg.chat.id, "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return
    global data
    data = default_data()
    if OWNER_ID:
        data["forward_targets"].append(int(OWNER_ID))
    save_data(data)
    export_to_csv(data)
    bot.send_message(msg.chat.id, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.")

# --------------------------------------------
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π
# --------------------------------------------
@bot.message_handler(commands=["addforward"])
def add_forward(msg):
    if str(msg.from_user.id) != str(OWNER_ID):
        return
    try:
        parts = msg.text.split()
        if len(parts) < 2:
            bot.send_message(msg.chat.id, "Usage: /addforward <chat_id>")
            return
        cid = int(parts[1])
        if cid not in data["forward_targets"]:
            data["forward_targets"].append(cid)
            save_data(data)
            bot.send_message(msg.chat.id, f"Added forwarding to chat {cid}")
        else:
            bot.send_message(msg.chat.id, "This chat is already in the list.")
    except Exception as e:
        bot.send_message(msg.chat.id, f"Error: {e}")

@bot.message_handler(commands=["removeforward"])
def remove_forward(msg):
    if str(msg.from_user.id) != str(OWNER_ID):
        return
    try:
        parts = msg.text.split()
        if len(parts) < 2:
            bot.send_message(msg.chat.id, "Usage: /removeforward <chat_id>")
            return
        cid = int(parts[1])
        if cid in data["forward_targets"]:
            data["forward_targets"].remove(cid)
            save_data(data)
            bot.send_message(msg.chat.id, f"Removed forwarding to chat {cid}")
        else:
            bot.send_message(msg.chat.id, "Chat not found in list.")
    except Exception as e:
        bot.send_message(msg.chat.id, f"Error: {e}")

@bot.message_handler(commands=["listforwards"])
def list_forwards(msg):
    if not data["forward_targets"]:
        bot.send_message(msg.chat.id, "No forwarding targets yet.")
    else:
        text = "üì® Forwarding active for chats:\n" + "\n".join(map(str, data["forward_targets"]))
        bot.send_message(msg.chat.id, text)

# --------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# --------------------------------------------
@bot.message_handler(func=lambda m: True, content_types=["text", "photo", "document", "voice", "video", "audio", "sticker"])
def handle_message(msg):
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if str(msg.from_user.id) != str(OWNER_ID):
        return

    # –£—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤/–ø—Ä–∏—Ö–æ–¥–æ–≤
    if msg.content_type == "text":
        amount, note = parse_transaction(msg.text)
        if amount is not None:
            rec = add_record(amount, note, msg.from_user.id)
            bot.send_message(msg.chat.id, f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} {note}\n–ë–∞–ª–∞–Ω—Å: {data['overall_balance']} ‚ÇΩ")

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ forward_targets
    for target in data["forward_targets"]:
        if str(target) != str(OWNER_ID):  # –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–µ–±–µ
            try:
                bot.copy_message(chat_id=target, from_chat_id=msg.chat.id, message_id=msg.message_id)
                log_event("info", f"FORWARD: —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {target}")
            except Exception as e:
                log_event("error", f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")

# --------------------------------------------
# Flask webhook
# --------------------------------------------
@app.route("/", methods=["GET"])
def index():
    return f"–ë–æ—Ç –≤–µ—Ä—Å–∏–∏ {VERSION} –∑–∞–ø—É—â–µ–Ω."

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    try:
        update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
        bot.process_new_updates([update])
    except Exception as e:
        log_event("error", f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
    return "ok", 200

# --------------------------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# --------------------------------------------
if __name__ == "__main__":
    log_event("info", f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–≤–µ—Ä—Å–∏—è {VERSION})")
    app.run(host="0.0.0.0", port=PORT)
# --------------------------------------------
# –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: 500
# --------------------------------------------
