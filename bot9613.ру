# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è 9.8.6 (Code_011)
# –û–¥–∏–Ω —Ñ–∞–π–ª: Flask + webhook, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º, –æ–±–Ω—É–ª–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.
# –¢—Ä–µ–±—É–µ–º—ã–µ env: BOT_TOKEN, APP_URL (–Ω–∞–ø—Ä–∏–º–µ—Ä https://yourapp.onrender.com), PORT (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ), OWNER_ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

import os
import json
import csv
import time
import threading
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from telebot import types
from flask import Flask, request

# ---------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ----------
TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("APP_URL")  # –ø—Ä–∏–º–µ—Ä: https://yourapp.onrender.com
OWNER_ID = os.getenv("OWNER_ID")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
PORT = int(os.getenv("PORT", 5000))
DATA_FILE = "data.json"
CSV_FILE = "data.csv"
TZ = ZoneInfo("America/Argentina/Catamarca")
VERSION = "9.8.6"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# ---------- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–≥–æ–≤ ----------
def log_info(msg):
    print(f"[INFO] {msg}")

def log_error(msg):
    print(f"[ERROR] {msg}")

log_info(f"–°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–µ—Ä—Å–∏—è {VERSION}")

# ---------- –î–∞–Ω–Ω—ã–µ: –∑–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ----------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "chats": {},
        "active_messages": {},
        "next_id": 1
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                d = json.load(f)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {DATA_FILE}: {e}")
            d = default_data()
    else:
        d = default_data()
    base = default_data()
    for k, v in base.items():
        if k not in d:
            d[k] = v
    return d

def save_data(d=None):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d or data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

data = load_data()

# –î–æ–±–∞–≤–ª—è–µ–º OWNER_ID –≤ forward_targets (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
if OWNER_ID:
    try:
        oi = int(OWNER_ID)
        if oi not in data.get("forward_targets", []):
            data.setdefault("forward_targets", []).append(oi)
            save_data(data)
    except Exception as e:
        log_error(f"OWNER_ID –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω: {e}")

# ---------- –î–∞—Ç–∞ / —á–∞—Ç-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ ----------
def get_today_key():
    return datetime.now(TZ).strftime("%Y-%m-%d")

def get_chat_store(chat_id):
    cid = str(chat_id)
    if cid not in data["chats"]:
        data["chats"][cid] = {
            "balance": 0,
            "records": [],
            "next_id": 1,
            "daily_records": {},
            "edit_wait": None,       # None | "change_value" | "delete_id"
            "edit_target": None,     # target record id
            "awaiting_reset_confirm": False,
            "delete_confirm": None
        }
        save_data(data)
    return data["chats"][cid]

def get_today_active_window(chat_id):
    today = get_today_key()
    return data.setdefault("active_messages", {}).get(today, {}).get(str(chat_id))

def set_today_active_window(chat_id, message_id):
    today = get_today_key()
    data.setdefault("active_messages", {}).setdefault(today, {})[str(chat_id)] = message_id
    save_data(data)

# ---------- –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø–∏—Å—è–º–∏ ----------
def add_record_to_chat(chat_id, amount, note, owner):
    store = get_chat_store(chat_id)
    rid = data.get("next_id", 1)
    rec = {
        "id": rid,
        "short_id": f"R{rid}",
        "timestamp": datetime.now(TZ).isoformat(timespec="seconds"),
        "amount": amount,
        "note": note,
        "owner": owner,
        "deleted": False
    }
    data.setdefault("records", []).append(rec)
    store.setdefault("records", []).append(rec)
    day = get_today_key()
    store.setdefault("daily_records", {}).setdefault(day, []).append(rec)
    store["balance"] = sum(r["amount"] for r in store.get("records", []) if not r.get("deleted", False))
    data["overall_balance"] = sum(r["amount"] for r in data.get("records", []) if not r.get("deleted", False))
    data["next_id"] = rid + 1
    save_data(data)
    try:
        export_to_csv(data)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV: {e}")
    return rec

def update_record_in_chat(chat_id, rid, new_amount, new_note):
    store = get_chat_store(chat_id)
    found = None
    for r in store.get("records", []):
        if r["id"] == rid:
            r["amount"] = new_amount
            r["note"] = new_note
            r["deleted"] = False
            found = r
            break
    if found:
        for day_recs in store.get("daily_records", {}).values():
            for r in day_recs:
                if r["id"] == rid:
                    r.update(found)
        store["balance"] = sum(x["amount"] for x in store.get("records", []) if not x.get("deleted", False))
        data["overall_balance"] = sum(x["amount"] for x in data.get("records", []) if not x.get("deleted", False))
        save_data(data)
        try:
            export_to_csv(data)
        except:
            pass
        return True, found
    return False, None

def mark_deleted_record(chat_id, rid):
    store = get_chat_store(chat_id)
    removed = None
    for r in store.get("records", []):
        if r["id"] == rid:
            r["deleted"] = True
            r["note"] = r.get("note", "")
            removed = r
            break
    if removed:
        for day_recs in store.get("daily_records", {}).values():
            for r in day_recs:
                if r["id"] == rid:
                    r["deleted"] = True
        store["balance"] = sum(x["amount"] for x in store.get("records", []) if not x.get("deleted", False))
        data["overall_balance"] = sum(x["amount"] for x in data.get("records", []) if not x.get("deleted", False))
        save_data(data)
        try:
            export_to_csv(data)
        except:
            pass
        return True, removed
    return False, None

def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["chat_id","ID","short_id","timestamp","amount","note","owner","day_key","deleted"])
            for cid, cdata in d.get("chats", {}).items():
                for day_key, records in cdata.get("daily_records", {}).items():
                    for r in records:
                        writer.writerow([cid, r.get("id"), r.get("short_id"), r.get("timestamp"), r.get("amount"), r.get("note"), r.get("owner"), day_key, r.get("deleted", False)])
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def build_main_keyboard(chat_id=None, confirm_reset=False, replace_update_with_edit=True):
    kb = types.InlineKeyboardMarkup(row_width=3)
    kb.row(
        types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
        types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report"),
        types.InlineKeyboardButton("üìÇ CSV", callback_data="btn_csv")
    )
    if confirm_reset:
        kb.row(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_reset"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_reset")
        )
    else:
        kb.row(types.InlineKeyboardButton("‚öôÔ∏è –û–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="btn_reset"))
    if replace_update_with_edit:
        kb.row(
            types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="btn_edit_mode"),
            types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="btn_cod")
        )
    else:
        kb.row(
            types.InlineKeyboardButton("üöÄ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="btn_start"),
            types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="btn_cod")
        )
    balance_text = ""
    if chat_id is not None:
        store = get_chat_store(chat_id)
        balance_text = f"üí∞ {store.get('balance', 0)} ARS"
    kb.add(types.InlineKeyboardButton(balance_text or "üí∞ 0 ARS", callback_data="noop"))
    return kb

# ---------- –°–æ–∑–¥–∞–Ω–∏–µ / –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞ –¥–Ω—è ----------
def update_or_send_today_window(chat_id, create_if_missing=True, show_info=False, edit_mode=False):
    today_key = get_today_key()
    store = get_chat_store(chat_id)
    day_records = store.get("daily_records", {}).get(today_key, [])

    if show_info:
        text = (
            f"‚ÑπÔ∏è –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è {VERSION}\n\n"
            "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start ‚Äî —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –æ–∫–Ω–æ\n"
            "/balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫\n"
            "/report ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å\n"
            "/csv ‚Äî —Å–∫–∞—á–∞—Ç—å CSV\n"
            "/reset ‚Äî –æ–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)\n"
            "/update ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –æ–∫–Ω–æ\n"
            "/info ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –æ–∫–Ω–æ\n\n"
            "üìù –ü—Ä–∏–º–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n"
            "+500 –ó–∞—Ä–ø–ª–∞—Ç–∞\n"
            "-150 –û–±–µ–¥\n"
            "200 –¢–∞–∫—Å–∏  (–±–µ–∑ –∑–Ω–∞–∫–∞ = —Ä–∞—Å—Ö–æ–¥)\n\n"
            "‚úèÔ∏è –ù–∞–∂–º–∏—Ç–µ ¬´–ò–∑–º–µ–Ω–∏—Ç—å¬ª —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å—è–º–∏ (–ò–∑–º–µ–Ω–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å)."
        )
        kb = build_main_keyboard(chat_id, replace_update_with_edit=True)
    else:
        daily_income = sum(r["amount"] for r in day_records if r["amount"] > 0 and not r.get("deleted", False))
        daily_expense = sum(r["amount"] for r in day_records if r["amount"] < 0 and not r.get("deleted", False))
        overall_balance = store.get("balance", 0)

        if not day_records:
            text = (
                f"üìÖ {today_key}\n–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.\n"
                f"üíµ –ü—Ä–∏—Ö–æ–¥: {daily_income} ARS\n"
                f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(daily_expense)} ARS\n"
                f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS"
            )
            kb = build_main_keyboard(chat_id, replace_update_with_edit=True)
        else:
            lines = [f"üìÖ {today_key}", "üìã –û–ø–µ—Ä–∞—Ü–∏–∏:"]
            kb = types.InlineKeyboardMarkup()
            for r in day_records[-50:]:
                if r.get("deleted", False):
                    lines.append(f"{r['short_id']}: ‚ùå –£–¥–∞–ª–µ–Ω–æ ‚Äî {r.get('note','')}")
                else:
                    sign = "+" if r["amount"] > 0 else "-"
                    lines.append(f"{r['short_id']}: {sign}{abs(r['amount'])} ‚Äî {r.get('note','')}")
                    if edit_mode:
                        kb.row(
                            types.InlineKeyboardButton(f"‚úè {r['short_id']}", callback_data=f"edit_{r['id']}"),
                            types.InlineKeyboardButton(f"üóë {r['short_id']}", callback_data=f"delete_{r['id']}")
                        )
            lines.append(
                f"\nüíµ –ü—Ä–∏—Ö–æ–¥: {daily_income} ARS\n"
                f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(daily_expense)} ARS\n"
                f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS"
            )
            if edit_mode:
                kb.row(
                    types.InlineKeyboardButton("‚öôÔ∏è –û–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="btn_reset"),
                    types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="btn_back_from_edit")
                )
            else:
                kb.row(
                    types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="btn_balance"),
                    types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="btn_report"),
                    types.InlineKeyboardButton("üìÇ CSV", callback_data="btn_csv")
                )
                kb.row(
                    types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="btn_edit_mode"),
                    types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="btn_cod")
                )
            text = "\n".join(lines)

    today_msgs = data.setdefault("active_messages", {}).setdefault(get_today_key(), {})
    active_id = today_msgs.get(str(chat_id))

    if active_id:
        try:
            bot.edit_message_text(text, chat_id, active_id, reply_markup=kb)
            return
        except telebot.apihelper.ApiException as e:
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ {active_id} –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")

    if not create_if_missing:
        return

    try:
        sent = bot.send_message(chat_id, text, reply_markup=kb)
        today_msgs[str(chat_id)] = sent.message_id
        save_data(data)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è {chat_id}: {e}")

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ inline callbacks ----------
@bot.callback_query_handler(func=lambda c: True)
def handle_callback(call):
    try:
        chat_id = call.message.chat.id
    except Exception:
        return
    store = get_chat_store(chat_id)
    data_today = data.setdefault("active_messages", {}).setdefault(get_today_key(), {})
    active_id = data_today.get(str(chat_id))

    # –æ—Ç–∫—Ä—ã—Ç—å —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if call.data == "btn_edit_mode":
        update_or_send_today_window(chat_id, create_if_missing=True, edit_mode=True)
        bot.answer_callback_query(call.id, "–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç ‚úèÔ∏è")
        return

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å
    if call.data.startswith("edit_"):
        try:
            rid = int(call.data.split("_", 1)[1])
        except:
            bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
            return
        rec = None
        for r in get_chat_store(chat_id).get("records", []):
            if r["id"] == rid:
                rec = r
                break
        if not rec:
            bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        kb = types.InlineKeyboardMarkup()
        kb.row(
            types.InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Å—É–º–º—É", callback_data=f"start_edit_{rid}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_action")
        )
        text = f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {rec['short_id']}:\n–¢–µ–∫—É—â–µ–µ: {rec['amount']} ‚Äî {rec.get('note','')}\n\n–ù–∞–∂–º–∏—Ç–µ '–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Å—É–º–º—É', –∑–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∏ –∑–∞–º–µ—Ç–∫—É (–ø—Ä–∏–º–µ—Ä: +500 –ó–∞—Ä–ø–ª–∞—Ç–∞)."
        bot.send_message(chat_id, text, reply_markup=kb)
        bot.answer_callback_query(call.id)
        return

    # –Ω–∞—á–∞—Ç—å –≤–≤–æ–¥ –Ω–æ–≤–æ–π —Å—É–º–º—ã ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
    if call.data.startswith("start_edit_"):
        try:
            rid = int(call.data.split("_", 2)[2])
        except:
            bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
            return
        store["edit_wait"] = "change_value"
        store["edit_target"] = rid
        save_data(data)
        bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∏ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ R{rid} (–ø—Ä–∏–º–µ—Ä: +500 –ó–∞—Ä–ø–ª–∞—Ç–∞):")
        bot.answer_callback_query(call.id)
        return

    if call.data == "cancel_edit_action":
        bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
        return

    # —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äî –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if call.data.startswith("delete_"):
        try:
            rid = int(call.data.split("_", 1)[1])
        except:
            bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
            return
        store["delete_confirm"] = rid
        save_data(data)
        kb = types.InlineKeyboardMarkup()
        kb.row(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_delete"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_delete")
        )
        bot.send_message(chat_id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å R{rid}?", reply_markup=kb)
        bot.answer_callback_query(call.id)
        return

    if call.data == "confirm_delete":
        rid = store.get("delete_confirm")
        if not rid:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        success, _ = mark_deleted_record(chat_id, rid)
        store["delete_confirm"] = None
        save_data(data)
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω–∞—è ‚úÖ")
        return

    if call.data == "cancel_delete":
        store["delete_confirm"] = None
        save_data(data)
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå")
        return

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ CSV
    if call.data == "btn_csv":
        try:
            with open(CSV_FILE, "rb") as f:
                bot.send_document(chat_id, f, caption="üìÇ –í–∞—à —Ñ–∞–π–ª data.csv")
            bot.answer_callback_query(call.id, "CSV –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üìÅ")
        except Exception as e:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}")
        return

    # —Å–±—Ä–æ—Å (–Ω–∞—á–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
    if call.data == "btn_reset":
        kb = build_main_keyboard(chat_id, confirm_reset=True)
        text = "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?"
        try:
            if active_id:
                bot.edit_message_text(text, chat_id, active_id, reply_markup=kb)
            else:
                bot.send_message(chat_id, text, reply_markup=kb)
        except Exception:
            try:
                bot.send_message(chat_id, text, reply_markup=kb)
            except:
                pass
        store["awaiting_reset_confirm"] = True
        save_data(data)
        bot.answer_callback_query(call.id)
        return

    if call.data == "confirm_reset":
        if store.get("awaiting_reset_confirm"):
            store["records"] = []
            store["daily_records"] = {}
            store["balance"] = 0
            all_recs = []
            for cid, c in data.get("chats", {}).items():
                all_recs.extend(c.get("records", []))
            data["records"] = all_recs
            data["overall_balance"] = sum(r["amount"] for r in data.get("records", []) if not r.get("deleted", False))
            store["awaiting_reset_confirm"] = False
            save_data(data)
            update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã üßπ")
        return

    if call.data == "cancel_reset":
        store["awaiting_reset_confirm"] = False
        save_data(data)
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω ‚ùå")
        return

    # –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ –≤ —Ç–æ–º –∂–µ –æ–∫–Ω–µ
    if call.data == "btn_cod":
        update_or_send_today_window(chat_id, show_info=True)
        bot.answer_callback_query(call.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìÑ")
        return

    # –≤—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if call.data == "btn_back_from_edit":
        update_or_send_today_window(chat_id, create_if_missing=True)
        bot.answer_callback_query(call.id, "–ù–∞–∑–∞–¥")
        return

    # –±–∞–ª–∞–Ω—Å/–æ—Ç—á—ë—Ç/–æ–±–Ω–æ–≤–∏—Ç—å/noop
    if call.data == "btn_balance":
        send_balance(chat_id)
        bot.answer_callback_query(call.id, "–ë–∞–ª–∞–Ω—Å –ø–æ–∫–∞–∑–∞–Ω ‚úÖ")
        return
    if call.data == "btn_report":
        send_report(chat_id)
        bot.answer_callback_query(call.id, "–û—Ç—á—ë—Ç –ø–æ–∫–∞–∑–∞–Ω üìä")
        return
    if call.data == "btn_start":
        update_or_send_today_window(chat_id)
        bot.answer_callback_query(call.id, "–û–∫–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ üîÑ")
        return
    if call.data == "noop":
        bot.answer_callback_query(call.id)
        return

    bot.answer_callback_query(call.id)

# ---------- Slash-–∫–æ–º–∞–Ω–¥—ã ----------
@bot.message_handler(commands=["start"])
def cmd_start(msg):
    update_or_send_today_window(msg.chat.id)
    try:
        if OWNER_ID:
            bot.send_message(int(OWNER_ID), f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! (–≤–µ—Ä—Å–∏—è {VERSION})")
    except Exception:
        pass

@bot.message_handler(commands=["balance"])
def cmd_balance(msg):
    send_balance(msg.chat.id)

@bot.message_handler(commands=["report"])
def cmd_report(msg):
    send_report(msg.chat.id)

@bot.message_handler(commands=["csv"])
def cmd_csv(msg):
    send_csv(msg.chat.id)

@bot.message_handler(commands=["reset"])
def cmd_reset(msg):
    kb = build_main_keyboard(msg.chat.id, confirm_reset=True)
    text = "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?"
    active_id = get_today_active_window(msg.chat.id)
    try:
        if active_id:
            bot.edit_message_text(text, msg.chat.id, active_id, reply_markup=kb)
        else:
            bot.send_message(msg.chat.id, text, reply_markup=kb)
    except:
        bot.send_message(msg.chat.id, text, reply_markup=kb)
    store = get_chat_store(msg.chat.id)
    store["awaiting_reset_confirm"] = True
    save_data(data)

@bot.message_handler(commands=["update"])
def cmd_update(msg):
    update_or_send_today_window(msg.chat.id)

@bot.message_handler(commands=["info"])
def cmd_info(msg):
    update_or_send_today_window(msg.chat.id, show_info=True)

# ---------- –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ) ----------
num_re = None
try:
    import re as _re
    num_re = _re.compile(r'([+-]?\s*\d+)')
except:
    num_re = None

@bot.message_handler(func=lambda m: True)
def handle_message(msg):
    # ignore messages without text
    if not msg.text:
        return

    chat_id = msg.chat.id
    store = get_chat_store(chat_id)
    wait_action = store.get("edit_wait")

    # –ï—Å–ª–∏ –Ω–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    if wait_action is None:
        # try to detect a number in message
        if num_re:
            m = num_re.search(msg.text)
        else:
            m = None
        if m:
            try:
                raw = m.group(1).replace(" ", "")
                if raw.startswith("+"):
                    amount = int(raw[1:])
                elif raw.startswith("-"):
                    amount = -int(raw[1:])
                else:
                    amount = -int(raw)
                note = msg.text.replace(m.group(1), "").strip()
                add_record_to_chat(chat_id, amount, note, msg.from_user.id)
                update_or_send_today_window(chat_id)
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        return

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Å—É–º–º—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è edit -> change_value
    if wait_action == "change_value":
        rid = store.get("edit_target")
        if not rid:
            store["edit_wait"] = None
            store["edit_target"] = None
            save_data(data)
            return
        parts = msg.text.strip().split(" ", 1)
        try:
            raw = parts[0]
            if raw.startswith("+"):
                amount = int(raw[1:])
            elif raw.startswith("-"):
                amount = -int(raw[1:])
            else:
                amount = -int(raw)
            note = parts[1] if len(parts) > 1 else ""
            success, _ = update_record_in_chat(chat_id, rid, amount, note)
            store["edit_wait"] = None
            store["edit_target"] = None
            save_data(data)
            update_or_send_today_window(chat_id)
            bot.send_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å R{rid} –∏–∑–º–µ–Ω–µ–Ω–∞" if success else f"‚ùå –ó–∞–ø–∏—Å—å R{rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—É–º–º—ã/—Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: +500 –ó–∞—Ä–ø–ª–∞—Ç–∞")
        return

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –≤–≤–æ–¥—É ID
    if wait_action == "delete_id":
        try:
            rid = int(msg.text.strip())
            success, _ = mark_deleted_record(chat_id, rid)
            store["edit_wait"] = None
            store["edit_target"] = None
            save_data(data)
            update_or_send_today_window(chat_id)
            bot.send_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å—å R{rid} —É–¥–∞–ª–µ–Ω–∞" if success else f"‚ùå –ó–∞–ø–∏—Å—å R{rid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ ----------
def send_balance(chat_id):
    store = get_chat_store(chat_id)
    today_key = get_today_key()
    day_records = store.get("daily_records", {}).get(today_key, [])
    daily_income = sum(r["amount"] for r in day_records if r["amount"] > 0 and not r.get("deleted", False))
    daily_expense = sum(r["amount"] for r in day_records if r["amount"] < 0 and not r.get("deleted", False))
    overall_balance = store.get("balance", 0)
    text = (
        f"üìÖ {today_key}\n\n"
        f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {overall_balance} ARS\n"
        f"üíµ –ü—Ä–∏—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {daily_income} ARS\n"
        f"üí∏ –†–∞—Å—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {abs(daily_expense)} ARS"
    )
    active_id = get_today_active_window(chat_id)
    if active_id:
        try:
            bot.edit_message_text(text, chat_id, active_id, reply_markup=build_main_keyboard(chat_id))
            return
        except telebot.apihelper.ApiException as e:
            log_error(f"send_balance: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {active_id}: {e}")
    sent = bot.send_message(chat_id, text, reply_markup=build_main_keyboard(chat_id))
    set_today_active_window(chat_id, sent.message_id)

def send_report(chat_id):
    store = get_chat_store(chat_id)
    today_key = get_today_key()
    day_records = store.get("daily_records", {}).get(today_key, [])
    expenses = [r for r in day_records if r["amount"] < 0 and not r.get("deleted", False)]
    total = sum(abs(r["amount"]) for r in expenses)
    if not expenses:
        text = f"üìÖ {today_key}\n–ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\nüí∏ –†–∞—Å—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å: 0 ARS"
    else:
        lines = [f"üìÖ {today_key}", "üìã –†–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å:"]
        for r in expenses[-30:]:
            lines.append(f"{r['short_id']}: -{abs(r['amount'])} ‚Äî {r.get('note','')}")
        lines.append(f"\nüí∏ –†–∞—Å—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å: {total} ARS")
        text = "\n".join(lines)
    active_id = get_today_active_window(chat_id)
    if active_id:
        try:
            bot.edit_message_text(text, chat_id, active_id, reply_markup=build_main_keyboard(chat_id))
            return
        except telebot.apihelper.ApiException as e:
            log_error(f"send_report: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {active_id}: {e}")
    sent = bot.send_message(chat_id, text, reply_markup=build_main_keyboard(chat_id))
    set_today_active_window(chat_id, sent.message_id)

def send_csv(chat_id):
    try:
        with open(CSV_FILE, "rb") as f:
            bot.send_document(chat_id, f, caption="üìÇ –í–∞—à —Ñ–∞–π–ª data.csv")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CSV: {e}")

# ---------- Webhook / Flask routes ----------
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî –≤–µ—Ä—Å–∏—è {VERSION} —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

def set_webhook():
    if not APP_URL:
        log_error("APP_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤–µ–±—Ö—É–∫ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        return
    url = f"{APP_URL}/{TOKEN}"
    try:
        bot.remove_webhook()
        time.sleep(0.5)
        bot.set_webhook(url=url)
        log_info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")

def schedule_daily_window_creation():
    def task():
        last_day = get_today_key()
        while True:
            try:
                time.sleep(60)
                current_day = get_today_key()
                if current_day != last_day:
                    for cid in list(data.get("chats", {}).keys()):
                        try:
                            update_or_send_today_window(int(cid))
                        except Exception as e:
                            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞ –Ω–æ–≤–æ–≥–æ –¥–Ω—è –¥–ª—è {cid}: {e}")
                    last_day = current_day
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –≤ daily loop: {e}")
                time.sleep(5)
    threading.Thread(target=task, daemon=True).start()

# ---------- –ó–∞–ø—É—Å–∫ ----------
if __name__ == "__main__":
    set_webhook()
    schedule_daily_window_creation()
    log_info(f"–ë–æ—Ç –§–û –≤–µ—Ä—Å–∏–∏ {VERSION} –∑–∞–ø—É—â–µ–Ω")

    if OWNER_ID:
        try:
            bot.send_message(int(OWNER_ID), f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! (–≤–µ—Ä—Å–∏—è {VERSION})")
        except Exception as e:
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")

    app.run(host="0.0.0.0", port=PORT)






# ============================================
# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç (–≤–µ—Ä—Å–∏—è 9.6.1.3)
# –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–ª–∞–¥–µ–ª—å—Ü–∞ + –∫–æ–º–∞–Ω–¥–∞ /start —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
# ============================================

import os
import json
import csv
import logging
from datetime import datetime
from zoneinfo import ZoneInfo

import telebot
from flask import Flask, request
from telebot import types

# --------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# --------------------------------------------
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = os.getenv("OWNER_ID")
TZ = ZoneInfo("America/Argentina/Catamarca")
DATA_FILE = "data9613.json"
CSV_FILE = "data9613.csv"
LOG_FILE = "log9613.txt"
PORT = int(os.environ.get("PORT", 5000))
VERSION = "9.6.1.3"

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# --------------------------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# --------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="[{asctime}] {levelname}: {message}",
    style="{",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)

def log_event(level, msg):
    if level == "info":
        logging.info(msg)
    elif level == "error":
        logging.error(msg)
    else:
        logging.debug(msg)

# --------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
# --------------------------------------------
def default_data():
    return {
        "overall_balance": 0,
        "records": [],
        "active_messages": {},
        "next_id": 1,
        "sent_messages": [],
        "forward_targets": []
    }

def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except Exception:
            data = default_data()
    else:
        data = default_data()
    for k, v in default_data().items():
        if k not in data:
            data[k] = v
    return data

def save_data(d):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log_event("error", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è data.json: {e}")

def export_to_csv(d):
    try:
        with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["ID", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–í–ª–∞–¥–µ–ª–µ—Ü"])
            for r in d["records"]:
                writer.writerow([r["id"], r["timestamp"], r["amount"], r["note"], r["owner"]])
    except Exception as e:
        log_event("error", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")

data = load_data()
if OWNER_ID and str(OWNER_ID) not in [str(x) for x in data["forward_targets"]]:
    data["forward_targets"].append(int(OWNER_ID))
    save_data(data)

log_event("info", "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

# --------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# --------------------------------------------
def parse_transaction(text):
    text = text.strip()
    if not text:
        return None, None
    if text[0] in "+-":
        try:
            parts = text.split(" ", 1)
            amount = int(parts[0])
            note = parts[1] if len(parts) > 1 else ""
            return amount, note
        except Exception:
            return None, None
    return None, None

def add_record(amount, note, user_id):
    ts = datetime.now(TZ).isoformat()
    rid = data["next_id"]
    rec = {
        "id": rid,
        "short_id": f"R{rid}",
        "timestamp": ts,
        "amount": amount,
        "note": note,
        "owner": user_id
    }
    data["records"].append(rec)
    data["overall_balance"] += amount
    data["next_id"] += 1
    save_data(data)
    export_to_csv(data)
    if amount >= 0:
        log_event("info", f"INCOME: +{amount} {note}")
    else:
        log_event("info", f"EXPENSE: {amount} {note}")
    return rec

# --------------------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /start
# --------------------------------------------
@bot.message_handler(commands=["start"])
def start_command(msg):
    text = (
        "Welcome to Financial Bot üí∞\n\n"
        "Commands:\n"
        "/start ‚Äì Show this help message\n"
        "/balance ‚Äì Show your current balance\n"
        "/report ‚Äì Show last transactions\n"
        "/reset ‚Äì Clear all data\n"
        "/addforward <chat_id> ‚Äì Add target for message forwarding\n"
        "/removeforward <chat_id> ‚Äì Remove forwarding target\n"
        "/listforwards ‚Äì Show all forwarding targets\n\n"
        "üí° Send +1000 sale or -500 fuel to record a transaction.\n"
    )
    bot.send_message(msg.chat.id, text)

# --------------------------------------------
# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
# --------------------------------------------
@bot.message_handler(commands=["balance", "–±–∞–ª–∞–Ω—Å"])
def show_balance(msg):
    bot.send_message(msg.chat.id, f"üí∞ –ë–∞–ª–∞–Ω—Å: {data['overall_balance']} ‚ÇΩ")

@bot.message_handler(commands=["report", "–æ—Ç—á–µ—Ç"])
def show_report(msg):
    if not data["records"]:
        bot.send_message(msg.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.")
        return
    text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n"
    for r in data["records"][-10:]:
        sign = "+" if r["amount"] > 0 else ""
        text += f"#{r['short_id']} {sign}{r['amount']} {r['note']}\n"
    bot.send_message(msg.chat.id, text)

@bot.message_handler(commands=["reset", "—Å–±—Ä–æ—Å"])
def reset_data(msg):
    if str(msg.from_user.id) != str(OWNER_ID):
        bot.send_message(msg.chat.id, "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return
    global data
    data = default_data()
    if OWNER_ID:
        data["forward_targets"].append(int(OWNER_ID))
    save_data(data)
    export_to_csv(data)
    bot.send_message(msg.chat.id, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.")

# --------------------------------------------
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π
# --------------------------------------------
@bot.message_handler(commands=["addforward"])
def add_forward(msg):
    if str(msg.from_user.id) != str(OWNER_ID):
        return
    try:
        parts = msg.text.split()
        if len(parts) < 2:
            bot.send_message(msg.chat.id, "Usage: /addforward <chat_id>")
            return
        cid = int(parts[1])
        if cid not in data["forward_targets"]:
            data["forward_targets"].append(cid)
            save_data(data)
            bot.send_message(msg.chat.id, f"Added forwarding to chat {cid}")
        else:
            bot.send_message(msg.chat.id, "This chat is already in the list.")
    except Exception as e:
        bot.send_message(msg.chat.id, f"Error: {e}")

@bot.message_handler(commands=["removeforward"])
def remove_forward(msg):
    if str(msg.from_user.id) != str(OWNER_ID):
        return
    try:
        parts = msg.text.split()
        if len(parts) < 2:
            bot.send_message(msg.chat.id, "Usage: /removeforward <chat_id>")
            return
        cid = int(parts[1])
        if cid in data["forward_targets"]:
            data["forward_targets"].remove(cid)
            save_data(data)
            bot.send_message(msg.chat.id, f"Removed forwarding to chat {cid}")
        else:
            bot.send_message(msg.chat.id, "Chat not found in list.")
    except Exception as e:
        bot.send_message(msg.chat.id, f"Error: {e}")

@bot.message_handler(commands=["listforwards"])
def list_forwards(msg):
    if not data["forward_targets"]:
        bot.send_message(msg.chat.id, "No forwarding targets yet.")
    else:
        text = "üì® Forwarding active for chats:\n" + "\n".join(map(str, data["forward_targets"]))
        bot.send_message(msg.chat.id, text)

# --------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# --------------------------------------------
@bot.message_handler(func=lambda m: True, content_types=["text", "photo", "document", "voice", "video", "audio", "sticker"])
def handle_message(msg):
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if str(msg.from_user.id) != str(OWNER_ID):
        return

    # –£—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤/–ø—Ä–∏—Ö–æ–¥–æ–≤
    if msg.content_type == "text":
        amount, note = parse_transaction(msg.text)
        if amount is not None:
            rec = add_record(amount, note, msg.from_user.id)
            bot.send_message(msg.chat.id, f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} {note}\n–ë–∞–ª–∞–Ω—Å: {data['overall_balance']} ‚ÇΩ")

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ forward_targets
    for target in data["forward_targets"]:
        if str(target) != str(OWNER_ID):  # –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–µ–±–µ
            try:
                bot.copy_message(chat_id=target, from_chat_id=msg.chat.id, message_id=msg.message_id)
                log_event("info", f"FORWARD: —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {target}")
            except Exception as e:
                log_event("error", f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")

# --------------------------------------------
# Flask webhook
# --------------------------------------------
@app.route("/", methods=["GET"])
def index():
    return f"–ë–æ—Ç –≤–µ—Ä—Å–∏–∏ {VERSION} –∑–∞–ø—É—â–µ–Ω."

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    try:
        update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
        bot.process_new_updates([update])
    except Exception as e:
        log_event("error", f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
    return "ok", 200

# --------------------------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# --------------------------------------------
if __name__ == "__main__":
    log_event("info", f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–≤–µ—Ä—Å–∏—è {VERSION})")
    app.run(host="0.0.0.0", port=PORT)
# --------------------------------------------
# –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: 500
# --------------------------------------------
